Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "OGRe: An ",
 StyleBox["O",
  FontWeight->"Bold"],
 "bject-Oriented ",
 StyleBox["G",
  FontWeight->"Bold"],
 "eneral ",
 StyleBox["Re",
  FontWeight->"Bold"],
 "lativity Package for Mathematica"
}], "Title",ExpressionUUID->"f9b6b06a-cd09-4391-b4b4-df7a0162e4aa"],

Cell[TextData[{
 "By Barak Shoshany (",
 ButtonBox["baraksh@gmail.com",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["mailto:baraksh@gmail.com"], None},
  ButtonNote->"mailto:baraksh@gmail.com"],
 ") (",
 ButtonBox["baraksh.com",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://baraksh.com/"], None},
  ButtonNote->"https://baraksh.com/"],
 ")\nDocumentation for v1.7.0 (2021-09-17)"
}], "Subtitle",ExpressionUUID->"7f5271f5-5f4b-4f8e-a02b-a68ebc6eae6c"],

Cell[TextData[{
 "GitHub repository: ",
 ButtonBox["https://github.com/bshoshany/OGRe",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 "\nCopyright (c) 2021 Barak Shoshany. Licensed under the MIT license."
}], "Subsubtitle",ExpressionUUID->"55357ece-b238-491c-b883-b523c3c9bacb"],

Cell[BoxData[
 RowBox[{"SetOptions", "[", 
  RowBox[{"$FrontEnd", ",", 
   RowBox[{"IgnoreSpellCheck", "->", "True"}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"c3b588ae-25b5-422d-a785-4dda82072235"],

Cell[CellGroupData[{

Cell["Introduction", \
"Section",ExpressionUUID->"c6086c01-8f8d-4273-b087-a5088c932910"],

Cell[CellGroupData[{

Cell["Summary", \
"Subsection",ExpressionUUID->"71644aa3-73af-4de3-a967-4e6d20a58076"],

Cell["\<\
OGRe is a modern Mathematica package for tensor calculus, designed to be both \
powerful and user-friendly. It can be used in a variety of contexts where \
tensor calculations are needed, in both mathematics and physics, but it is \
especially suitable for general relativity.\
\>", "Text",ExpressionUUID->"7b5a8a46-6e86-4fc3-9d93-a8d961940a3c"],

Cell["\<\
Tensors are abstract objects, which can be represented as multi-dimensional \
arrays once a choice of index configuration and coordinate system is made. \
OGRe stays true to this definition, but takes away the complexities that come \
with combining tensors in different representations. This is done using an \
object-oriented programming approach, as detailed below.\
\>", "Text",ExpressionUUID->"d90a625b-e66c-4ee6-9a0f-4fe6e56ef9b6"],

Cell["\<\
The user initially defines each tensor in OGRe using its explicit components \
in any single representation. Operations on this tensor are then done \
abstractly, without needing to specify which representation to use. Possible \
operations include addition of tensors, multiplication of tensor by scalar, \
trace, contraction, and partial and covariant derivatives.\
\>", "Text",ExpressionUUID->"2db684e0-af0e-4f5a-8644-f5155f92c970"],

Cell["\<\
OGRe will automatically choose which representation to use for each tensor \
based on how the tensors are combined. For example, if two tensors are added, \
then OGRe will automatically use the same index configuration for both. \
Similarly, if two tensors are contracted, then OGRe will automatically ensure \
that the contracted indices are one upper (contravariant) and one lower \
(covariant). OGRe will also automatically transform all tensors being \
operated on to the same coordinate system.\
\>", "Text",ExpressionUUID->"9d929772-aadd-4955-9a95-e2ae209340d0"],

Cell[TextData[{
 "Transformations between representations are done behind the scenes; all the \
user has to do is specify which metric to use for raising and lowering \
indices, and how to transform between the coordinate systems being used. This \
also means that there is no room for user error. The user cannot mistakenly \
perform \[OpenCurlyDoubleQuote]illegal\[CloseCurlyDoubleQuote] operations \
such as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"2", 
     SuperscriptBox["A", "\[Mu]\[Nu]"]}], "+", 
    RowBox[{
     SubscriptBox["B", "\[Mu]\[Lambda]"], 
     SubscriptBox["C", "\[Lambda]\[Nu]"]}]}], TraditionalForm]],
  ExpressionUUID->"77bc77a6-6fc7-43b7-8675-8f08165a8201"],
 ". Instead, the user simply inputs the names of the tensors, the order (but ",
 StyleBox["not",
  FontWeight->"Bold"],
 " the configuration) of indices for each, and the operations to perform - \
and the correct combination ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", 
    SuperscriptBox["A", "\[Mu]\[Nu]"], 
    SubscriptBox[
     SuperscriptBox["B", "\[Mu]"], "\[Lambda]"], 
    SuperscriptBox["C", "\[Lambda]\[Nu]"]}], TraditionalForm]],ExpressionUUID->
  "b0361f88-9a50-4117-a0bc-3e450eaa3f26"],
 " will be automatically deduced."
}], "Text",ExpressionUUID->"99f7a3ee-2474-4bbf-9aa4-47d57543d0f1"],

Cell["\<\
I initially created OGRe for use in my own research, so I made it as flexible \
and powerful as possible. I also wanted my students to be able to use it \
easily and efficiently, even if they only have minimal experience with \
Mathematica and/or general relativity, so I made it simple to learn and easy \
to use. As a result, this package is equally suitable for both experienced \
and novice researchers.\
\>", "Text",ExpressionUUID->"d12927ca-2bdd-4295-88c3-be3981d75f4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Features", \
"Subsection",ExpressionUUID->"9054bfce-9bd6-47af-9462-cdfe54bf14cf"],

Cell["\<\
Define coordinate systems and the transformation rules between them. Tensor \
components are then transformed automatically between coordinates behind the \
scenes as needed.\
\>", "Item",ExpressionUUID->"f064eb4c-e21b-469d-b9b1-a9e90c2e1a09"],

Cell["\<\
Each tensor is associated with a specific metric. Tensor components are then \
transformed automatically between different index configurations, raising and \
lowering indices behind the scenes as needed.\
\>", "Item",ExpressionUUID->"afdd2dc8-9231-4e8e-a64e-b7924c9170e4"],

Cell["\<\
Display any tensor in any index configuration and coordinate system, either \
in vector/matrix form or as a list of all unique non-zero elements. Metrics \
can also be displayed as a line element.\
\>", "Item",ExpressionUUID->"e366eef2-7ac4-4c62-882d-cbe787be40b5"],

Cell["\<\
Automatically simplify tensor components, optionally with user-defined \
simplification assumptions. Simplifications can be parallelized for a \
significant performance boost. The user may utilize the package's \
simplification algorithm for any Mathematica expression, not just tensors.\
\>", "Item",ExpressionUUID->"61ebc49b-4626-43d3-a650-4889a90b00ad"],

Cell["\<\
Export tensors to a Mathematica notebook or to a file, so they can later be \
imported into another Mathematica session without having to redefine them \
from scratch.\
\>", "Item",ExpressionUUID->"d356c032-9e28-4cef-b34f-bbaa2f4b1ba2"],

Cell["\<\
Highly customizable. User settings are exported and imported along with the \
tensors. Some settings are persistent between sessions.\
\>", "Item",ExpressionUUID->"5b0386ad-d61f-408e-9b0c-6897e4c058a5"],

Cell["\<\
Easily calculate arbitrary tensor formulas using any combination of addition, \
multiplication by scalar, trace, contraction, partial derivative, and \
covariant derivative.\
\>", "Item",ExpressionUUID->"68626565-915f-4c42-b79d-e5aadceea200"],

Cell["\<\
Built-in modules for calculating the Christoffel symbols (Levi-Civita \
connection), Riemann tensor, Ricci tensor and scalar, Einstein tensor, curve \
Lagrangian, and volume element from a metric.\
\>", "Item",ExpressionUUID->"413564aa-3440-470a-93cd-dc7ef6b50cd5"],

Cell["Calculate the norm-squared of tensors of any rank.", \
"Item",ExpressionUUID->"80b7d95a-e4f8-4a9b-a021-dd00425f4109"],

Cell["\<\
Calculate the geodesic equations in terms of a user-defined affine curve \
parameter, in two different ways: from the Christoffel symbols or from the \
curve Lagrangian. For spacetime metrics, the geodesic equations can be \
calculated in terms of the time coordinate.\
\>", "Item",ExpressionUUID->"62e0df95-c5af-44cb-b29d-ec158b6bb8d5"],

Cell["\<\
Designed with speed and performance in mind, using optimized algorithms \
designed specifically for this package.\
\>", "Item",ExpressionUUID->"a12dc524-45bf-4cbc-9e2a-69784c96c48b"],

Cell["\<\
Fully portable. Can be imported directly from the web into any Mathematica \
notebook, without downloading or installing anything. Integrates seamlessly \
with the Wolfram Cloud.\
\>", "Item",ExpressionUUID->"2f978297-0d10-466e-960a-5c46111a9c79"],

Cell["\<\
Clear and detailed documentation, with many examples, in both [Mathematica \
notebook](OGRe_Documentation.nb) and [PDF](OGRe_Documentation.pdf) format. \
Detailed usage messages are also provided.\
\>", "Item",ExpressionUUID->"6767d887-43d0-47ac-8906-f51a5d8fa6f3"],

Cell["\<\
Open source. The code is extensively documented; please feel free to fork and \
modify it as you see fit.\
\>", "Item",ExpressionUUID->"b696bc27-fb45-4f87-be5b-ce2c08930724"],

Cell["\<\
Under continuous and active development. Bug reports and feature requests are \
welcome, and should be made via GitHub issues.\
\>", "Item",ExpressionUUID->"79368d7a-4723-402e-b96f-b8925870bf99"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The object-oriented design philosophy", \
"Subsection",ExpressionUUID->"2685be01-a37a-4c54-8f79-adc07a4c8ef9"],

Cell[TextData[{
 StyleBox["Object-oriented programming",
  FontWeight->"Bold"],
 " refers to a paradigm where a program\[CloseCurlyQuote]s code is organized ",
 "around objects",
 ". An ",
 StyleBox["object",
  FontWeight->"Bold"],
 " belongs to a user-defined type, called a ",
 StyleBox["class",
  FontWeight->"Bold"],
 ".",
 " The class defines the ",
 StyleBox["data",
  FontWeight->"Bold"],
 " that the object stores, as well as ",
 StyleBox["methods",
  FontWeight->"Bold"],
 " or ",
 StyleBox["member functions",
  FontWeight->"Bold"],
 " that read or manipulate that data. One of the fundamental principles of \
object-oriented programming is ",
 StyleBox["encapsulation",
  FontWeight->"Bold"],
 ", which means that the user may only access an object\[CloseCurlyQuote]s \
data using the methods defined by the class, and is unable to access the \
object\[CloseCurlyQuote]s data directly."
}], "Text",ExpressionUUID->"80539a0c-6b1e-4b03-9246-681ce85ebe45"],

Cell[TextData[{
 "Importantly, encapsulation allows for the preservation of ",
 StyleBox["class invariants",
  FontWeight->"Bold"],
 ". An invariant is a condition of validity that can always be assumed to be \
satisfied by the data stored in each object. If the methods make sure to \
preserve the invariant whenever they store or manipulate the data, and the \
user is prevented from changing the data manually and thus potentially \
violating the invariant, then the implementation of the class can be greatly \
simplified, and performance can be improved, because we will not need to \
verify that the data is valid every time we perform an operation."
}], "Text",ExpressionUUID->"74d524c8-13b5-4b56-a9ac-30792d1f00a8"],

Cell[TextData[{
 "The main idea behind OGRe is to simplify the use of tensors by encoding all \
the information about a tensor in a single, self-contained object. As we \
mentioned above, a tensor is an abstract object. We can find components which \
represent this abstract entity in a particular coordinate system and index \
configuration, but the tensor is ",
 StyleBox["not",
  FontWeight->"Bold"],
 " its components. In OGRe, a tensor object is initially defined (or ",
 StyleBox["constructed",
  FontWeight->"Bold"],
 ") by providing the components of the tensor in a particular representation \
- but once this is done, the user does not need to worry about coordinates or \
indices anymore, or even remember which coordinates and indices were \
initially used. The abstract tensor object will automatically transform the \
initial data to a different coordinate system or index configuration as \
needed, based on the context in which it was used."
}], "Text",ExpressionUUID->"509e62af-0c14-466d-ab2f-9dafd87160ef"],

Cell["\<\
As a tensor object holds the components of the same tensor in many different \
representations, the most important class invariant is the assumption that \
the different components indeed represent the same tensor. This is achieved \
using encapsulation; the object\[CloseCurlyQuote]s data can only be modified \
by private methods that preserve the invariant, and thus the user cannot \
accidentally cause a violation of the invariant by assigning components to \
one representation that are not related to the components of all other \
representations by the appropriate coordinate and/or index transformation.\
\>", "Text",ExpressionUUID->"9c1352b1-b269-4222-bb40-7c719884153a"],

Cell[TextData[{
 "Unfortunately, Mathematica does not have built-in support for \
object-oriented programming. However, version 10.0 of Mathematica, released \
in 2014, introduced the ",
 StyleBox["Association", "Input"],
 " symbol. An ",
 StyleBox["Association", "Input"],
 " is an ",
 StyleBox["associative array",
  FontWeight->"Bold"],
 "; it is similar to a ",
 StyleBox["List", "Input"],
 ", except that instead of being just an array of values, an ",
 StyleBox["Association", "Input"],
 " is a list of keys with a value associated to each key. This allows us to \
easily implement a rudimentary form of object-oriented programming, storing \
the properties of each object in the keys of a corresponding ",
 StyleBox["Association", "Input"],
 "."
}], "Text",ExpressionUUID->"840bbee3-6581-465c-9470-bd93ee283ec9"],

Cell[TextData[{
 "Of course, as Mathematica is not truly object-oriented, there is no actual \
\[OpenCurlyDoubleQuote]tensor class\[CloseCurlyDoubleQuote] defined anywhere \
in the package. Instead, the tensor class exists only ",
 StyleBox["implicitly",
  FontWeight->"Bold"],
 ", as a design paradigm. Furthermore, the functions that process the data \
stored in the tensor objects are not methods of a class, they are simply \
modules that take tensor objects as input and/or produce tensor objects as \
outputs. (In earlier versions, I tried using a syntax that resembled method \
syntax in languages such as C++ or Python, but eventually decided against it, \
as it was too cumbersome.) Still, designing the package with object-oriented \
programming in mind allows us to reap many of this \
paradigm\[CloseCurlyQuote]s benefits, as explained above - and it simply \
makes sense for tensors, due to their abstract and multifaceted nature."
}], "Text",ExpressionUUID->"77ea24d4-f8ea-4343-9442-a9cce17e1dfb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Installing and loading the package", \
"Section",ExpressionUUID->"76adc5de-8d17-4c34-a097-3a90a7f33a36"],

Cell[TextData[{
 "This package is compatible with Mathematica 12.0 or newer. It consists of \
only one file, ",
 StyleBox["OGRe.m", "Input"],
 ". There are several different ways to load the package:"
}], "Text",ExpressionUUID->"2d48d093-5a14-477b-acb6-f093d0dcfcce"],

Cell[TextData[{
 StyleBox["Run from local file with installation:",
  FontWeight->"Bold"],
 " This is the recommended option, as it allows you to permanently use the \
package offline from any Mathematica notebook. Download the file ",
 StyleBox["OGRe.m", "Input"],
 " from ",
 ButtonBox["https://github.com/bshoshany/OGRe",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 " and copy it to the directory given by ",
 StyleBox["FileNameJoin[{$UserBaseDirectory,\[CloseCurlyDoubleQuote]\
Applications\[CloseCurlyDoubleQuote]}]", "Input"],
 ". The package may now be loaded from any notebook by writing ",
 StyleBox["Needs[\[OpenCurlyDoubleQuote]OGRe`\[CloseCurlyDoubleQuote]]", 
  "Input"],
 " (note the backtick ",
 StyleBox["`", "Input"],
 " following the word ",
 StyleBox["OGRe", "Input"],
 ")."
}], "Item",ExpressionUUID->"24f56df4-df33-4fd8-a452-34bcda716cd7"],

Cell[TextData[{
 StyleBox["Run from local file without installation:",
  FontWeight->"Bold"],
 " This option allows you to use the package in a portable fashion, without \
installing it in the ",
 StyleBox["Applications", "Input"],
 " directory. Download the file ",
 StyleBox["OGRe.m", "Input"],
 " from ",
 ButtonBox["https://github.com/bshoshany/OGRe",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 ", place it in the same directory as the notebook you would like to use, and \
use the command ",
 StyleBox["Get[\[OpenCurlyDoubleQuote]OGRe.m\[CloseCurlyDoubleQuote],Path\
\[Rule]NotebookDirectory[]]", "Input"],
 " to load the package."
}], "Item",ExpressionUUID->"46e281e6-e5b5-4eb2-87d4-d49d24cc6e3e"],

Cell[TextData[{
 StyleBox["Run from web with installation:",
  FontWeight->"Bold"],
 " This option allows you to automatically download and install the package \
on any computer. Simply run the command ",
 StyleBox["URLDownload[\[OpenCurlyDoubleQuote]https://raw.githubusercontent.\
com/bshoshany/OGRe/master/OGRe.m\[CloseCurlyDoubleQuote],FileNameJoin[{$\
UserBaseDirectory,\[CloseCurlyDoubleQuote]Applications\[CloseCurlyDoubleQuote]\
,\[CloseCurlyDoubleQuote]OGRe.m\[CloseCurlyDoubleQuote]}]]", "Input"],
 " from any Mathematica notebook to permanently install the package. Then use \
",
 StyleBox["Needs[\[OpenCurlyDoubleQuote]OGRe`\[CloseCurlyDoubleQuote]]", 
  "Input"],
 " from any notebook to load it."
}], "Item",ExpressionUUID->"e5be4b5d-613b-442e-84ea-3739b3dc577e"],

Cell[TextData[{
 StyleBox["Run from web without installation:",
  FontWeight->"Bold"],
 " This option allows you to use the package from any Mathematica notebook on \
any computer, without manually downloading or installing it, as long as you \
have a working Internet connection. It also ensures that you always use the \
latest version of the package, but be aware that updates may sometimes not be \
fully backwards compatible. Simply write ",
 StyleBox["Get[\[OpenCurlyDoubleQuote]https://raw.githubusercontent.com/\
bshoshany/OGRe/master/OGRe.m\[CloseCurlyDoubleQuote]]", "Input"],
 " in any Mathematica notebook to load the package."
}], "Item",ExpressionUUID->"59140631-ea7e-43f0-9372-deb42f3cde80"],

Cell[TextData[{
 "To ",
 StyleBox["uninstall",
  FontWeight->"Bold"],
 " the package, just delete the file from the ",
 StyleBox["Applications", "Input"],
 " directory, which can be done from within Mathematica using the command ",
 StyleBox["DeleteFile[FileNameJoin[{$UserBaseDirectory,\
\[CloseCurlyDoubleQuote]Applications\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]OGRe.m\[CloseCurlyDoubleQuote]}]]", "Input"],
 "."
}], "Text",ExpressionUUID->"82e44376-425e-41da-b59b-8487f3176163"],

Cell["\<\
For the purposes of this documentation, I will use the \
\[OpenCurlyDoubleQuote]run from local file without installation\
\[CloseCurlyDoubleQuote] option, since you most likely downloaded both the \
documentation and the package together:\
\>", "Text",ExpressionUUID->"19af190e-31c0-4678-b48e-8175a62dbef1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<OGRe.m\>\"", ",", 
   RowBox[{"Path", "\[Rule]", 
    RowBox[{"NotebookDirectory", "[", "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"13ff9c9f-34fa-4c0a-8325-bc397c28e1e2"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      TemplateBox[{"\"OGRe: An \"", 
        StyleBox["\"O\"", Underlined, StripOnInput -> False], 
        "\"bject-Oriented \"", 
        StyleBox["\"G\"", Underlined, StripOnInput -> False], "\"eneral \"", 
        StyleBox["\"Re\"", Underlined, StripOnInput -> False], 
        "\"lativity Package for Mathematica\""},
       "RowDefault"],
      StripOnInput->False,
      FontSize->Larger,
      FontWeight->Bold]},
    {
     StyleBox[
      TemplateBox[{"\"By Barak Shoshany (\"", 
        TemplateBox[{"\"baraksh@gmail.com\"", "mailto:baraksh@gmail.com"}, 
         "HyperlinkURL"], "\") (\"", 
        TemplateBox[{"\"baraksh.com\"", "https://baraksh.com/"}, 
         "HyperlinkURL"], "\")\""},
       "RowDefault"],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     StyleBox[
      TemplateBox[{"\"v1.7.0 (2021-09-17)\""},
       "RowDefault"],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     StyleBox[
      TemplateBox[{"\"GitHub repository: \"", 
        TemplateBox[{
         "\"https://github.com/bshoshany/OGRe\"", 
          "https://github.com/bshoshany/OGRe"}, "HyperlinkURL"]},
       "RowDefault"],
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TemplateBox[{
      "\"\[Bullet] To view the full documentation for the package, type \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"TDocs[]\"", "Hyperlink", StripOnInput -> False], True -> 
           StyleBox["\"TDocs[]\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> OGRe`TDocs[], 
        Appearance -> "Frameless", BaseStyle -> "Hyperlink", Evaluator -> 
        Automatic, Method -> "Preemptive"], "\".\""},
      "RowDefault"]},
    {
     TemplateBox[{"\"\[Bullet] To list all available modules, type \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"?OGRe`*\"", "Hyperlink", StripOnInput -> False], True -> 
           StyleBox["\"?OGRe`*\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`Private`OGRePrint[
          Information["OGRe`*"]], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], "\".\""},
      "RowDefault"]},
    {
     TemplateBox[{"\"\[Bullet] To get help on a particular module, type \"", 
       StyleBox["\"?\"", "Input", StripOnInput -> False], 
       "\" followed by the module name.\""},
      "RowDefault"]},
    {
     TemplateBox[{"\"\[Bullet] To enable parallelization, type \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"TSetParallelization[True]\"", "Hyperlink", StripOnInput -> 
             False], True -> 
           StyleBox[
            "\"TSetParallelization[True]\"", "HyperlinkActive", StripOnInput -> 
             False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TSetParallelization[True], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], "\".\""},
      "RowDefault"]},
    {
     TemplateBox[{"\"\[Bullet] \"", 
       TemplateBox[{
         DynamicBox[
          ToBoxes[OGRe`Private`UpdateMessage, StandardForm], 
          ImageSizeCache -> {307.3408203125, {3., 9.}}], 
         "\" To disable automatic checks for updates at startup, type \"", 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"TSetAutoUpdates[False]\"", "Hyperlink", StripOnInput -> 
               False], True -> 
             StyleBox[
              "\"TSetAutoUpdates[False]\"", "HyperlinkActive", StripOnInput -> 
               False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TSetAutoUpdates[False], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         "\".\""}, "RowDefault"]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"03b6c143-72cf-4d87-b74d-215df818bcb3"]
}, Open  ]],

Cell["\<\
The package displays a welcome message upon loading, which provides some \
information on how to get started. As stated in the welcome message, to list \
all of the modules available in this package, you may use the following \
command:\
\>", "Text",ExpressionUUID->"b82d70a0-b094-4795-9220-660bc9c6c1c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "OGRe`*"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"8b53e663-6197-424f-ad28-e696e9f0aa4f"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["OGRe`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["OGRe`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["TAddCoordTransformation", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TAddCoordTransformation", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TChangeSymbol", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TChangeSymbol", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TNewCoordinates", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TNewCoordinates", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalc", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalc", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TCheckForUpdates", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCheckForUpdates", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TNewMetric", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TNewMetric", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcChristoffel", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcChristoffel", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TCite", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCite", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TNewTensor", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TNewTensor", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcEinsteinTensor", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcEinsteinTensor", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TCovariantD", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCovariantD", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TPartialD", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TPartialD", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["TCalcGeodesicFromChristoffel", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcGeodesicFromChristoffel", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TDelete", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TDelete", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetAllowOverwrite", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetAllowOverwrite", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["TCalcGeodesicFromLagrangian", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcGeodesicFromLagrangian", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TDocs", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TDocs", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetAssumptions", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetAssumptions", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 
                 StyleBox["TCalcGeodesicWithTimeParameter", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcGeodesicWithTimeParameter", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TExport", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TExport", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetAutoUpdates", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetAutoUpdates", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcLagrangian", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcLagrangian", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TExportAll", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TExportAll", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetCurveParameter", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetCurveParameter", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcNormSquared", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcNormSquared", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TGetComponents", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TGetComponents", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetIndexLetters", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetIndexLetters", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcRicciScalar", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcRicciScalar", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TImport", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TImport", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetParallelization", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetParallelization", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcRicciTensor", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcRicciTensor", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TImportAll", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TImportAll", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSetReservedSymbols", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSetReservedSymbols", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TCalcRiemannTensor", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TCalcRiemannTensor", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TInfo", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TInfo", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TShow", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TShow", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TChangeDefaultCoords", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TChangeDefaultCoords", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TLineElement", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TLineElement", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TSimplify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TSimplify", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TChangeDefaultIndices", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TChangeDefaultIndices", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TList", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TList", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TVolumeElementSquared", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TVolumeElementSquared", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["TChangeID", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TChangeID", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TMessage", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792", {
                   "TMessage", "OGRe`"}, False},
                 ButtonNote->"OGRe`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.31666666666666665`]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"2dca08e3-4c92-4451-ab30-18090b55f05c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TShow[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] shows the \
components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] shows the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TShow[\\\", Style[\\\"ID\\\", Bold], \
\\\"] shows the components of the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTShow[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] shows the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"TShow", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    RowBox[{"OGRe`Private`indices_List", ":", 
                    RowBox[{"{", "\"_UseDefault_\"", "}"}]}], ",", 
                    
                    RowBox[{"OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`function_", ":", "Identity"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", "OGRe`Private`function", "]"}]}], 
                    "&&", 
                    RowBox[{"!", 
                    
                    RowBox[{"StringQ", "[", "OGRe`Private`function", 
                    "]"}]}]}]}], ":=", 
                    RowBox[{"OGRe`Private`ShowList", "[", 
                    
                    RowBox[{
                    "OGRe`Private`ID", ",", "OGRe`Private`indices", ",", 
                    "OGRe`Private`coordinatesID", ",", "\"Show\"", ",", 
                    "OGRe`Private`function"}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TShow\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TShow[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] shows the \
components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] shows the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TShow[\\\", Style[\\\"ID\\\", Bold], \
\\\"] shows the components of the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTShow[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] shows the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TShow[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] shows the components of the tensor \
object \", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \" in its \
default index configuration and coordinate system.\\nTShow[\", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"indices\
\", Bold, Rule[StripOnInput, False]], \"] shows the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
which should be a list of the form {\\[PlusMinus]1, \\[PlusMinus]1, ...}, \
where +1 corresponds to an upper index and -1 corresponds to a lower \
index.\\nTShow[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] shows the \
components in the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTShow[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \"] shows the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
and the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTShow[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \"] maps \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\nTShow[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, \
False]], \", \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
\", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"function\", Bold, Rule[StripOnInput, False]], \"] does all of the \
above; either \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
or \", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" can \
be omitted.\"}]], TextCell[Row[List[\"TShow[\", Style[\"ID\", Bold], \"] \
shows the components of the tensor object \", Style[\"ID\", Bold], \" in its \
default index configuration and coordinate system.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"indices\", Bold], \"] shows the components in the \
index configuration \", Style[\"indices\", Bold], \", which should be a list \
of the form {\\[PlusMinus]1, \\[PlusMinus]1, ...}, where +1 corresponds to an \
upper index and -1 corresponds to a lower index.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"coordinatesID\", Bold], \"] shows the components in \
the coordinate system \", Style[\"coordinatesID\", Bold], \".\\nTShow[\", \
Style[\"ID\", Bold], \", \", Style[\"indices\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \"] shows the components in the index \
configuration \", Style[\"indices\", Bold], \" and the coordinate system \", \
Style[\"coordinatesID\", Bold], \".\\nTShow[\", Style[\"ID\", Bold], \", \", \
Style[\"function\", Bold], \"] maps \", Style[\"function\", Bold], \" to each \
of the tensor's elements, and then automatically simplifies them, before they \
are displayed. Typically this would be ReplaceAll[rules] to apply the rules \
to the elements, but any function can be used.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"indices\", Bold], \", \", Style[\"coordinatesID\", \
Bold], \", \", Style[\"function\", Bold], \"] does all of the above; either \
\", Style[\"indices\", Bold], \" or \", Style[\"coordinatesID\", Bold], \" \
can be omitted.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TShow, {Condition[
         OGRe`TShow[
          Pattern[OGRe`Private`ID, 
           Blank[String]], 
          Optional[
           Pattern[OGRe`Private`indices, 
            Blank[List]], {"_UseDefault_"}], 
          Optional[
           Pattern[OGRe`Private`coordinatesID, 
            Blank[String]], "_UseDefault_"], 
          Optional[
           Pattern[OGRe`Private`function, 
            Blank[]], Identity]], 
         And[
          Not[
           ListQ[OGRe`Private`function]], 
          Not[
           StringQ[OGRe`Private`function]]]] :> 
       OGRe`Private`ShowList[
        OGRe`Private`ID, OGRe`Private`indices, OGRe`Private`coordinatesID, 
         "Show", OGRe`Private`function]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TShow"|>, False]]], "Print",
 CellTags->
  "Info-399ed82f-420e-4e2e-8da5-09cce6a7b792",ExpressionUUID->"436684cd-317a-\
4abb-8a7e-a8c9ba2f04c0"]
}, Open  ]],

Cell[TextData[{
 "Clicking on the name of any module in this list will show its usage \
message. Notice that all OGRe modules start with the letter ",
 StyleBox["T", "Input"],
 ", to help distinguish them from other modules, whether built-in or from \
other packages."
}], "Text",ExpressionUUID->"9d602f41-08f8-4fb8-a39a-d004d96a69b0"],

Cell[TextData[{
 "When the package loads, it will automatically check the GitHub repository \
for updates. This can also be done manually using the module ",
 StyleBox["TCheckForUpdates", "Input"],
 ". If a new version of the package has been released, you will be given the \
option to download or install it in one click. If you are running the package \
directly from the web, you will always be using the latest version."
}], "Text",ExpressionUUID->"b4bd036f-d51e-4dac-af95-956f329b18c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCheckForUpdates"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"d60cfadb-d827-483d-bb06-218f031515d5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCheckForUpdates[] checks the GitHub repository for new versions of this \
package. If a new version is available, the user will be given the option to \
download or install it.\\\"}]], TextCell[Row[List[\\\"TCheckForUpdates[] \
checks the GitHub repository for new versions of this package. If a new \
version is available, the user will be given the option to download or \
install it.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCheckForUpdates", "[", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`errorMessage", ",", 
                    "OGRe`Private`newVersion", ",", "OGRe`Private`remoteFile",
                     ",", "OGRe`Private`toPrint", ",", 
                    "OGRe`Private`versionLookup"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`errorMessage", "=", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Error: Failed to check for updates. Please visit \"", 
                    ",", 
                    
                    RowBox[{"Hyperlink", "[", 
                    "\"https://github.com/bshoshany/OGRe\"", "]"}], ",", 
                    "\" to check manually.\""}], "}"}], "]"}]}], ";", 
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Checking GitHub repository for updates...\"", "]"}], 
                    ";", 
                    RowBox[{"OGRe`Private`remoteFile", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{"Import", "[", 
                    RowBox[{"OGRe`Private`OGReURL", ",", "\"Text\""}], "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`remoteFile", "===", "$Failed"}], 
                    ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "OGRe`Private`errorMessage", "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`versionLookup", "=", 
                    RowBox[{"StringCases", "[", 
                    RowBox[{"OGRe`Private`remoteFile", ",", 
                    RowBox[{"Shortest", "[", 
                    
                    RowBox[{"\"OGReVersion = \\\"\"", "~~", "__", "~~", 
                    "\"\\\";\""}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"Length", "[", "OGRe`Private`versionLookup", 
                    "]"}], "\[Equal]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`newVersion", "=", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`versionLookup", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"16", ",", 
                    RowBox[{
                    RowBox[{"StringLength", "[", 
                    
                    RowBox[{"OGRe`Private`versionLookup", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "]"}], "-", "2"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`newVersion", "===", 
                    "OGRe`Private`OGReVersion"}], ",", 
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"You have the latest version of the package.\"", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`toPrint", "=", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"A new version of the package is available: \"",
                     ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"OGRe`Private`newVersion", ",", "Bold"}], "]"}]}],
                     "}"}], "]"}], "}"}]}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`toPrint", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\[Bullet] \"", ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    RowBox[{"\"Visit GitHub repository.\"", ",", 
                    
                    RowBox[{"SystemOpen", "[", 
                    "\"https://github.com/bshoshany/OGRe\"", "]"}]}], "]"}]}],
                     "}"}], "]"}]}], "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`toPrint", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\[Bullet] \"", ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    
                    RowBox[{
                    "\"Reload new version directly from GitHub without \
downloading it.\"", ",", 
                    RowBox[{"Get", "[", "OGRe`Private`OGReURL", "]"}]}], 
                    "]"}]}], "}"}], "]"}]}], "]"}], ";", 
                    RowBox[{"Off", "[", 
                    StyleBox[
                    RowBox[{"NotebookDirectory", "::", "nosv"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], "=!=", 
                    "$Failed"}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`toPrint", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\[Bullet] \"", ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    RowBox[{
                    RowBox[{"\"Download new version to \"", "<>", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"OGRe.m\""}], "}"}], "]"}], "<>", 
                    "\" and reload the package.\""}], ",", 
                    RowBox[{
                    RowBox[{"URLDownload", "[", 
                    RowBox[{"OGRe`Private`OGReURL", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"OGRe.m\""}], "}"}], "]"}]}], "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Downloaded! Reloading...\"", "]"}], ";", 
                    RowBox[{"Get", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", 
                    "\"OGRe.m\""}], "}"}], "]"}], "]"}]}]}], "]"}]}], "}"}], 
                    "]"}]}], "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"On", "[", 
                    StyleBox[
                    RowBox[{"NotebookDirectory", "::", "nosv"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`toPrint", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\[Bullet] \"", ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    RowBox[{
                    RowBox[{"\"Install new version to \"", "<>", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"$UserBaseDirectory", ",", "\"Applications\"", 
                    ",", "\"OGRe.m\""}], "}"}], "]"}], "<>", 
                    "\" and reload the package.\""}], ",", 
                    RowBox[{
                    RowBox[{"URLDownload", "[", 
                    RowBox[{"OGRe`Private`OGReURL", ",", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"$UserBaseDirectory", ",", "\"Applications\"", 
                    ",", "\"OGRe.m\""}], "}"}], "]"}]}], "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Installed! Reloading...\"", "]"}], ";", 
                    RowBox[{"Get", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"$UserBaseDirectory", ",", "\"Applications\"", 
                    ",", "\"OGRe.m\""}], "}"}], "]"}], "]"}]}]}], "]"}]}], 
                    "}"}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    RowBox[{"Column", "[", "OGRe`Private`toPrint", "]"}], 
                    "]"}], ";"}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "OGRe`Private`errorMessage", "]"}], ";"}]}], "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCheckForUpdates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCheckForUpdates[] checks the GitHub repository for new versions of this \
package. If a new version is available, the user will be given the option to \
download or install it.\\\"}]], TextCell[Row[List[\\\"TCheckForUpdates[] \
checks the GitHub repository for new versions of this package. If a new \
version is available, the user will be given the option to download or \
install it.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCheckForUpdates[] checks the \
GitHub repository for new versions of this package. If a new version is \
available, the user will be given the option to download or install it.\"}]], \
TextCell[Row[List[\"TCheckForUpdates[] checks the GitHub repository for new \
versions of this package. If a new version is available, the user will be \
given the option to download or install it.\"]]]]\)", "Documentation" -> None,
     "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCheckForUpdates, {
      OGRe`TCheckForUpdates[] :> 
       Module[{OGRe`Private`errorMessage, OGRe`Private`newVersion, 
          OGRe`Private`remoteFile, OGRe`Private`toPrint, 
          OGRe`Private`versionLookup}, 
         OGRe`Private`errorMessage = 
          Row[{"Error: Failed to check for updates. Please visit ", 
             Hyperlink["https://github.com/bshoshany/OGRe"], 
             " to check manually."}]; 
         OGRe`Private`OGRePrint["Checking GitHub repository for updates..."]; 
         OGRe`Private`remoteFile = Quiet[
            Import[OGRe`Private`OGReURL, "Text"]]; 
         If[OGRe`Private`remoteFile === $Failed, 
           OGRe`Private`OGRePrint[OGRe`Private`errorMessage]; Abort[]; Null]; 
         OGRe`Private`versionLookup = StringCases[OGRe`Private`remoteFile, 
            Shortest[
             StringExpression["OGReVersion = \"", 
              BlankSequence[], "\";"]]]; 
         If[Length[OGRe`Private`versionLookup] == 1, 
           OGRe`Private`newVersion = StringTake[
              Part[OGRe`Private`versionLookup, 1], {16, StringLength[
                 Part[OGRe`Private`versionLookup, 1]] - 2}]; 
           If[OGRe`Private`newVersion === OGRe`Private`OGReVersion, 
             OGRe`Private`OGRePrint[
             "You have the latest version of the package."], 
             OGRe`Private`toPrint = {
                Row[{"A new version of the package is available: ", 
                  Style[OGRe`Private`newVersion, Bold]}]}; 
             AppendTo[OGRe`Private`toPrint, 
               Row[{"\[Bullet] ", 
                 OGRe`Private`CreateButton["Visit GitHub repository.", 
                  SystemOpen["https://github.com/bshoshany/OGRe"]]}]]; 
             AppendTo[OGRe`Private`toPrint, 
               Row[{"\[Bullet] ", 
                 OGRe`Private`CreateButton[
                 "Reload new version directly from GitHub without downloading \
it.", 
                  Get[OGRe`Private`OGReURL]]}]]; Off[
               MessageName[NotebookDirectory, "nosv"]]; 
             If[NotebookDirectory[] =!= $Failed, 
               AppendTo[OGRe`Private`toPrint, 
                 Row[{"\[Bullet] ", 
                   OGRe`Private`CreateButton[
                   "Download new version to " <> FileNameJoin[{
                    NotebookDirectory[], "OGRe.m"}] <> 
                    " and reload the package.", 
                    URLDownload[OGRe`Private`OGReURL, 
                    FileNameJoin[{
                    NotebookDirectory[], "OGRe.m"}]]; 
                    OGRe`Private`OGRePrint["Downloaded! Reloading..."]; Get[
                    FileNameJoin[{
                    NotebookDirectory[], "OGRe.m"}]]]}]]; Null]; On[
               MessageName[NotebookDirectory, "nosv"]]; 
             AppendTo[OGRe`Private`toPrint, 
               Row[{"\[Bullet] ", 
                 OGRe`Private`CreateButton[
                 "Install new version to " <> 
                  FileNameJoin[{$UserBaseDirectory, "Applications", 
                    "OGRe.m"}] <> " and reload the package.", 
                  URLDownload[OGRe`Private`OGReURL, 
                    
                    FileNameJoin[{$UserBaseDirectory, "Applications", 
                    "OGRe.m"}]]; 
                  OGRe`Private`OGRePrint["Installed! Reloading..."]; Get[
                    
                    FileNameJoin[{$UserBaseDirectory, "Applications", 
                    "OGRe.m"}]]]}]]; OGRe`Private`OGRePrint[
               Column[OGRe`Private`toPrint]]; Null], 
           OGRe`Private`OGRePrint[OGRe`Private`errorMessage]; Null]; Null]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TCheckForUpdates"|>, False]]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"85ad3174-4d6d-4f80-87e6-dce7526960ec"]
}, Open  ]],

Cell[TextData[{
 "You can also disable automatic checks for updates at startup in all future \
sessions by calling ",
 StyleBox["TSetAutoUpdates[False]", "Input"],
 ":"
}], "Text",ExpressionUUID->"b8ba7a8c-37aa-4941-9028-0e55c213075b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetAutoUpdates"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"c343b638-37b5-4ae2-ac3a-45fac6f04143"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAutoUpdates[\\\", StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, \
False]], \\\"] turns off automatic checks for updates at startup. \
TSetAutoUpdates[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] turns them back on, which is the default setting. \
TSetAutoUpdates[] returns the current setting. Note that this setting is \
persistent between sessions.\\\"}]], TextCell[Row[List[\\\"TSetAutoUpdates[\\\
\", Style[\\\"False\\\", Bold], \\\"] turns off automatic checks for updates \
at startup. TSetAutoUpdates[\\\", Style[\\\"True\\\", Bold], \\\"] turns them \
back on, which is the default setting. TSetAutoUpdates[] returns the current \
setting. Note that this setting is persistent between \
sessions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetAutoUpdates", "[", "]"}], ":=", 
                    
                    RowBox[{
                    "OGRe`Private`OGReGlobalOptions", "[", "\"AutoUpdates\"", 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TSetAutoUpdates", "[", 
                    RowBox[{"OGRe`Private`bool_", "?", "BooleanQ"}], "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`OGReGlobalOptions", "]"}],
                     ";", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGReGlobalOptions", "[", 
                    "\"AutoUpdates\"", "]"}], "=", "OGRe`Private`bool"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    RowBox[{"\"Auto updates turned \"", ",", 
                    RowBox[{"If", "[", 
                    
                    RowBox[{"OGRe`Private`bool", ",", "\"on\"", ",", 
                    "\"off\""}], "]"}], ",", "\".\""}], "]"}], ";", 
                    RowBox[{
                    
                    RowBox[{"LocalSymbol", "[", "\"OGReGlobalOptions\"", 
                    "]"}], "=", "OGRe`Private`OGReGlobalOptions"}], ";", 
                    
                    RowBox[{
                    "Protect", "[", "OGRe`Private`OGReGlobalOptions", "]"}], 
                    ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetAutoUpdates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAutoUpdates[\\\", StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, \
False]], \\\"] turns off automatic checks for updates at startup. \
TSetAutoUpdates[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] turns them back on, which is the default setting. \
TSetAutoUpdates[] returns the current setting. Note that this setting is \
persistent between sessions.\\\"}]], TextCell[Row[List[\\\"TSetAutoUpdates[\\\
\", Style[\\\"False\\\", Bold], \\\"] turns off automatic checks for updates \
at startup. TSetAutoUpdates[\\\", Style[\\\"True\\\", Bold], \\\"] turns them \
back on, which is the default setting. TSetAutoUpdates[] returns the current \
setting. Note that this setting is persistent between \
sessions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetAutoUpdates[\", \
StyleBox[\"False\", Bold, Rule[StripOnInput, False]], \"] turns off automatic \
checks for updates at startup. TSetAutoUpdates[\", StyleBox[\"True\", Bold, \
Rule[StripOnInput, False]], \"] turns them back on, which is the default \
setting. TSetAutoUpdates[] returns the current setting. Note that this \
setting is persistent between sessions.\"}]], \
TextCell[Row[List[\"TSetAutoUpdates[\", Style[\"False\", Bold], \"] turns off \
automatic checks for updates at startup. TSetAutoUpdates[\", Style[\"True\", \
Bold], \"] turns them back on, which is the default setting. \
TSetAutoUpdates[] returns the current setting. Note that this setting is \
persistent between sessions.\"]]]]\)", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetAutoUpdates, {
      OGRe`TSetAutoUpdates[] :> OGRe`Private`OGReGlobalOptions["AutoUpdates"],
        OGRe`TSetAutoUpdates[
         PatternTest[
          Pattern[OGRe`Private`bool, 
           Blank[]], BooleanQ]] :> (Unprotect[OGRe`Private`OGReGlobalOptions]; 
        OGRe`Private`OGReGlobalOptions["AutoUpdates"] = OGRe`Private`bool; 
        OGRe`Private`OGRePrint["Auto updates turned ", 
          If[OGRe`Private`bool, "on", "off"], "."]; 
        LocalSymbol["OGReGlobalOptions"] = OGRe`Private`OGReGlobalOptions; 
        Protect[OGRe`Private`OGReGlobalOptions]; Null)}], "SubValues" -> None,
     "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TSetAutoUpdates"|>, False]]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"00e17922-31b5-42e6-bed1-05680b03e4e5"]
}, Open  ]],

Cell[TextData[{
 "If at any point you wish to view this documentation, simply type ",
 StyleBox["TDocs[]", "Input"],
 ". This file ",
 StyleBox["(OGRe_Documentation.nb", "Input"],
 ") will then be automatically opened in Mathematica."
}], "Text",ExpressionUUID->"f6475c94-52c6-498e-8c6b-158de512039f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TDocs"}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"9faf168e-6bb7-4632-a416-b2b033f19b0a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TDocs[\
] opens the Mathematica notebook OGRe_Documentation.nb from the GitHub \
repository, which contains the full documentation for the package.\\\"}]], \
TextCell[Row[List[\\\"TDocs[] opens the Mathematica notebook \
OGRe_Documentation.nb from the GitHub repository, which contains the full \
documentation for the package.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TDocs", "[", "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"NotebookOpen", "[", 
                    "\"https://raw.githubusercontent.com/bshoshany/OGRe/\
master/OGRe_Documentation.nb\"", "]"}], "===", "$Failed"}], ",", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Error: Failed to load the documentation. Please visit \
\"", ",", 
                    RowBox[{
                    "Hyperlink", "[", "\"https://github.com/bshoshany/OGRe\"",
                     "]"}], ",", "\" to download it manually.\""}], "}"}], 
                    "]"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Successfully loaded the documentation from GitHub.\"", 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TDocs\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TDocs[\
] opens the Mathematica notebook OGRe_Documentation.nb from the GitHub \
repository, which contains the full documentation for the package.\\\"}]], \
TextCell[Row[List[\\\"TDocs[] opens the Mathematica notebook \
OGRe_Documentation.nb from the GitHub repository, which contains the full \
documentation for the package.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TDocs[] opens the Mathematica \
notebook OGRe_Documentation.nb from the GitHub repository, which contains the \
full documentation for the package.\"}]], TextCell[Row[List[\"TDocs[] opens \
the Mathematica notebook OGRe_Documentation.nb from the GitHub repository, \
which contains the full documentation for the package.\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TDocs, {
      OGRe`TDocs[] :> 
       If[NotebookOpen[
          "https://raw.githubusercontent.com/bshoshany/OGRe/master/OGRe_\
Documentation.nb"] === $Failed, 
         OGRe`Private`OGRePrint[
          Row[{"Error: Failed to load the documentation. Please visit ", 
            Hyperlink["https://github.com/bshoshany/OGRe"], 
            " to download it manually."}]], 
         OGRe`Private`OGRePrint[
          "Successfully loaded the documentation from GitHub."]; Null]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TDocs"|>, False]]], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"159617d4-ee82-4b9e-bbea-82d6dd9b6afd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating and displaying tensor objects", \
"Section",ExpressionUUID->"feca6523-218f-4466-b355-28174693507e"],

Cell[CellGroupData[{

Cell["Defining coordinates", \
"Subsection",ExpressionUUID->"45a5e460-996d-40c0-972a-9993fb6f05b3"],

Cell["\<\
To define tensors, we first need to define the manifold on which they reside. \
Since we are focusing on general relativity, we will use 4-dimensional \
spacetime manifolds in the following examples, but this package works equally \
well with manifolds that are purely spatial and/or have a different number of \
dimensions.\
\>", "Text",ExpressionUUID->"89b62041-217f-49b0-8628-50954abe9e2e"],

Cell[TextData[{
 "The first step is to define the coordinate system. In OGRe, coordinates are \
represented as a special tensor object: a vector ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", "\[Mu]"], "InlineFormula"], TraditionalForm]],
  ExpressionUUID->"11096430-f01b-470c-855e-31b1a111e9a3"],
 " (a tensor of rank 1) representing a point. To define the coordinates, we \
use the module ",
 StyleBox["TNewCoordinates", "Input"],
 ":"
}], "Text",ExpressionUUID->"590e8b1f-6f6f-4b0a-8b41-5e1cc419f1dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TNewCoordinates"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"2077947a-1678-4a26-9dc3-ca9ee1553940"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewCoordinates[\\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"symbols\\\", Bold, \
Rule[StripOnInput, False]], \\\"], creates a new tensor object representing a \
coordinate system.\\\\n\\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", StyleBox[\\\"symbols\\\", Bold, \
Rule[StripOnInput, False]], \\\" are the coordinate symbols, e.g. {t, x, y, \
z}. They will automatically be cleared and protected against future changes \
using TSetReservedSymbols[].\\\"}]], TextCell[Row[List[\\\"TNewCoordinates[\\\
\", Style[\\\"coordinatesID\\\", Bold], \\\", \\\", Style[\\\"symbols\\\", \
Bold], \\\"], creates a new tensor object representing a coordinate system.\\\
\\n\\\", Style[\\\"coordinatesID\\\", Bold], \\\" is a string that will be \
used to identify the new object, and must be unique.\\\\n\\\", \
Style[\\\"symbols\\\", Bold], \\\" are the coordinate symbols, e.g. {t, x, y, \
z}. They will automatically be cleared and protected against future changes \
using TSetReservedSymbols[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TNewCoordinates", "[", 
                    RowBox[{"OGRe`Private`coordinatesID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinates_List", "?", "VectorQ"}]}], 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`coordinates", "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewCoordinates", "::", "ErrorEmptyList"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"TSetReservedSymbols", "[", 
                    
                    RowBox[{"Unevaluated", "[", "OGRe`Private`coordinates", 
                    "]"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`coordinatesID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "\[Rule]", 
                    "OGRe`Private`coordinates"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`coordinatesID"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Coordinates\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", "\"x\""}]}], "]"}]}], 
                    "]"}], ";", 
                    
                    RowBox[{
                    "Return", "[", "OGRe`Private`coordinatesID", "]"}], ";"}],
                     ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"HoldRest", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TNewCoordinates\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewCoordinates[\\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"symbols\\\", Bold, \
Rule[StripOnInput, False]], \\\"], creates a new tensor object representing a \
coordinate system.\\\\n\\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", StyleBox[\\\"symbols\\\", Bold, \
Rule[StripOnInput, False]], \\\" are the coordinate symbols, e.g. {t, x, y, \
z}. They will automatically be cleared and protected against future changes \
using TSetReservedSymbols[].\\\"}]], TextCell[Row[List[\\\"TNewCoordinates[\\\
\", Style[\\\"coordinatesID\\\", Bold], \\\", \\\", Style[\\\"symbols\\\", \
Bold], \\\"], creates a new tensor object representing a coordinate system.\\\
\\n\\\", Style[\\\"coordinatesID\\\", Bold], \\\" is a string that will be \
used to identify the new object, and must be unique.\\\\n\\\", \
Style[\\\"symbols\\\", Bold], \\\" are the coordinate symbols, e.g. {t, x, y, \
z}. They will automatically be cleared and protected against future changes \
using TSetReservedSymbols[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TNewCoordinates[\", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"symbols\", Bold, Rule[StripOnInput, False]], \"], creates a new \
tensor object representing a coordinate system.\\n\", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" is a string \
that will be used to identify the new object, and must be unique.\\n\", \
StyleBox[\"symbols\", Bold, Rule[StripOnInput, False]], \" are the coordinate \
symbols, e.g. {t, x, y, z}. They will automatically be cleared and protected \
against future changes using TSetReservedSymbols[].\"}]], \
TextCell[Row[List[\"TNewCoordinates[\", Style[\"coordinatesID\", Bold], \", \
\", Style[\"symbols\", Bold], \"], creates a new tensor object representing a \
coordinate system.\\n\", Style[\"coordinatesID\", Bold], \" is a string that \
will be used to identify the new object, and must be unique.\\n\", \
Style[\"symbols\", Bold], \" are the coordinate symbols, e.g. {t, x, y, z}. \
They will automatically be cleared and protected against future changes using \
TSetReservedSymbols[].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None,
     "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TNewCoordinates, {OGRe`TNewCoordinates[
         Pattern[OGRe`Private`coordinatesID, 
          Blank[String]], 
         PatternTest[
          Pattern[OGRe`Private`coordinates, 
           Blank[List]], VectorQ]] :> (
        OGRe`Private`CheckIfOverwriting[OGRe`Private`coordinatesID]; 
        If[OGRe`Private`coordinates == {}, Message[
            MessageName[OGRe`TNewCoordinates, "ErrorEmptyList"]]; Abort[]]; 
        OGRe`TSetReservedSymbols[
          Unevaluated[OGRe`Private`coordinates]]; 
        OGRe`Private`SetTensorID[
         OGRe`Private`coordinatesID, <|
          "Components" -> <|{{1}, OGRe`Private`coordinatesID} -> 
             OGRe`Private`coordinates|>, "DefaultCoords" -> 
           OGRe`Private`coordinatesID, "DefaultIndices" -> {1}, "Role" -> 
           "Coordinates", "Symbol" -> "x"|>]; 
        Return[OGRe`Private`coordinatesID]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {HoldRest, Protected}, "FullName" -> 
    "OGRe`TNewCoordinates"|>, False]]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"1c0b97b4-d37a-4686-8539-d1ec7260d442"]
}, Open  ]],

Cell[TextData[{
 "For example, to define the ",
 StyleBox["Cartesian coordinate system",
  FontWeight->"Bold"],
 ", we use the following syntax:"
}], "Text",ExpressionUUID->"602b8116-bf78-4c47-89c0-bee7cddfc331"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewCoordinates", "[", 
  RowBox[{"\"\<Cartesian\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"bf0ee47f-8412-4480-9d9a-7613acf6b654"],

Cell[BoxData["\<\"Cartesian\"\>"], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"fa48021e-a225-4bb8-b763-aacd4e330f82"]
}, Open  ]],

Cell[TextData[{
 "The first argument is the new tensor object\[CloseCurlyQuote]s ",
 StyleBox["unique ID",
  FontWeight->"Bold"],
 ". This is the string that we will use to refer to this tensor from now on, \
and it will also be displayed whenever we print the tensor. The ID string is \
case-sensitive, can include any characters, and can be of any length, but it \
is recommended to keep it short and simple. Once a tensor object is created, \
you cannot create another tensor object with the same ID unless you rename or \
delete it first (see below). Note that the ID string is also the return value \
of the module; generally, all modules that operate on a tensor object will \
return its ID string as output. This allows us to compose different modules \
together, as we will see below."
}], "Text",ExpressionUUID->"8f3d6bc8-3221-4efa-8952-689cb5c9a4d7"],

Cell["\<\
The second argument is the list of coordinates. Note that the order of \
coordinates matters, as it will determine the order of components in the \
tensors defined on this manifold. The symbols used also matter, as tensor \
components will usually be functions of these symbols. We can similarly \
define the spherical coordinate system:\
\>", "Text",ExpressionUUID->"3d5d6e61-5903-465b-b78d-3b8122911ca6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewCoordinates", "[", 
  RowBox[{"\"\<Spherical\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "r", ",", "\[Theta]", ",", "\[Phi]"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"c9cea4a6-1ebb-4b7d-9ecd-32a9c3663376"],

Cell[BoxData["\<\"Spherical\"\>"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"84617901-531b-4dd5-aadf-36ff9246aed9"]
}, Open  ]],

Cell[TextData[{
 "It is crucial that the coordinate symbols, in this case ",
 StyleBox["t", "Input"],
 ", ",
 StyleBox["r", "Input"],
 ", ",
 StyleBox["\[Theta]", "Input"],
 ", ",
 StyleBox["\[Phi]", "Input"],
 ", remain as ",
 StyleBox["undefined",
  FontWeight->"Bold"],
 " symbols throughout the calculation, otherwise errors may occur. For \
example, if our metric contains functions of ",
 StyleBox["r", "Input"],
 ", and at some point in the notebook we set ",
 StyleBox["r = 1", "Input"],
 ", then Mathematica will replace every instance of ",
 StyleBox["r", "Input"],
 " with ",
 StyleBox["1", "Input"],
 ", which means those abstract functions will be replaced with their values \
evaluated at ",
 StyleBox["r = 1", "Input"],
 ". Furthermore, if we, for example, want to take the derivative with respect \
to ",
 StyleBox["r", "Input"],
 " (e.g. for the purpose of calculating various curvature tensors), this will \
not be possible, since one cannot take a derivative with respect to a number."
}], "Text",ExpressionUUID->"e824ed62-5bdd-40ef-9c81-015e6e82da4a"],

Cell[TextData[{
 "To prevent such errors, ",
 StyleBox["TNewCoordinates", "Input"],
 " automatically clears any previous definitions of the given symbols, and \
also protects them against future changes. This is done using the ",
 StyleBox["TSetReservedSymbols", "Input"],
 " module:"
}], "Text",ExpressionUUID->"378fe150-12a7-448f-a5ac-972b7686b88c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetReservedSymbols"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"21ad56c6-b245-475d-9f07-af84180e12ac"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetReservedSymbols[\\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, \
False]], \\\"] clears any definitions previously used for \\\", \
StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\" and protects \
it against future changes. \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\" can be either a symbol name or a string \
representing a symbol name. After completion, the module will return a list \
of the currently reserved symbols.\\\\nUseful for making sure coordinate \
variables, parameters, and abstract functions used in tensors remain abstract \
symbols and do not accidentally obtain values and break the code.\\\\nIf the \
reserved symbol is a function, this function will be displayed without \
arguments when using TList[] and TShow[], for improved readability. The \
reserved symbols will be exported when using TExportAll[] so they can later \
be imported using TImportAll[].\\\\nTSetReservedSymbols[{\\\", \
StyleBox[\\\"symbol1\\\", Bold, Rule[StripOnInput, False]], \\\", \\\", \
StyleBox[\\\"symbol2\\\", Bold, Rule[StripOnInput, False]], \\\", ...}] \
reserves all of the given symbols. Each of the symbols can be either a symbol \
name or a string representing a symbol name.\\\\nTSetReservedSymbols[] \
returns the currently reserved symbols.\\\"}]], \
TextCell[Row[List[\\\"TSetReservedSymbols[\\\", Style[\\\"symbol\\\", Bold], \
\\\"] clears any definitions previously used for \\\", Style[\\\"symbol\\\", \
Bold], \\\" and protects it against future changes. \\\", \
Style[\\\"symbol\\\", Bold], \\\" can be either a symbol name or a string \
representing a symbol name. After completion, the module will return a list \
of the currently reserved symbols.\\\\nUseful for making sure coordinate \
variables, parameters, and abstract functions used in tensors remain abstract \
symbols and do not accidentally obtain values and break the code.\\\\nIf the \
reserved symbol is a function, this function will be displayed without \
arguments when using TList[] and TShow[], for improved readability. The \
reserved symbols will be exported when using TExportAll[] so they can later \
be imported using TImportAll[].\\\\nTSetReservedSymbols[{\\\", \
Style[\\\"symbol1\\\", Bold], \\\", \\\", Style[\\\"symbol2\\\", Bold], \\\", \
...}] reserves all of the given symbols. Each of the symbols can be either a \
symbol name or a string representing a symbol name.\\\\nTSetReservedSymbols[] \
returns the currently reserved symbols.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetReservedSymbols", "[", "]"}], ":=", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetReservedSymbols", "[", "OGRe`Private`symbol_Symbol", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Context", "[", "OGRe`Private`symbol", "]"}], 
                    "=!=", "\"Global`\""}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TSetReservedSymbols", "::", "ErrorNotGlobal"}], 
                    "MessageName"], ",", 
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbol", "]"}], 
                    ",", 
                    RowBox[{"Context", "[", 
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbol", "]"}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Unprotect", "[", 
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbol", "]"}], 
                    "]"}], ";", 
                    RowBox[{"ClearAll", "[", 
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbol", "]"}], 
                    "]"}], ";", 
                    RowBox[{"Protect", "[", 
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbol", "]"}], 
                    "]"}], ";", 
                    
                    RowBox[{"Unprotect", "[", "OGRe`Private`TensorData", 
                    "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], ",", 
                    RowBox[{"ToString", "[", "OGRe`Private`symbol", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "]"}]}], ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "]"}], ";"}]}], "]"}], 
                    ";"}], ")"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetReservedSymbols", "[", "OGRe`Private`symbol_String", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Unprotect", "[", "OGRe`Private`symbol", "]"}], 
                    ";", 
                    RowBox[{"ClearAll", "[", "OGRe`Private`symbol", "]"}], 
                    ";", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"Protect", "@@", 
                    RowBox[{"ToExpression", "[", 
                    
                    RowBox[{"OGRe`Private`symbol", ",", "StandardForm", ",", 
                    "Hold"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TSetReservedSymbols", "::", "ErrorNotSymbol"}], 
                    "MessageName"], ",", "OGRe`Private`symbol"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}], ",", 
                    StyleBox[
                    RowBox[{"Protect", "::", "pssl"}], "MessageName"]}], 
                    "]"}], ",", 
                    StyleBox[
                    RowBox[{"Protect", "::", "pssl"}], "MessageName"]}], 
                    "]"}], ";", 
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`TensorData", "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], ",", 
                    "OGRe`Private`symbol"}], "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "]"}]}], ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "]"}], ";"}], 
                    ")"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetReservedSymbols", "[", "OGRe`Private`symbols_List", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{"TSetReservedSymbols", ",", 
                    
                    RowBox[{"Unevaluated", "[", "OGRe`Private`symbols", 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"ReservedSymbols\"", "]"}], "]"}], ";"}], 
                    ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"HoldAll", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetReservedSymbols\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetReservedSymbols[\\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, \
False]], \\\"] clears any definitions previously used for \\\", \
StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\" and protects \
it against future changes. \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\" can be either a symbol name or a string \
representing a symbol name. After completion, the module will return a list \
of the currently reserved symbols.\\\\nUseful for making sure coordinate \
variables, parameters, and abstract functions used in tensors remain abstract \
symbols and do not accidentally obtain values and break the code.\\\\nIf the \
reserved symbol is a function, this function will be displayed without \
arguments when using TList[] and TShow[], for improved readability. The \
reserved symbols will be exported when using TExportAll[] so they can later \
be imported using TImportAll[].\\\\nTSetReservedSymbols[{\\\", \
StyleBox[\\\"symbol1\\\", Bold, Rule[StripOnInput, False]], \\\", \\\", \
StyleBox[\\\"symbol2\\\", Bold, Rule[StripOnInput, False]], \\\", ...}] \
reserves all of the given symbols. Each of the symbols can be either a symbol \
name or a string representing a symbol name.\\\\nTSetReservedSymbols[] \
returns the currently reserved symbols.\\\"}]], \
TextCell[Row[List[\\\"TSetReservedSymbols[\\\", Style[\\\"symbol\\\", Bold], \
\\\"] clears any definitions previously used for \\\", Style[\\\"symbol\\\", \
Bold], \\\" and protects it against future changes. \\\", \
Style[\\\"symbol\\\", Bold], \\\" can be either a symbol name or a string \
representing a symbol name. After completion, the module will return a list \
of the currently reserved symbols.\\\\nUseful for making sure coordinate \
variables, parameters, and abstract functions used in tensors remain abstract \
symbols and do not accidentally obtain values and break the code.\\\\nIf the \
reserved symbol is a function, this function will be displayed without \
arguments when using TList[] and TShow[], for improved readability. The \
reserved symbols will be exported when using TExportAll[] so they can later \
be imported using TImportAll[].\\\\nTSetReservedSymbols[{\\\", \
Style[\\\"symbol1\\\", Bold], \\\", \\\", Style[\\\"symbol2\\\", Bold], \\\", \
...}] reserves all of the given symbols. Each of the symbols can be either a \
symbol name or a string representing a symbol name.\\\\nTSetReservedSymbols[] \
returns the currently reserved symbols.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetReservedSymbols[\", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \"] clears any \
definitions previously used for \", StyleBox[\"symbol\", Bold, \
Rule[StripOnInput, False]], \" and protects it against future changes. \", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \" can be either a \
symbol name or a string representing a symbol name. After completion, the \
module will return a list of the currently reserved symbols.\\nUseful for \
making sure coordinate variables, parameters, and abstract functions used in \
tensors remain abstract symbols and do not accidentally obtain values and \
break the code.\\nIf the reserved symbol is a function, this function will be \
displayed without arguments when using TList[] and TShow[], for improved \
readability. The reserved symbols will be exported when using TExportAll[] so \
they can later be imported using TImportAll[].\\nTSetReservedSymbols[{\", \
StyleBox[\"symbol1\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"symbol2\", Bold, Rule[StripOnInput, False]], \", ...}] reserves \
all of the given symbols. Each of the symbols can be either a symbol name or \
a string representing a symbol name.\\nTSetReservedSymbols[] returns the \
currently reserved symbols.\"}]], TextCell[Row[List[\"TSetReservedSymbols[\", \
Style[\"symbol\", Bold], \"] clears any definitions previously used for \", \
Style[\"symbol\", Bold], \" and protects it against future changes. \", \
Style[\"symbol\", Bold], \" can be either a symbol name or a string \
representing a symbol name. After completion, the module will return a list \
of the currently reserved symbols.\\nUseful for making sure coordinate \
variables, parameters, and abstract functions used in tensors remain abstract \
symbols and do not accidentally obtain values and break the code.\\nIf the \
reserved symbol is a function, this function will be displayed without \
arguments when using TList[] and TShow[], for improved readability. The \
reserved symbols will be exported when using TExportAll[] so they can later \
be imported using TImportAll[].\\nTSetReservedSymbols[{\", Style[\"symbol1\", \
Bold], \", \", Style[\"symbol2\", Bold], \", ...}] reserves all of the given \
symbols. Each of the symbols can be either a symbol name or a string \
representing a symbol name.\\nTSetReservedSymbols[] returns the currently \
reserved symbols.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetReservedSymbols, {
      OGRe`TSetReservedSymbols[] :> 
       OGRe`Private`TensorData[Options]["ReservedSymbols"], 
       OGRe`TSetReservedSymbols[
         Pattern[OGRe`Private`symbol, 
          Blank[Symbol]]] :> (If[Context[OGRe`Private`symbol] =!= "Global`", 
          Message[
           MessageName[OGRe`TSetReservedSymbols, "ErrorNotGlobal"], 
           Unevaluated[OGRe`Private`symbol], 
           Context[
            Unevaluated[OGRe`Private`symbol]]], Unprotect[
            Unevaluated[OGRe`Private`symbol]]; ClearAll[
            Unevaluated[OGRe`Private`symbol]]; Protect[
            Unevaluated[OGRe`Private`symbol]]; 
          Unprotect[OGRe`Private`TensorData]; AppendTo[
            OGRe`Private`TensorData[Options]["ReservedSymbols"], 
            ToString[OGRe`Private`symbol]]; 
          OGRe`Private`TensorData[Options]["ReservedSymbols"] = 
           DeleteDuplicates[
             OGRe`Private`TensorData[Options]["ReservedSymbols"]]; 
          Protect[OGRe`Private`TensorData]; Return[
            OGRe`Private`TensorData[Options]["ReservedSymbols"]]; Null]; 
        Null), OGRe`TSetReservedSymbols[
         Pattern[OGRe`Private`symbol, 
          Blank[String]]] :> (Unprotect[OGRe`Private`symbol]; 
        ClearAll[OGRe`Private`symbol]; Quiet[
          Check[
           Apply[Protect, 
            ToExpression[OGRe`Private`symbol, StandardForm, Hold]], Message[
             MessageName[OGRe`TSetReservedSymbols, "ErrorNotSymbol"], 
             OGRe`Private`symbol]; Abort[], 
           MessageName[Protect, "pssl"]], 
          MessageName[Protect, "pssl"]]; Unprotect[OGRe`Private`TensorData]; 
        AppendTo[
          OGRe`Private`TensorData[Options]["ReservedSymbols"], 
          OGRe`Private`symbol]; 
        OGRe`Private`TensorData[Options]["ReservedSymbols"] = DeleteDuplicates[
           OGRe`Private`TensorData[Options]["ReservedSymbols"]]; 
        Protect[OGRe`Private`TensorData]; Return[
          OGRe`Private`TensorData[Options]["ReservedSymbols"]]; Null), 
       OGRe`TSetReservedSymbols[
         Pattern[OGRe`Private`symbols, 
          Blank[List]]] :> (Scan[OGRe`TSetReservedSymbols, 
          Unevaluated[OGRe`Private`symbols]]; Return[
          OGRe`Private`TensorData[Options]["ReservedSymbols"]]; Null)}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {HoldAll, Protected}, "FullName" -> 
    "OGRe`TSetReservedSymbols"|>, False]]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"52aa2ea6-74ca-4097-b4e9-56d89b7841ed"]
}, Open  ]],

Cell[TextData[{
 "Indeed, if we now try to give ",
 StyleBox["r", "Input"],
 " the value ",
 StyleBox["1", "Input"],
 ", we will get an error:"
}], "Text",ExpressionUUID->"ddfca8ae-4c2f-4b79-9e82-a6e5559796c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetReservedSymbols", "[", 
  RowBox[{"{", "r", "}"}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"ac888da6-43da-4cb0-a06d-c6cd5ad20580"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"t\"\>", ",", "\<\"x\"\>", ",", "\<\"y\"\>", ",", "\<\"z\"\>", 
   ",", "\<\"r\"\>"}], "}"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"203bd45c-3629-499a-839c-882130e480d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"r", "=", "1"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"c7f9a1b3-9f8b-401c-8d45-4c5962b2aa94"],

Cell[BoxData[
 TemplateBox[{
  "Set", "wrsym", "\"Symbol \\!\\(\\*RowBox[{\\\"r\\\"}]\\) is Protected.\"", 
   2, 17, 7, 27899425866709974914, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"70375ea7-901f-470f-a97b-e14c1a3923db"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"9f72c910-9007-4803-bb87-855b85cde722"]
}, Open  ]],

Cell[TextData[{
 "You can also use ",
 StyleBox["TSetReservedSymbols", "Input"],
 " manually for any constants or parameters used in the tensor, as we will \
demonstrate in the next section. Note that it is always possible to replace \
reserved symbols with numbers or other expressions using ",
 StyleBox["/.", "Input"],
 " or ",
 StyleBox["ReplaceAll", "Input"],
 ", so giving a value to a reserved symbol directly is not something you will \
ever need to do."
}], "Text",ExpressionUUID->"7ab90250-ad64-446f-ba9a-e102e885ab15"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining metrics", \
"Subsection",ExpressionUUID->"6b5787bd-6d61-4455-bc15-6bf857c07c72"],

Cell[TextData[{
 "To finish defining a manifold, we need to define its metric tensor. For \
this, we use the module ",
 StyleBox["TNewMetric", "Input"],
 ":"
}], "Text",ExpressionUUID->"ffc1936d-e8f6-43f8-988d-8cfde61e4181"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TNewMetric"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"ad588fc3-2e24-44c3-970e-0a4e6425af99"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewMetric[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\
\", \\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"} \
creates a new tensor object representing a metric.\\\\n\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" is a string \
that will be used to identify the new object, and must be unique.\\\\n\\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is the \
unique ID of a tensor object representing a coordinate system, created using \
TNewCoordinates[].\\\\n\\\", StyleBox[\\\"components\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a square, symmetric, and invertible \
matrix representing the metric with two lower indices in that coordinate \
system.\\\\n\\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be used to represent the metric in formulas. If not given, \
\\\\\\\"g\\\\\\\" will be used.\\\"}]], \
TextCell[Row[List[\\\"TNewMetric[\\\", Style[\\\"metricID\\\", Bold], \\\", \
\\\", Style[\\\"coordinatesID\\\", Bold], \\\", \\\", \
Style[\\\"components\\\", Bold], \\\", \\\", Style[\\\"symbol\\\", Bold], \
\\\"} creates a new tensor object representing a metric.\\\\n\\\", \
Style[\\\"metricID\\\", Bold], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" is the unique ID of a tensor object representing a coordinate \
system, created using TNewCoordinates[].\\\\n\\\", Style[\\\"components\\\", \
Bold], \\\" is a square, symmetric, and invertible matrix representing the \
metric with two lower indices in that coordinate system.\\\\n\\\", \
Style[\\\"symbol\\\", Bold], \\\" will be used to represent the metric in \
formulas. If not given, \\\\\\\"g\\\\\\\" will be used.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TNewMetric", "[", 
                    
                    RowBox[{
                    "OGRe`Private`metricID_String", ",", 
                    "OGRe`Private`coordinatesID_String", ",", 
                    "OGRe`Private`components_List", ",", 
                    RowBox[{"OGRe`Private`symbol_String", ":", "\"g\""}]}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"OGRe`Private`dim", "=", 
                    RowBox[{"Length", "[", "OGRe`Private`components", "]"}]}],
                     ",", "OGRe`Private`inverse", ",", 
                    RowBox[{"OGRe`Private`overwriting", "=", "False"}], ",", 
                    "OGRe`Private`roles", ",", "OGRe`Private`simplified"}], 
                    "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"KeyExistsQ", "[", 
                    
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    "OGRe`Private`metricID"}], "]"}], ",", 
                    RowBox[{"OGRe`Private`overwriting", "=", "True"}]}], 
                    "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    RowBox[{"OGRe`Private`simplified", "=", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`components", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    
                    RowBox[{"SquareMatrixQ", "[", "OGRe`Private`simplified", 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewMetric", "::", "ErrorNotSquare"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`dim", "\[NotEqual]", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`coordinatesID", "]"}], "[", 
                    "\"Components\"", "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "]"}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewMetric", "::", "ErrorIncorrectDim"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    
                    RowBox[{"SymmetricMatrixQ", "[", 
                    "OGRe`Private`simplified", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewMetric", "::", "ErrorNotSymmetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`inverse", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"Inverse", "[", "OGRe`Private`simplified", "]"}], 
                    ",", "\"Error\""}], "]"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`inverse", "===", "\"Error\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewMetric", "::", "ErrorNotInvertible"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`inverse", "=", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`inverse", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`metricID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "\[Rule]", 
                    "OGRe`Private`simplified"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"+", "1"}], ",", 
                    RowBox[{"+", "1"}]}], "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "\[Rule]", 
                    "OGRe`Private`inverse"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"+", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "\[Rule]", 
                    
                    RowBox[{"IdentityMatrix", "[", "OGRe`Private`dim", 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"+", "1"}]}], "}"}], ",", 
                    "OGRe`Private`coordinatesID"}], "}"}], "\[Rule]", 
                    
                    RowBox[{"IdentityMatrix", "[", "OGRe`Private`dim", 
                    "]"}]}]}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`coordinatesID"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`metricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Metric\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "OGRe`Private`symbol"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{"OGRe`Private`overwriting", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewMetric", "::", "WarningOverwrite"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"OGRe`Private`roles", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Christoffel\"", ",", "\"Einstein\"", ",", 
                    "\"GeodesicFromChristoffel\"", ",", 
                    "\"GeodesicFromLagrangian\"", ",", "\"Lagrangian\"", ",", 
                    "\"Ricci Scalar\"", ",", "\"Ricci Tensor\"", ",", 
                    "\"Riemann\""}], "}"}]}], ";", 
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Metric\"", "]"}], "===", "OGRe`Private`metricID"}], 
                    "&&", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"OGRe`Private`roles", ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Role\"", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`RemoveTensorID", "[", "#1", "]"}], 
                    ";"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`metricID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TNewMetric\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewMetric[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\
\", \\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"} \
creates a new tensor object representing a metric.\\\\n\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" is a string \
that will be used to identify the new object, and must be unique.\\\\n\\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is the \
unique ID of a tensor object representing a coordinate system, created using \
TNewCoordinates[].\\\\n\\\", StyleBox[\\\"components\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a square, symmetric, and invertible \
matrix representing the metric with two lower indices in that coordinate \
system.\\\\n\\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be used to represent the metric in formulas. If not given, \
\\\\\\\"g\\\\\\\" will be used.\\\"}]], \
TextCell[Row[List[\\\"TNewMetric[\\\", Style[\\\"metricID\\\", Bold], \\\", \
\\\", Style[\\\"coordinatesID\\\", Bold], \\\", \\\", \
Style[\\\"components\\\", Bold], \\\", \\\", Style[\\\"symbol\\\", Bold], \
\\\"} creates a new tensor object representing a metric.\\\\n\\\", \
Style[\\\"metricID\\\", Bold], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" is the unique ID of a tensor object representing a coordinate \
system, created using TNewCoordinates[].\\\\n\\\", Style[\\\"components\\\", \
Bold], \\\" is a square, symmetric, and invertible matrix representing the \
metric with two lower indices in that coordinate system.\\\\n\\\", \
Style[\\\"symbol\\\", Bold], \\\" will be used to represent the metric in \
formulas. If not given, \\\\\\\"g\\\\\\\" will be used.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TNewMetric[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"components\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \"} creates a new \
tensor object representing a metric.\\n\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" is a string that will be used to identify the \
new object, and must be unique.\\n\", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \" is the unique ID of a tensor object \
representing a coordinate system, created using TNewCoordinates[].\\n\", \
StyleBox[\"components\", Bold, Rule[StripOnInput, False]], \" is a square, \
symmetric, and invertible matrix representing the metric with two lower \
indices in that coordinate system.\\n\", StyleBox[\"symbol\", Bold, \
Rule[StripOnInput, False]], \" will be used to represent the metric in \
formulas. If not given, \\\"g\\\" will be used.\"}]], \
TextCell[Row[List[\"TNewMetric[\", Style[\"metricID\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \", \", Style[\"components\", Bold], \", \", \
Style[\"symbol\", Bold], \"} creates a new tensor object representing a \
metric.\\n\", Style[\"metricID\", Bold], \" is a string that will be used to \
identify the new object, and must be unique.\\n\", Style[\"coordinatesID\", \
Bold], \" is the unique ID of a tensor object representing a coordinate \
system, created using TNewCoordinates[].\\n\", Style[\"components\", Bold], \
\" is a square, symmetric, and invertible matrix representing the metric with \
two lower indices in that coordinate system.\\n\", Style[\"symbol\", Bold], \
\" will be used to represent the metric in formulas. If not given, \\\"g\\\" \
will be used.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TNewMetric, {OGRe`TNewMetric[
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Pattern[OGRe`Private`coordinatesID, 
          Blank[String]], 
         Pattern[OGRe`Private`components, 
          Blank[List]], 
         Optional[
          Pattern[OGRe`Private`symbol, 
           Blank[String]], "g"]] :> 
       Module[{OGRe`Private`dim = Length[OGRe`Private`components], 
          OGRe`Private`inverse, OGRe`Private`overwriting = False, 
          OGRe`Private`roles, OGRe`Private`simplified}, 
         OGRe`Private`CheckIfOverwriting[OGRe`Private`metricID]; If[
           KeyExistsQ[OGRe`Private`TensorData, OGRe`Private`metricID], 
           OGRe`Private`overwriting = True]; 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
         OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
         OGRe`Private`simplified = 
          OGRe`Private`TensorSimplify[OGRe`Private`components]; If[
           Not[
            SquareMatrixQ[OGRe`Private`simplified]], Message[
             MessageName[OGRe`TNewMetric, "ErrorNotSquare"]]; Abort[]; Null]; 
         If[OGRe`Private`dim != Length[
             OGRe`Private`TensorData[OGRe`Private`coordinatesID][
             "Components"][{{1}, OGRe`Private`coordinatesID}]], Message[
             MessageName[OGRe`TNewMetric, "ErrorIncorrectDim"]]; Abort[]; 
           Null]; If[
           Not[
            SymmetricMatrixQ[OGRe`Private`simplified]], Message[
             MessageName[OGRe`TNewMetric, "ErrorNotSymmetric"]]; Abort[]; 
           Null]; OGRe`Private`inverse = Quiet[
            Check[
             Inverse[OGRe`Private`simplified], "Error"]]; 
         If[OGRe`Private`inverse === "Error", Message[
             MessageName[OGRe`TNewMetric, "ErrorNotInvertible"]]; Abort[]; 
           Null]; OGRe`Private`inverse = 
          OGRe`Private`TensorSimplify[OGRe`Private`inverse]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`metricID, <|
           "Components" -> <|{{-1, -1}, OGRe`Private`coordinatesID} -> 
              OGRe`Private`simplified, {{
                 Plus[1], 
                 Plus[1]}, OGRe`Private`coordinatesID} -> 
              OGRe`Private`inverse, {{
                 Plus[1], -1}, OGRe`Private`coordinatesID} -> 
              IdentityMatrix[OGRe`Private`dim], {{-1, 
                 Plus[1]}, OGRe`Private`coordinatesID} -> 
              IdentityMatrix[OGRe`Private`dim]|>, "DefaultCoords" -> 
            OGRe`Private`coordinatesID, "DefaultIndices" -> {-1, -1}, 
            "Metric" -> OGRe`Private`metricID, "Role" -> "Metric", "Symbol" -> 
            OGRe`Private`symbol|>]; If[OGRe`Private`overwriting, Message[
             MessageName[OGRe`TNewMetric, "WarningOverwrite"]]; 
           OGRe`Private`roles = {
             "Christoffel", "Einstein", "GeodesicFromChristoffel", 
              "GeodesicFromLagrangian", "Lagrangian", "Ricci Scalar", 
              "Ricci Tensor", "Riemann"}; Scan[If[
              And[
              OGRe`Private`TensorData[#]["Metric"] === OGRe`Private`metricID, 
               MemberQ[OGRe`Private`roles, 
                OGRe`Private`TensorData[#]["Role"]]], 
              OGRe`Private`RemoveTensorID[#]; Null]& , 
             Keys[OGRe`Private`TensorData]]; Null]; 
         Return[OGRe`Private`metricID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TNewMetric"|>, False]]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"ec343342-583e-481c-9801-f106e848a038"]
}, Open  ]],

Cell[TextData[{
 "Again, we must input a unique ID for the new tensor object corresponding to \
the metric. We also input the unique ID of a coordinate system created using ",
 StyleBox["TNewCoordinates", "Input"],
 ". This coordinate system is the one in which the components of the metric \
are initially given, but they will be automatically transformed to other \
coordinate systems later as needed. Note that the components are assumed to \
be the representation of the metric with two lower indices, since that is how \
metrics are usually defined; one upper and one lower index is just the \
identity matrix, and two upper indices is the inverse metric. Optionally, we \
can also specify a symbol to be used for representing the metric."
}], "Text",ExpressionUUID->"583f4e14-71ae-4217-b5c4-3f1b53aa2461"],

Cell[TextData[{
 "Let us use this module to create a tensor object for the ",
 StyleBox["Minkowski metric",
  FontWeight->"Bold"],
 ", specifying the components in Cartesian coordinates:"
}], "Text",ExpressionUUID->"28291d2a-8f0a-4e4c-986d-eec55b6f0874"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewMetric", "[", 
  RowBox[{"\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"", ",", 
   RowBox[{"DiagonalMatrix", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "1"}], "}"}], "]"}], ",", 
   "\"\<\[Eta]\>\""}], "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"f65432d6-6d14-4b78-8ec0-23c513bf794b"],

Cell[BoxData["\<\"Minkowski\"\>"], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"cb833b29-089c-4bba-807a-1eec813b1d29"]
}, Open  ]],

Cell[TextData[{
 "As with ",
 StyleBox["TNewCoordinates", "Input"],
 ", we received the ID string for the new tensor object as output."
}], "Text",ExpressionUUID->"1cbbb22c-2985-4355-bf01-2037444712ba"],

Cell[TextData[{
 "Similarly, let us define the ",
 StyleBox["Schwarzschild metric",
  FontWeight->"Bold"],
 ", this time specifying the components in spherical coordinates. However, \
before we can safely do so, we should take one additional step. When we \
defined the coordinates using ",
 StyleBox["TNewCoordinates", "Input"],
 ", the symbols used were automatically reserved, that is, cleared and \
protected from future changes, using ",
 StyleBox["TSetReservedSymbols", "Input"],
 ". However, ",
 StyleBox["TNewMetric", "Input"],
 " does not automatically reserve any symbols it finds in the metric, since \
you might not want to reserve some of them. Since the Schwarzschild metric \
has a free parameter ",
 StyleBox["M", "Input"],
 ", the mass of the black hole, we must reserve this symbol manually:"
}], "Text",ExpressionUUID->"c5c1e182-1e87-4b69-be27-f52126702ff7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetReservedSymbols", "[", "M", "]"}]], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"a5227f0b-7293-4e60-9b6c-544bfb5d28b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"t\"\>", ",", "\<\"x\"\>", ",", "\<\"y\"\>", ",", "\<\"z\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"\[Theta]\"\>", ",", "\<\"\[Phi]\"\>", 
   ",", "\<\"M\"\>"}], "}"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"1633ab2b-3351-428a-a4c5-14e4f6905238"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["TSetReservedSymbols", "Input"],
 " returned the full list of symbols we reserved so far: the coordinate \
symbols and the black hole\[CloseCurlyQuote]s mass."
}], "Text",ExpressionUUID->"6383ee80-463a-4977-b9a0-66148c152ff7"],

Cell["Now we can define the Schwarzschild metric:", \
"Text",ExpressionUUID->"17b1438e-a585-46b2-8826-b1b295f82062"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewMetric", "[", 
  RowBox[{"\"\<Schwarzschild\>\"", ",", "\"\<Spherical\>\"", ",", 
   RowBox[{"DiagonalMatrix", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox[
          RowBox[{"2", " ", "M"}], "r"]}], ")"}]}], ",", 
      FractionBox["1", 
       RowBox[{"1", "-", 
        FractionBox[
         RowBox[{"2", " ", "M"}], "r"]}]], ",", 
      SuperscriptBox["r", "2"], ",", 
      RowBox[{
       SuperscriptBox["r", "2"], " ", 
       SuperscriptBox[
        RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"268833cf-013e-4294-85c7-c10bb6118a24"],

Cell[BoxData["\<\"Schwarzschild\"\>"], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"7846dcd1-ab1e-4b41-9a6a-cb1210db090b"]
}, Open  ]],

Cell[TextData[{
 "Note that since we do not specify a symbol, the symbol ",
 StyleBox["\[OpenCurlyDoubleQuote]g\[CloseCurlyDoubleQuote]", "Input"],
 " will be used by default, as demonstrated below."
}], "Text",ExpressionUUID->"75620eb3-93aa-41d5-963b-192b6c317e46"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Displaying tensors", \
"Subsection",ExpressionUUID->"46398ec9-6f9c-4fd9-831f-bcd4ca7771bc"],

Cell[TextData[{
 "OGRe contains two modules for displaying the contents of tensors. The first \
one is ",
 StyleBox["TShow", "Input"],
 ", which shows the ID, symbol, indices, coordinates, and components in those \
indices and coordinates, in vector or matrix form when applicable:"
}], "Text",ExpressionUUID->"b1daa7bb-9fb6-440c-b247-cf02b3ac0039"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TShow"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"61fbad04-976f-4b22-a618-5b763e420bef"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TShow[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] shows the \
components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] shows the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TShow[\\\", Style[\\\"ID\\\", Bold], \
\\\"] shows the components of the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTShow[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] shows the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"TShow", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    RowBox[{"OGRe`Private`indices_List", ":", 
                    RowBox[{"{", "\"_UseDefault_\"", "}"}]}], ",", 
                    
                    RowBox[{"OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`function_", ":", "Identity"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", "OGRe`Private`function", "]"}]}], 
                    "&&", 
                    RowBox[{"!", 
                    
                    RowBox[{"StringQ", "[", "OGRe`Private`function", 
                    "]"}]}]}]}], ":=", 
                    RowBox[{"OGRe`Private`ShowList", "[", 
                    
                    RowBox[{
                    "OGRe`Private`ID", ",", "OGRe`Private`indices", ",", 
                    "OGRe`Private`coordinatesID", ",", "\"Show\"", ",", 
                    "OGRe`Private`function"}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TShow\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TShow[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] shows the \
components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] shows the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] shows the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TShow[\\\", Style[\\\"ID\\\", Bold], \
\\\"] shows the components of the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTShow[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] shows the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] shows the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTShow[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTShow[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TShow[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] shows the components of the tensor \
object \", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \" in its \
default index configuration and coordinate system.\\nTShow[\", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"indices\
\", Bold, Rule[StripOnInput, False]], \"] shows the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
which should be a list of the form {\\[PlusMinus]1, \\[PlusMinus]1, ...}, \
where +1 corresponds to an upper index and -1 corresponds to a lower \
index.\\nTShow[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] shows the \
components in the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTShow[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \"] shows the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
and the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTShow[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \"] maps \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\nTShow[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, \
False]], \", \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
\", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"function\", Bold, Rule[StripOnInput, False]], \"] does all of the \
above; either \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
or \", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" can \
be omitted.\"}]], TextCell[Row[List[\"TShow[\", Style[\"ID\", Bold], \"] \
shows the components of the tensor object \", Style[\"ID\", Bold], \" in its \
default index configuration and coordinate system.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"indices\", Bold], \"] shows the components in the \
index configuration \", Style[\"indices\", Bold], \", which should be a list \
of the form {\\[PlusMinus]1, \\[PlusMinus]1, ...}, where +1 corresponds to an \
upper index and -1 corresponds to a lower index.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"coordinatesID\", Bold], \"] shows the components in \
the coordinate system \", Style[\"coordinatesID\", Bold], \".\\nTShow[\", \
Style[\"ID\", Bold], \", \", Style[\"indices\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \"] shows the components in the index \
configuration \", Style[\"indices\", Bold], \" and the coordinate system \", \
Style[\"coordinatesID\", Bold], \".\\nTShow[\", Style[\"ID\", Bold], \", \", \
Style[\"function\", Bold], \"] maps \", Style[\"function\", Bold], \" to each \
of the tensor's elements, and then automatically simplifies them, before they \
are displayed. Typically this would be ReplaceAll[rules] to apply the rules \
to the elements, but any function can be used.\\nTShow[\", Style[\"ID\", \
Bold], \", \", Style[\"indices\", Bold], \", \", Style[\"coordinatesID\", \
Bold], \", \", Style[\"function\", Bold], \"] does all of the above; either \
\", Style[\"indices\", Bold], \" or \", Style[\"coordinatesID\", Bold], \" \
can be omitted.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TShow, {Condition[
         OGRe`TShow[
          Pattern[OGRe`Private`ID, 
           Blank[String]], 
          Optional[
           Pattern[OGRe`Private`indices, 
            Blank[List]], {"_UseDefault_"}], 
          Optional[
           Pattern[OGRe`Private`coordinatesID, 
            Blank[String]], "_UseDefault_"], 
          Optional[
           Pattern[OGRe`Private`function, 
            Blank[]], Identity]], 
         And[
          Not[
           ListQ[OGRe`Private`function]], 
          Not[
           StringQ[OGRe`Private`function]]]] :> 
       OGRe`Private`ShowList[
        OGRe`Private`ID, OGRe`Private`indices, OGRe`Private`coordinatesID, 
         "Show", OGRe`Private`function]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TShow"|>, False]]], "Output",
 CellLabel->"Out[15]=",ExpressionUUID->"74e2a602-a8d7-4b0b-89f1-0226437586d6"]
}, Open  ]],

Cell[TextData[{
 "Coordinates are also tensor objects, so we can use ",
 StyleBox["TShow", "Input"],
 " to show the two coordinate tensors we defined above:"
}], "Text",ExpressionUUID->"0b0a1d23-d901-4d90-8514-6374205f6461"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Cartesian\>\"", "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"af0f2a81-8364-4e6f-bb99-b2e300060121"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Cartesian\"", "\":   \"", 
    TemplateBox[{"\"x\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{"t"}, {"x"}, {"y"}, {"z"}}, RowSpacings -> 1, 
         ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"74da2f30-fc42-4eba-b19d-b241d55af03c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Spherical\>\"", "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"5ce4f347-4aeb-48c4-818f-f321d0387b52"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Spherical\"", "\":   \"", 
    TemplateBox[{"\"x\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{"t"}, {"r"}, {"\[Theta]"}, {"\[Phi]"}}, RowSpacings -> 1, 
         ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"ec22a64e-471d-4a78-91d4-846fec60f706"]
}, Open  ]],

Cell[TextData[{
 "Note that coordinate tensors always have the symbol ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "b1fa788c-3fb5-47b3-a016-6ec54bd98b5c"],
 "."
}], "Text",ExpressionUUID->"56d47fce-23d7-4a12-a2a7-48c549b847fc"],

Cell["\<\
We can also show the two metrics we created using these coordinates:\
\>", "Text",ExpressionUUID->"efdbde36-7ec1-439d-bf8c-cb93b7d75eaf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"a10e2cb3-6f4c-4ef4-becd-501c152a3dbe"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Minkowski\"", "\":   \"", 
    TemplateBox[{"\"\[Eta]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"c31941e2-1bd8-4d8b-a2c0-4b1d190b4216"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Schwarzschild\>\"", "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"59622394-5a77-49c7-b5db-88d0996a99d8"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Schwarzschild\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", 
            FractionBox[
             RowBox[{"2", " ", "M"}], "r"]}], "0", "0", "0"}, {"0", 
          FractionBox["1", 
           RowBox[{"1", "-", 
             FractionBox[
              RowBox[{"2", " ", "M"}], "r"]}]], "0", "0"}, {"0", "0", 
          SuperscriptBox["r", "2"], "0"}, {"0", "0", "0", 
          RowBox[{
            SuperscriptBox["r", "2"], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}}, RowSpacings -> 
        1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1b5604cc-1699-488e-9fa8-93475fb396d4"]
}, Open  ]],

Cell[TextData[{
 "The other module available in OGRe for displaying the contents of tensors \
is ",
 StyleBox["TList", "Input"],
 ", which lists all of the ",
 StyleBox["unique (up to sign), non-zero",
  FontWeight->"Bold"],
 " components of the tensor. It is usually the best option for higher-rank \
tensors, which cannot be displayed in vector or matrix form, such as the \
Christoffel symbols or Riemann tensor (see below). Its syntax is:"
}], "Text",ExpressionUUID->"b2bfe325-868b-43ab-81af-7f985078dd1d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TList"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"0f331fe7-3e3c-4b20-a5ed-d88ab82197ac"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TList[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] lists the \
unique, non-zero components of the tensor object \\\", StyleBox[\\\"ID\\\", \
Bold, Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] lists the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] lists the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] lists the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TList[\\\", Style[\\\"ID\\\", Bold], \
\\\"] lists the unique, non-zero components of the tensor object \\\", Style[\
\\\"ID\\\", Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTList[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] lists the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTList[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] lists the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTList[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] lists the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTList[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTList[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"TList", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    RowBox[{"OGRe`Private`indices_List", ":", 
                    RowBox[{"{", "\"_UseDefault_\"", "}"}]}], ",", 
                    
                    RowBox[{"OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`function_", ":", "Identity"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", "OGRe`Private`function", "]"}]}], 
                    "&&", 
                    RowBox[{"!", 
                    
                    RowBox[{"StringQ", "[", "OGRe`Private`function", 
                    "]"}]}]}]}], ":=", 
                    RowBox[{"OGRe`Private`ShowList", "[", 
                    
                    RowBox[{
                    "OGRe`Private`ID", ",", "OGRe`Private`indices", ",", 
                    "OGRe`Private`coordinatesID", ",", "\"List\"", ",", 
                    "OGRe`Private`function"}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TList[\
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] lists the \
unique, non-zero components of the tensor object \\\", StyleBox[\\\"ID\\\", \
Bold, Rule[StripOnInput, False]], \\\" in its default index configuration and \
coordinate system.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\"] lists the components in the index \
configuration \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", which should be a list of the form {\\\\[PlusMinus]1, \
\\\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] lists the components in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\".\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] lists the components in the index configuration \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTList[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] does all of the above; either \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
omitted.\\\"}]], TextCell[Row[List[\\\"TList[\\\", Style[\\\"ID\\\", Bold], \
\\\"] lists the unique, non-zero components of the tensor object \\\", Style[\
\\\"ID\\\", Bold], \\\" in its default index configuration and coordinate \
system.\\\\nTList[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\"] lists the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\", which should be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\\nTList[\
\\\", Style[\\\"ID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] lists the components in the coordinate system \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTList[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] lists the components in the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\".\\\\nTList[\\\", Style[\
\\\"ID\\\", Bold], \\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \
\\\", Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, \
and then automatically simplifies them, before they are displayed. Typically \
this would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\\nTList[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] does all of the above; \
either \\\", Style[\\\"indices\\\", Bold], \\\" or \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" can be omitted.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TList[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] lists the unique, non-zero components \
of the tensor object \", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \
\" in its default index configuration and coordinate system.\\nTList[\", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"indices\
\", Bold, Rule[StripOnInput, False]], \"] lists the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
which should be a list of the form {\\[PlusMinus]1, \\[PlusMinus]1, ...}, \
where +1 corresponds to an upper index and -1 corresponds to a lower \
index.\\nTList[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] lists the \
components in the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTList[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \"] lists the components in the index \
configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
and the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\\nTList[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \"] maps \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\nTList[\", StyleBox[\"ID\", Bold, Rule[StripOnInput, \
False]], \", \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \
\", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"function\", Bold, Rule[StripOnInput, False]], \"] does all of the \
above; either \", StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" \
or \", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" can \
be omitted.\"}]], TextCell[Row[List[\"TList[\", Style[\"ID\", Bold], \"] \
lists the unique, non-zero components of the tensor object \", Style[\"ID\", \
Bold], \" in its default index configuration and coordinate \
system.\\nTList[\", Style[\"ID\", Bold], \", \", Style[\"indices\", Bold], \
\"] lists the components in the index configuration \", Style[\"indices\", \
Bold], \", which should be a list of the form {\\[PlusMinus]1, \
\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\nTList[\", Style[\"ID\", Bold], \", \", Style[\
\"coordinatesID\", Bold], \"] lists the components in the coordinate system \
\", Style[\"coordinatesID\", Bold], \".\\nTList[\", Style[\"ID\", Bold], \", \
\", Style[\"indices\", Bold], \", \", Style[\"coordinatesID\", Bold], \"] \
lists the components in the index configuration \", Style[\"indices\", Bold], \
\" and the coordinate system \", Style[\"coordinatesID\", Bold], \".\\nTList[\
\", Style[\"ID\", Bold], \", \", Style[\"function\", Bold], \"] maps \", \
Style[\"function\", Bold], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are displayed. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\nTList[\", Style[\"ID\", Bold], \", \", \
Style[\"indices\", Bold], \", \", Style[\"coordinatesID\", Bold], \", \", \
Style[\"function\", Bold], \"] does all of the above; either \", \
Style[\"indices\", Bold], \" or \", Style[\"coordinatesID\", Bold], \" can be \
omitted.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TList, {Condition[
         OGRe`TList[
          Pattern[OGRe`Private`ID, 
           Blank[String]], 
          Optional[
           Pattern[OGRe`Private`indices, 
            Blank[List]], {"_UseDefault_"}], 
          Optional[
           Pattern[OGRe`Private`coordinatesID, 
            Blank[String]], "_UseDefault_"], 
          Optional[
           Pattern[OGRe`Private`function, 
            Blank[]], Identity]], 
         And[
          Not[
           ListQ[OGRe`Private`function]], 
          Not[
           StringQ[OGRe`Private`function]]]] :> 
       OGRe`Private`ShowList[
        OGRe`Private`ID, OGRe`Private`indices, OGRe`Private`coordinatesID, 
         "List", OGRe`Private`function]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TList"|>, False]]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"39968c02-5622-4c6b-b1f1-0b63a77cc4ab"]
}, Open  ]],

Cell["For example:", \
"Text",ExpressionUUID->"7769efa6-4bfa-4388-b25e-30c1e4a0ecf2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"afcb4e26-3867-4d05-9f00-8d73ffd25083"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Minkowski\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[Eta]\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"\[Eta]\"", 
                TemplateBox[{"\"x\"", "\"x\""}, "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"x\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"\[Eta]\"", 
                TemplateBox[{"\"y\"", "\"y\""}, "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"y\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"\[Eta]\"", 
                TemplateBox[{"\"z\"", "\"z\""}, "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"z\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", "1"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"470455e3-1f98-45de-bb12-392d09e1ba24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", "\"\<Schwarzschild\>\"", "]"}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"614bd21b-7da7-4fe9-97a3-895365fe2e86"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Schwarzschild\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"g\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox[
            RowBox[{"2", " ", "M"}], "r"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"g\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"1", "-", 
            FractionBox[
             RowBox[{"2", " ", "M"}], "r"]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"g\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          SuperscriptBox["r", "2"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"g\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"f0c72b88-8b93-4056-9ab5-a409ab2db06f"]
}, Open  ]],

Cell[TextData[{
 "Note that both ",
 StyleBox["TShow", "Input"],
 " and ",
 StyleBox["TList", "Input"],
 " display their outputs using the ",
 StyleBox["DisplayFormula", "Input"],
 " Notebook style. It's up to the user to decide how to define this style; in \
this notebook, I used a font size of 20 and aligned to center. The style may \
be easily changed by clicking on the \[OpenCurlyDoubleQuote]Format\
\[CloseCurlyDoubleQuote] menu in Mathematica and selecting \
\[CloseCurlyDoubleQuote]Edit Stylesheet\[CloseCurlyDoubleQuote]. Then, choose \
the ",
 StyleBox["DisplayFormula", "Input"],
 " style, select that cell, and modify its format using the \
\[OpenCurlyDoubleQuote]Format\[CloseCurlyDoubleQuote] menu."
}], "Text",ExpressionUUID->"d1a8e6d1-0241-45e7-ba90-23e91b41d9e8"],

Cell[TextData[{
 "If, as in the examples above, no additional arguments are given to ",
 StyleBox["TShow", "Input"],
 " and ",
 StyleBox["TList", "Input"],
 ", they display the tensors in their ",
 StyleBox["default indices",
  FontWeight->"Bold"],
 " and ",
 StyleBox["default coordinates",
  FontWeight->"Bold"],
 ", which are the ones first used to define the tensor (unless you change \
them later). So, for example, the default indices of the Minkowski metric are \
two lower indices, and its default coordinates are Cartesian. We will show \
later how to change these defaults, and how to display any tensor in any \
index configuration and coordinate system."
}], "Text",ExpressionUUID->"b9c493ac-3182-4cfc-97c9-5e2b07cd60e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Line and volume elements", \
"Subsection",ExpressionUUID->"fc440b37-bc80-4acc-b376-64409eea93eb"],

Cell[TextData[{
 "In the case of metrics, we can also display them as a line element using \
the module ",
 StyleBox["TLineElement", "Input"],
 ":"
}], "Text",ExpressionUUID->"f12ed84f-0ab2-4e61-80db-be9ae895b1da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TLineElement"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"2cea2a72-07a7-42d5-86fa-6212108e44c0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TLineElement[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] displays the line element of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" in its \
default coordinate system.\\\\nTLineElement[\\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", \
Bold, Rule[StripOnInput, False]], \\\"] displays the line element in the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], TextCell[Row[List[\\\"TLineElement[\
\\\", Style[\\\"metricID\\\", Bold], \\\"] displays the line element of the \
metric \\\", Style[\\\"metricID\\\", Bold], \\\" in its default coordinate \
system.\\\\nTLineElement[\\\", Style[\\\"metricID\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] displays the line element in the \
coordinate system \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TLineElement", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`components", ",", 
                    "OGRe`Private`coordSymbols", ",", "OGRe`Private`dim", ",",
                     "OGRe`Private`useCoords"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "=!=", "\"Metric\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TLineElement", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultCoords\"", "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`coordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`dim", "=", 
                    
                    RowBox[{"Length", "[", "OGRe`Private`coordSymbols", 
                    "]"}]}], ";", 
                    RowBox[{"OGRe`Private`components", "=", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    RowBox[{"OGRe`Private`ID", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "]"}]}], ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"OGRe`Private`m", "=", "1"}], "OGRe`Private`dim"], 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"OGRe`Private`n", "=", "1"}], "OGRe`Private`dim"], 
                    RowBox[{
                    RowBox[{"OGRe`Private`components", "\[LeftDoubleBracket]", 
                    RowBox[{"OGRe`Private`m", ",", "OGRe`Private`n"}], 
                    "\[RightDoubleBracket]"}], " ", 
                    RowBox[{"Symbol", "[", 
                    RowBox[{"\"\[DoubleStruckD]\"", "<>", 
                    RowBox[{"ToString", "[", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`m", 
                    "\[RightDoubleBracket]"}], "]"}]}], "]"}], " ", 
                    RowBox[{"Symbol", "[", 
                    RowBox[{"\"\[DoubleStruckD]\"", "<>", 
                    RowBox[{"ToString", "[", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`n", 
                    "\[RightDoubleBracket]"}], "]"}]}], "]"}]}]}]}], "]"}], 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TLineElement\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TLineElement[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] displays the line element of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" in its \
default coordinate system.\\\\nTLineElement[\\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", \
Bold, Rule[StripOnInput, False]], \\\"] displays the line element in the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], TextCell[Row[List[\\\"TLineElement[\
\\\", Style[\\\"metricID\\\", Bold], \\\"] displays the line element of the \
metric \\\", Style[\\\"metricID\\\", Bold], \\\" in its default coordinate \
system.\\\\nTLineElement[\\\", Style[\\\"metricID\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] displays the line element in the \
coordinate system \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TLineElement[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"] displays the \
line element of the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" in its default coordinate \
system.\\nTLineElement[\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \", \", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, \
False]], \"] displays the line element in the coordinate system \", StyleBox[\
\"coordinatesID\", Bold, Rule[StripOnInput, False]], \".\"}]], \
TextCell[Row[List[\"TLineElement[\", Style[\"metricID\", Bold], \"] displays \
the line element of the metric \", Style[\"metricID\", Bold], \" in its \
default coordinate system.\\nTLineElement[\", Style[\"metricID\", Bold], \", \
\", Style[\"coordinatesID\", Bold], \"] displays the line element in the \
coordinate system \", Style[\"coordinatesID\", Bold], \".\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TLineElement, {OGRe`TLineElement[
         Pattern[OGRe`Private`ID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`components, OGRe`Private`coordSymbols, 
          OGRe`Private`dim, OGRe`Private`useCoords}, 
         If[
          OGRe`Private`TensorData[OGRe`Private`ID]["Role"] =!= "Metric", 
           Message[
             MessageName[OGRe`TLineElement, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
          OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`ID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; 
         OGRe`Private`coordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`useCoords][
           "Components"][{{1}, OGRe`Private`useCoords}]; 
         OGRe`Private`dim = Length[OGRe`Private`coordSymbols]; 
         OGRe`Private`components = 
          OGRe`Private`AddRepresentation[
           OGRe`Private`ID, {-1, -1}, OGRe`Private`useCoords]; Return[
           OGRe`Private`TensorSimplify[
            
            Sum[(Part[OGRe`Private`components, OGRe`Private`m, OGRe`Private`n]
                Symbol["\[DoubleStruckD]" <> ToString[
                  Part[OGRe`Private`coordSymbols, OGRe`Private`m]]]) 
             Symbol["\[DoubleStruckD]" <> ToString[
                 Part[OGRe`Private`coordSymbols, OGRe`Private`n]]], {
             OGRe`Private`m, 1, OGRe`Private`dim}, {
             OGRe`Private`n, 1, OGRe`Private`dim}]]]; Null]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TLineElement"|>, False]]], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"e30e00cd-2d7c-4a29-9508-086efdc2cbfb"]
}, Open  ]],

Cell["For example:", \
"Text",ExpressionUUID->"4a2c6a10-b42f-4971-947d-1ffef4be4900"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TLineElement", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"27c6efda-ef79-4e06-8f86-9b289bd8374f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  SuperscriptBox["\[DoubleStruckD]x", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]y", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]z", "2"]}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"1a9c0d1d-4156-46ce-a212-a7af0c5311d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TLineElement", "[", "\"\<Schwarzschild\>\"", "]"}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"edc08e28-15c1-422f-a97d-d7f30398bf8d"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["\[DoubleStruckD]r", "2"], 
   RowBox[{"1", "-", 
    FractionBox[
     RowBox[{"2", " ", "M"}], "r"]}]], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     FractionBox[
      RowBox[{"2", " ", "M"}], "r"]}], ")"}], " ", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["r", "2"], " ", 
   SuperscriptBox["\[DoubleStruckD]\[Theta]", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["r", "2"], " ", 
   SuperscriptBox["\[DoubleStruckD]\[Phi]", "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"4b2feb2b-b4a3-455d-8b8c-0f30afcd03df"]
}, Open  ]],

Cell[TextData[{
 "Note that these are standard Mathematica expressions, so they can be \
manipulated like any other expressions, including operations such as \
simplifying or factoring. As an example of a more interesting (non-diagonal) \
line element, consider the ",
 StyleBox["Alcubierre warp drive metric",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"6b0b0fdd-8f73-45a3-a858-2db4d86dfe8f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TSetReservedSymbols", "[", 
   RowBox[{"{", 
    RowBox[{"v", ",", "f"}], "}"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TNewMetric", "[", 
   RowBox[{"\"\<Alcubierre\>\"", ",", "\"\<Cartesian\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"v", "[", "t", "]"}], "2"], " ", 
          SuperscriptBox[
           RowBox[{"f", "[", 
            RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}], "2"]}]}], ",",
         "0", ",", "0", ",", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"v", "[", "t", "]"}]}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          RowBox[{"v", "[", "t", "]"}]}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}]}], ",", "0", ",",
         "0", ",", "1"}], "}"}]}], "}"}]}], "]"}], ";"}]}], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"3cb8bfb9-0b3f-4918-bbf6-6cb64e482a4c"],

Cell["This is how the metric looks like in matrix form:", \
"Text",ExpressionUUID->"0de0ebcd-2a49-4e48-8d80-f0ce73322c49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Alcubierre\>\"", "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"dc26ae20-4f6a-47df-bcd2-79df2f104620"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Alcubierre\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{
              SuperscriptBox["f", "2"], " ", 
              SuperscriptBox["v", "2"]}]}], "0", "0", 
          RowBox[{
            RowBox[{"-", "f"}], " ", "v"}]}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {
          RowBox[{
            RowBox[{"-", "f"}], " ", "v"}], "0", "0", "1"}}, RowSpacings -> 1,
         ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"84e0b1cc-132d-49f3-a2ec-ad84c1f3bbdd"]
}, Open  ]],

Cell[TextData[{
 StyleBox["f", "InlineFormula",
  FontSlant->"Italic"],
 " is a ",
 StyleBox["form function",
  FontWeight->"Bold"],
 " which is equal to 1 inside a \[OpenCurlyDoubleQuote]warp bubble\
\[CloseCurlyDoubleQuote] of finite radius and 0 outside it, and ",
 StyleBox["v", "InlineFormula",
  FontSlant->"Italic"],
 " is the velocity of the bubble, which can be faster than the speed of light \
(",
 StyleBox["v", "InlineFormula",
  FontSlant->"Italic"],
 StyleBox[" > 1", "InlineFormula"],
 "). Note that we reserved both ",
 StyleBox["v",
  FontSlant->"Italic"],
 " and ",
 StyleBox["f",
  FontSlant->"Italic"],
 ", since they are parameters used in the metric. Here we see another \
advantage of reserving symbols: since ",
 StyleBox["v", "Input"],
 " and ",
 StyleBox["f", "Input"],
 " are reserved symbols, and they are functions of the coordinates only, \
their arguments are not shown when using ",
 StyleBox["TShow", "Input"],
 " and ",
 StyleBox["TList", "Input"],
 ", for improved readability."
}], "Text",ExpressionUUID->"93ce530b-4d19-4f78-a7ca-5009d6affd16"],

Cell[TextData[{
 "It is easy to see that the metric is flat where ",
 StyleBox["f", "InlineFormula",
  FontSlant->"Italic"],
 StyleBox[" = 0", "InlineFormula"],
 ", that is, outside the bubble. Its line element is:"
}], "Text",ExpressionUUID->"105d51ba-a723-4b6f-bc7f-bba326009c4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lineElement", "=", 
  RowBox[{"TLineElement", "[", "\"\<Alcubierre\>\"", "]"}]}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"b4a77690-8f18-481c-abe4-72fc69c96174"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  SuperscriptBox["\[DoubleStruckD]x", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]y", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]z", "2"], "+", 
  RowBox[{"\[DoubleStruckD]t", " ", 
   RowBox[{"f", "[", 
    RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}], " ", 
   RowBox[{"v", "[", "t", "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "\[DoubleStruckD]z"}], "+", 
     RowBox[{"\[DoubleStruckD]t", " ", 
      RowBox[{"f", "[", 
       RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}], " ", 
      RowBox[{"v", "[", "t", "]"}]}]}], ")"}]}]}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"363646a8-b035-45c3-96ef-2a331a356c42"]
}, Open  ]],

Cell["We can simplify it by doing some clever factorization:", \
"Text",ExpressionUUID->"8e445933-95ca-4115-bf76-ff324b55040d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lineElement", "=", 
  RowBox[{
   RowBox[{"lineElement", "//", "Expand"}], "//", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "+", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "+", 
      RowBox[{"#", "[", 
       RowBox[{"[", "3", "]"}], "]"}], "+", 
      RowBox[{"Factor", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "4", "]"}], "]"}], "+", 
        RowBox[{"#", "[", 
         RowBox[{"[", "5", "]"}], "]"}], "+", 
        RowBox[{"#", "[", 
         RowBox[{"[", "6", "]"}], "]"}]}], "]"}]}], ")"}], "&"}]}]}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"256f3f6c-0fde-4e5a-a3cc-3925023eb10e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  SuperscriptBox["\[DoubleStruckD]x", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]y", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"\[DoubleStruckD]z", "-", 
     RowBox[{"\[DoubleStruckD]t", " ", 
      RowBox[{"f", "[", 
       RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "]"}], " ", 
      RowBox[{"v", "[", "t", "]"}]}]}], ")"}], "2"]}]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"a3e8e836-5ee6-4511-adc0-a333dd65ed20"]
}, Open  ]],

Cell[TextData[{
 "In this form, it is immediately clear that the metric is flat outside the \
warp bubble (where ",
 StyleBox["f", "InlineFormula",
  FontSlant->"Italic"],
 " is 0), and inside the warp bubble (when ",
 StyleBox["f", "InlineFormula",
  FontSlant->"Italic"],
 " is 1) it is a flat metric translated by an amount v[t] \[DoubleStruckD]t \
in the z direction:"
}], "Text",ExpressionUUID->"0371e68e-d040-4d53-a3ee-ee578b336b48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lineElement", "/.", 
  RowBox[{"f", "->", 
   RowBox[{"(", 
    RowBox[{"0", "&"}], ")"}]}]}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"8059f28b-14fd-4e7b-83c8-81ff9c7a45bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  SuperscriptBox["\[DoubleStruckD]x", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]y", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]z", "2"]}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"59ab300b-5f75-4cbf-8542-fa9b472ea0c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lineElement", "/.", 
  RowBox[{"f", "->", 
   RowBox[{"(", 
    RowBox[{"1", "&"}], ")"}]}]}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"7072c1c9-377d-40b2-8be0-7c219821b92a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  SuperscriptBox["\[DoubleStruckD]x", "2"], "+", 
  SuperscriptBox["\[DoubleStruckD]y", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"\[DoubleStruckD]z", "-", 
     RowBox[{"\[DoubleStruckD]t", " ", 
      RowBox[{"v", "[", "t", "]"}]}]}], ")"}], "2"]}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"48fe1f67-b773-4a0d-b2b4-7a9707723a15"]
}, Open  ]],

Cell[TextData[{
 "Another thing we can do with a metric is calculate its ",
 StyleBox["volume elements squared",
  FontWeight->"Bold"],
 ", which is simply the determinant of the metric:"
}], "Text",ExpressionUUID->"822b91a1-b768-4a89-8964-a861da4c6ceb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TVolumeElementSquared"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"885ea2f7-f9c6-4347-b912-80dd0e83dd3f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TVolumeElement[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] returns the determinant of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" in the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\". If \\\", StyleBox[\\\"coordinatesID\\\", \
Bold, Rule[StripOnInput, False]], \\\" is not specified, the default \
coordinate system of the metric will be used. The square root of the \
determinant (or its negative, for a pseudo-Riemannian metric) is the volume \
element.\\\"}]], TextCell[Row[List[\\\"TVolumeElement[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] returns the determinant of the metric \\\", Style[\\\"metricID\\\
\", Bold], \\\" in the coordinate system \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\". If \\\", Style[\\\"coordinatesID\\\", Bold], \\\" is not \
specified, the default coordinate system of the metric will be used. The \
square root of the determinant (or its negative, for a pseudo-Riemannian \
metric) is the volume element.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TVolumeElementSquared", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`useCoords", "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "=!=", "\"Metric\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TLineElement", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultCoords\"", "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    RowBox[{"Det", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Components\"", "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "]"}], "]"}], 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TVolumeElementSquared\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TVolumeElement[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] returns the determinant of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" in the \
coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\". If \\\", StyleBox[\\\"coordinatesID\\\", \
Bold, Rule[StripOnInput, False]], \\\" is not specified, the default \
coordinate system of the metric will be used. The square root of the \
determinant (or its negative, for a pseudo-Riemannian metric) is the volume \
element.\\\"}]], TextCell[Row[List[\\\"TVolumeElement[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] returns the determinant of the metric \\\", Style[\\\"metricID\\\
\", Bold], \\\" in the coordinate system \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\". If \\\", Style[\\\"coordinatesID\\\", Bold], \\\" is not \
specified, the default coordinate system of the metric will be used. The \
square root of the determinant (or its negative, for a pseudo-Riemannian \
metric) is the volume element.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TVolumeElement[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] returns the \
determinant of the metric \", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \" in the coordinate system \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \". If \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \" is not specified, the default coordinate \
system of the metric will be used. The square root of the determinant (or its \
negative, for a pseudo-Riemannian metric) is the volume element.\"}]], \
TextCell[Row[List[\"TVolumeElement[\", Style[\"metricID\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \"] returns the determinant of the metric \", \
Style[\"metricID\", Bold], \" in the coordinate system \", \
Style[\"coordinatesID\", Bold], \". If \", Style[\"coordinatesID\", Bold], \" \
is not specified, the default coordinate system of the metric will be used. \
The square root of the determinant (or its negative, for a pseudo-Riemannian \
metric) is the volume element.\"]]]]\)", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TVolumeElementSquared, {OGRe`TVolumeElementSquared[
         Pattern[OGRe`Private`ID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`useCoords}, 
         If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] =!= "Metric", 
           Message[
             MessageName[OGRe`TLineElement, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
          OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`ID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; Return[
           OGRe`Private`TensorSimplify[
            Det[
             OGRe`Private`TensorData[OGRe`Private`ID][
             "Components"][{{-1, -1}, OGRe`Private`useCoords}]]]]; Null]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TVolumeElementSquared"|>, False]]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"6b21a4e9-38a2-4b6d-b25c-a82f9eea1a25"]
}, Open  ]],

Cell["For example:", \
"Text",ExpressionUUID->"64e941f9-2f8f-4622-a5f2-302e521d1ebe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TVolumeElementSquared", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"e12dd5d3-f0f5-4a10-9985-c6bd3607556a"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"2982641b-0c3e-49ac-8f3f-f71487fad4f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TVolumeElementSquared", "[", "\"\<Schwarzschild\>\"", 
  "]"}]], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"47c6e08e-ba9b-4b09-9a36-8079265d55e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["r", "4"]}], " ", 
  SuperscriptBox[
   RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"300ee9f1-d574-4e23-9bce-159bedf70859"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TVolumeElementSquared", "[", "\"\<Alcubierre\>\"", "]"}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"2e4166d7-1314-470b-aa2c-080cf543f211"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"8687500d-597d-42c6-8bce-5bc7a391bad9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Choosing index letters", \
"Subsection",ExpressionUUID->"140b1d9b-8ebc-4b0b-9360-c7b987cf44b5"],

Cell[TextData[{
 "By default, the ",
 StyleBox["TShow", "Input"],
 " module uses Greek letters for the indices, in a specific order. The \
letters can be displayed or changed using the ",
 StyleBox["TSetIndexLetters", "Input"],
 " module:"
}], "Text",ExpressionUUID->"da84f53f-53dd-4bbc-b31e-07e160929ea1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetIndexLetters"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"825c8084-ae82-4dda-87cd-a98c478f7fec"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetIndexLetters[] shows the index letters used when displaying \
indices.\\\\nTSetIndexLetters[\\\", StyleBox[\\\"letters\\\", Bold, \
Rule[StripOnInput, False]], \\\"] changes the index \
letters.\\\\nTSetIndexLetters[Automatic] resets the index letters to the \
default: \\\\\\\"\\\\[Mu]\\\\[Nu]\\\\[Rho]\\\\[Sigma]\\\\[Kappa]\\\\[Lambda]\\\
\\[Alpha]\\\\[Beta]\\\\[Gamma]\\\\[Delta]\\\\[CurlyEpsilon]\\\\[Zeta]\\\\[\
Epsilon]\\\\[Theta]\\\\[Iota]\\\\[Xi]\\\\[Pi]\\\\[Tau]\\\\[Phi]\\\\[Chi]\\\\[\
Psi]\\\\[Omega]\\\\\\\".\\\"}]], TextCell[Row[List[\\\"TSetIndexLetters[] \
shows the index letters used when displaying indices.\\\\nTSetIndexLetters[\\\
\", Style[\\\"letters\\\", Bold], \\\"] changes the index \
letters.\\\\nTSetIndexLetters[Automatic] resets the index letters to the \
default: \\\\\\\"\\\\[Mu]\\\\[Nu]\\\\[Rho]\\\\[Sigma]\\\\[Kappa]\\\\[Lambda]\\\
\\[Alpha]\\\\[Beta]\\\\[Gamma]\\\\[Delta]\\\\[CurlyEpsilon]\\\\[Zeta]\\\\[\
Epsilon]\\\\[Theta]\\\\[Iota]\\\\[Xi]\\\\[Pi]\\\\[Tau]\\\\[Phi]\\\\[Chi]\\\\[\
Psi]\\\\[Omega]\\\\\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetIndexLetters", "[", "]"}], ":=", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"IndexLetters\"", "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TSetIndexLetters", "[", "Automatic", "]"}], ":=", 
                    RowBox[{
                    "TSetIndexLetters", "[", 
                    "OGRe`Private`DefaultIndexLetters", "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetIndexLetters", "[", "OGRe`Private`letters_String", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`TensorData", "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"IndexLetters\"", "]"}], "=", 
                    "OGRe`Private`letters"}], ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "OGRe`Private`letters", "]"}], 
                    ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetIndexLetters\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetIndexLetters[] shows the index letters used when displaying \
indices.\\\\nTSetIndexLetters[\\\", StyleBox[\\\"letters\\\", Bold, \
Rule[StripOnInput, False]], \\\"] changes the index \
letters.\\\\nTSetIndexLetters[Automatic] resets the index letters to the \
default: \\\\\\\"\\\\[Mu]\\\\[Nu]\\\\[Rho]\\\\[Sigma]\\\\[Kappa]\\\\[Lambda]\\\
\\[Alpha]\\\\[Beta]\\\\[Gamma]\\\\[Delta]\\\\[CurlyEpsilon]\\\\[Zeta]\\\\[\
Epsilon]\\\\[Theta]\\\\[Iota]\\\\[Xi]\\\\[Pi]\\\\[Tau]\\\\[Phi]\\\\[Chi]\\\\[\
Psi]\\\\[Omega]\\\\\\\".\\\"}]], TextCell[Row[List[\\\"TSetIndexLetters[] \
shows the index letters used when displaying indices.\\\\nTSetIndexLetters[\\\
\", Style[\\\"letters\\\", Bold], \\\"] changes the index \
letters.\\\\nTSetIndexLetters[Automatic] resets the index letters to the \
default: \\\\\\\"\\\\[Mu]\\\\[Nu]\\\\[Rho]\\\\[Sigma]\\\\[Kappa]\\\\[Lambda]\\\
\\[Alpha]\\\\[Beta]\\\\[Gamma]\\\\[Delta]\\\\[CurlyEpsilon]\\\\[Zeta]\\\\[\
Epsilon]\\\\[Theta]\\\\[Iota]\\\\[Xi]\\\\[Pi]\\\\[Tau]\\\\[Phi]\\\\[Chi]\\\\[\
Psi]\\\\[Omega]\\\\\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetIndexLetters[] shows the \
index letters used when displaying indices.\\nTSetIndexLetters[\", \
StyleBox[\"letters\", Bold, Rule[StripOnInput, False]], \"] changes the index \
letters.\\nTSetIndexLetters[Automatic] resets the index letters to the \
default: \\\"\\[Mu]\\[Nu]\\[Rho]\\[Sigma]\\[Kappa]\\[Lambda]\\[Alpha]\\[Beta]\
\\[Gamma]\\[Delta]\\[CurlyEpsilon]\\[Zeta]\\[Epsilon]\\[Theta]\\[Iota]\\[Xi]\\\
[Pi]\\[Tau]\\[Phi]\\[Chi]\\[Psi]\\[Omega]\\\".\"}]], \
TextCell[Row[List[\"TSetIndexLetters[] shows the index letters used when \
displaying indices.\\nTSetIndexLetters[\", Style[\"letters\", Bold], \"] \
changes the index letters.\\nTSetIndexLetters[Automatic] resets the index \
letters to the default: \
\\\"\\[Mu]\\[Nu]\\[Rho]\\[Sigma]\\[Kappa]\\[Lambda]\\[Alpha]\\[Beta]\\[Gamma]\
\\[Delta]\\[CurlyEpsilon]\\[Zeta]\\[Epsilon]\\[Theta]\\[Iota]\\[Xi]\\[Pi]\\[\
Tau]\\[Phi]\\[Chi]\\[Psi]\\[Omega]\\\".\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetIndexLetters, {
      OGRe`TSetIndexLetters[] :> 
       OGRe`Private`TensorData[Options]["IndexLetters"], 
       OGRe`TSetIndexLetters[Automatic] :> 
       OGRe`TSetIndexLetters[OGRe`Private`DefaultIndexLetters], 
       OGRe`TSetIndexLetters[
         Pattern[OGRe`Private`letters, 
          Blank[String]]] :> (Unprotect[OGRe`Private`TensorData]; 
        OGRe`Private`TensorData[Options]["IndexLetters"] = 
         OGRe`Private`letters; Protect[OGRe`Private`TensorData]; 
        Return[OGRe`Private`letters]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TSetIndexLetters"|>, False]]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"102cbc07-3cee-45ae-9303-b95d11d5d84e"]
}, Open  ]],

Cell["The default letters are:", \
"Text",ExpressionUUID->"c4ed6c23-135f-44ba-a126-7ee2013b16a6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetIndexLetters", "[", "]"}]], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"b31afa1f-8706-4674-9489-c39a22c1812d"],

Cell[BoxData["\<\"\[Mu]\[Nu]\[Rho]\[Sigma]\[Kappa]\[Lambda]\[Alpha]\[Beta]\
\[Gamma]\[Delta]\[CurlyEpsilon]\[Zeta]\[Epsilon]\[Theta]\[Iota]\[Xi]\[Pi]\
\[Tau]\[Phi]\[Chi]\[Psi]\[Omega]\"\>"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"3e5c0e13-cde6-4f44-9b8d-895030dedc31"]
}, Open  ]],

Cell["\<\
This means that the letter \[Mu] will be used for the first index, \[Nu] for \
the second, and so on. However, sometimes we want to use different letters. \
For example, let us change the indices to lowercase English letters:\
\>", "Text",ExpressionUUID->"a9733ba6-41c0-4d1a-ac76-b9078470fb0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetIndexLetters", "[", "\"\<abcdefghijklmnopqrstuvwxyz\>\"", 
  "]"}]], "Input",
 CellLabel->"In[39]:=",ExpressionUUID->"e437e293-8891-4d70-8963-e159543d2169"],

Cell[BoxData["\<\"abcdefghijklmnopqrstuvwxyz\"\>"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"e7171a25-d6d7-4dfa-bc74-1d5a3fa72918"]
}, Open  ]],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Show\[CloseCurlyDoubleQuote]", "Input"],
 " will now use these letters - in this particular order - when displaying \
tensors:"
}], "Text",ExpressionUUID->"16c56914-305b-4c9a-bc0d-8b70b21da46b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"8f16c56f-5033-43ba-ac10-7fdb1e61d3d1"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Minkowski\"", "\":   \"", 
    TemplateBox[{"\"\[Eta]\"", 
      TemplateBox[{"\"a\"", "\"b\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"a\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"b\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"8548996a-3f02-4f2a-b85f-8379b2d43eb0"]
}, Open  ]],

Cell["Finally, let us reset the letters to the default:", \
"Text",ExpressionUUID->"11bc3c60-085d-4d74-98de-a810ae6def38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetIndexLetters", "[", "Automatic", "]"}]], "Input",
 CellLabel->"In[41]:=",ExpressionUUID->"97b05192-4da8-44ac-bb03-76690cfb15f4"],

Cell[BoxData["\<\"\[Mu]\[Nu]\[Rho]\[Sigma]\[Kappa]\[Lambda]\[Alpha]\[Beta]\
\[Gamma]\[Delta]\[CurlyEpsilon]\[Zeta]\[Epsilon]\[Theta]\[Iota]\[Xi]\[Pi]\
\[Tau]\[Phi]\[Chi]\[Psi]\[Omega]\"\>"], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"52f568a7-3c65-4c61-9777-365bf9a7d49d"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["TList", "Input"],
 " always uses the coordinate symbols themselves for the indices (e.g. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Eta]", "tt"], TraditionalForm]],ExpressionUUID->
  "c5231356-4d44-4e7f-ba9c-25be590145cf"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Eta]", "xx"], TraditionalForm]],ExpressionUUID->
  "4972e901-7103-4456-911a-62b9106daa8a"],
 ", etc.), so it is not affected by ",
 StyleBox["TSetIndexLetters", "Input"],
 "."
}], "Text",ExpressionUUID->"c36945f7-40e0-4010-8a3b-741106697b99"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating tensors in a given manifold", \
"Subsection",ExpressionUUID->"89374f96-47cd-4579-9d2d-f5c3396ab17b"],

Cell[TextData[{
 "Any tensors other than coordinates and metrics are created using the module \
",
 StyleBox["TNewTensor", "Input"],
 ":"
}], "Text",ExpressionUUID->"4fa3b0a6-fc5c-4dbe-9b55-50d47e7fa930"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TNewTensor"}]], "Input",
 CellLabel->"In[42]:=",ExpressionUUID->"4e7490dc-7bce-441f-8174-f4ce4d0f2f66"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewTensor[\\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\", \
\\\", StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\", \\\
\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"] creates \
a new tensor object.\\\\n\\\", StyleBox[\\\"tensorID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\" is the unique ID of a tensor object \
representing a metric, created using TNewMetric[]. The metric will be used to \
raise and lower indices for the new tensor.\\\\n\\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is the \
unique ID of a tensor object representing a coordinate system, created using \
TNewCoordinates[]. This coordinate system will be used to specify the \
components of the new tensor. If omitted, the default coordinate system of \
the metric \\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be used.\\\\n\\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\n\\\", \
StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\" is a list \
specifying the representation of the tensor with the index configuration \
\\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and in \
the coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\n\\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\" will be used to represent the tensor in \
formulas. If not given, the placeholder \\\\[DottedSquare] will be \
used.\\\"}]], TextCell[Row[List[\\\"TNewTensor[\\\", Style[\\\"tensorID\\\", \
Bold], \\\", \\\", Style[\\\"metricID\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \
\\\", \\\", Style[\\\"components\\\", Bold], \\\", \\\", \
Style[\\\"symbol\\\", Bold], \\\"] creates a new tensor object.\\\\n\\\", \
Style[\\\"tensorID\\\", Bold], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", Style[\\\"metricID\\\", Bold], \
\\\" is the unique ID of a tensor object representing a metric, created using \
TNewMetric[]. The metric will be used to raise and lower indices for the new \
tensor.\\\\n\\\", Style[\\\"coordinatesID\\\", Bold], \\\" is the unique ID \
of a tensor object representing a coordinate system, created using \
TNewCoordinates[]. This coordinate system will be used to specify the \
components of the new tensor. If omitted, the default coordinate system of \
the metric \\\", Style[\\\"metricID\\\", Bold], \\\" will be used.\\\\n\\\", \
Style[\\\"indices\\\", Bold], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\n\\\", \
Style[\\\"components\\\", Bold], \\\" is a list specifying the representation \
of the tensor with the index configuration \\\", Style[\\\"indices\\\", \
Bold], \\\" and in the coordinate system \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\".\\\\n\\\", Style[\\\"symbol\\\", Bold], \\\" will be used to \
represent the tensor in formulas. If not given, the placeholder \
\\\\[DottedSquare] will be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TNewTensor", "[", 
                    RowBox[{
                    "OGRe`Private`tensorID_String", ",", 
                    "OGRe`Private`metricID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}], ",", "OGRe`Private`indices_List", 
                    ",", "OGRe`Private`components_List", ",", 
                    
                    RowBox[{
                    "OGRe`Private`symbol_String", ":", 
                    "\"\[DottedSquare]\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`useCoords", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`tensorID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfMetric", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIndicesForm", "[", 
                    "OGRe`Private`indices", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "OGRe`Private`components", "]"}], 
                    " ", 
                    
                    RowBox[{"ArrayDepth", "[", "OGRe`Private`components", 
                    "]"}]}], "\[NotEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "OGRe`Private`components", "]"}], 
                    "\[NotEqual]", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewTensor", "::", "ErrorDimension"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "OGRe`Private`indices", "]"}], 
                    "\[NotEqual]", 
                    
                    RowBox[{"ArrayDepth", "[", "OGRe`Private`components", 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewTensor", "::", "ErrorRank"}], "MessageName"],
                     "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "OGRe`Private`indices", "]"}], 
                    "\[NotEqual]", "0"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TNewTensor", "::", "ErrorRank"}], "MessageName"],
                     "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";"}]}], 
                    "]"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tensorID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`indices", ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`components", "]"}]}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    "OGRe`Private`indices"}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`metricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Tensor\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "OGRe`Private`symbol"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`tensorID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TNewTensor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TNewTensor[\\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\", \
\\\", StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\", \\\
\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"] creates \
a new tensor object.\\\\n\\\", StyleBox[\\\"tensorID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\" is the unique ID of a tensor object \
representing a metric, created using TNewMetric[]. The metric will be used to \
raise and lower indices for the new tensor.\\\\n\\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is the \
unique ID of a tensor object representing a coordinate system, created using \
TNewCoordinates[]. This coordinate system will be used to specify the \
components of the new tensor. If omitted, the default coordinate system of \
the metric \\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be used.\\\\n\\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\n\\\", \
StyleBox[\\\"components\\\", Bold, Rule[StripOnInput, False]], \\\" is a list \
specifying the representation of the tensor with the index configuration \
\\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and in \
the coordinate system \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\n\\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\" will be used to represent the tensor in \
formulas. If not given, the placeholder \\\\[DottedSquare] will be \
used.\\\"}]], TextCell[Row[List[\\\"TNewTensor[\\\", Style[\\\"tensorID\\\", \
Bold], \\\", \\\", Style[\\\"metricID\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \
\\\", \\\", Style[\\\"components\\\", Bold], \\\", \\\", \
Style[\\\"symbol\\\", Bold], \\\"] creates a new tensor object.\\\\n\\\", \
Style[\\\"tensorID\\\", Bold], \\\" is a string that will be used to identify \
the new object, and must be unique.\\\\n\\\", Style[\\\"metricID\\\", Bold], \
\\\" is the unique ID of a tensor object representing a metric, created using \
TNewMetric[]. The metric will be used to raise and lower indices for the new \
tensor.\\\\n\\\", Style[\\\"coordinatesID\\\", Bold], \\\" is the unique ID \
of a tensor object representing a coordinate system, created using \
TNewCoordinates[]. This coordinate system will be used to specify the \
components of the new tensor. If omitted, the default coordinate system of \
the metric \\\", Style[\\\"metricID\\\", Bold], \\\" will be used.\\\\n\\\", \
Style[\\\"indices\\\", Bold], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\n\\\", \
Style[\\\"components\\\", Bold], \\\" is a list specifying the representation \
of the tensor with the index configuration \\\", Style[\\\"indices\\\", \
Bold], \\\" and in the coordinate system \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\".\\\\n\\\", Style[\\\"symbol\\\", Bold], \\\" will be used to \
represent the tensor in formulas. If not given, the placeholder \
\\\\[DottedSquare] will be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TNewTensor[\", \
StyleBox[\"tensorID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"components\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \"] creates a new \
tensor object.\\n\", StyleBox[\"tensorID\", Bold, Rule[StripOnInput, False]], \
\" is a string that will be used to identify the new object, and must be \
unique.\\n\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \" is \
the unique ID of a tensor object representing a metric, created using \
TNewMetric[]. The metric will be used to raise and lower indices for the new \
tensor.\\n\", StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \
\" is the unique ID of a tensor object representing a coordinate system, \
created using TNewCoordinates[]. This coordinate system will be used to \
specify the components of the new tensor. If omitted, the default coordinate \
system of the metric \", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \" will be used.\\n\", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \" must be a list of the form {\\[PlusMinus]1, \
\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\n\", StyleBox[\"components\", Bold, \
Rule[StripOnInput, False]], \" is a list specifying the representation of the \
tensor with the index configuration \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \" and in the coordinate system \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \".\\n\", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \" will be used to \
represent the tensor in formulas. If not given, the placeholder \
\\[DottedSquare] will be used.\"}]], TextCell[Row[List[\"TNewTensor[\", \
Style[\"tensorID\", Bold], \", \", Style[\"metricID\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \", \", Style[\"indices\", Bold], \", \", \
Style[\"components\", Bold], \", \", Style[\"symbol\", Bold], \"] creates a \
new tensor object.\\n\", Style[\"tensorID\", Bold], \" is a string that will \
be used to identify the new object, and must be unique.\\n\", \
Style[\"metricID\", Bold], \" is the unique ID of a tensor object \
representing a metric, created using TNewMetric[]. The metric will be used to \
raise and lower indices for the new tensor.\\n\", Style[\"coordinatesID\", \
Bold], \" is the unique ID of a tensor object representing a coordinate \
system, created using TNewCoordinates[]. This coordinate system will be used \
to specify the components of the new tensor. If omitted, the default \
coordinate system of the metric \", Style[\"metricID\", Bold], \" will be \
used.\\n\", Style[\"indices\", Bold], \" must be a list of the form \
{\\[PlusMinus]1, \\[PlusMinus]1, ...}, where +1 corresponds to an upper index \
and -1 corresponds to a lower index.\\n\", Style[\"components\", Bold], \" is \
a list specifying the representation of the tensor with the index \
configuration \", Style[\"indices\", Bold], \" and in the coordinate system \
\", Style[\"coordinatesID\", Bold], \".\\n\", Style[\"symbol\", Bold], \" \
will be used to represent the tensor in formulas. If not given, the \
placeholder \\[DottedSquare] will be used.\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TNewTensor, {OGRe`TNewTensor[
         Pattern[OGRe`Private`tensorID, 
          Blank[String]], 
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"], 
         Pattern[OGRe`Private`indices, 
          Blank[List]], 
         Pattern[OGRe`Private`components, 
          Blank[List]], 
         Optional[
          Pattern[OGRe`Private`symbol, 
           Blank[String]], "\[DottedSquare]"]] :> 
       Module[{OGRe`Private`useCoords}, 
         OGRe`Private`CheckIfOverwriting[OGRe`Private`tensorID]; 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         OGRe`Private`CheckIfMetric[OGRe`Private`metricID]; 
         OGRe`Private`CheckIndicesForm[OGRe`Private`indices]; 
         If[OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID]; 
         If[Length[OGRe`Private`components] 
            ArrayDepth[OGRe`Private`components] != 1, 
           If[Length[OGRe`Private`components] != Length[
               OGRe`Private`TensorData[OGRe`Private`useCoords][
               "Components"][{{1}, OGRe`Private`useCoords}]], Message[
               MessageName[OGRe`TNewTensor, "ErrorDimension"]]; Abort[]; 
             Null]; If[
            Length[OGRe`Private`indices] != 
             ArrayDepth[OGRe`Private`components], Message[
               MessageName[OGRe`TNewTensor, "ErrorRank"]]; Abort[]; Null], 
           If[Length[OGRe`Private`indices] != 0, Message[
               MessageName[OGRe`TNewTensor, "ErrorRank"]]; Abort[]; Null]; 
           Null]; OGRe`Private`SetTensorID[
          OGRe`Private`tensorID, <|
           "Components" -> <|{OGRe`Private`indices, OGRe`Private`useCoords} -> 
              OGRe`Private`TensorSimplify[OGRe`Private`components]|>, 
            "DefaultCoords" -> OGRe`Private`useCoords, "DefaultIndices" -> 
            OGRe`Private`indices, "Metric" -> OGRe`Private`metricID, "Role" -> 
            "Tensor", "Symbol" -> OGRe`Private`symbol|>]; 
         Return[OGRe`Private`tensorID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TNewTensor"|>, False]]], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"333d72b3-bfa6-4fc9-bc87-ac1b37273aa4"]
}, Open  ]],

Cell[TextData[{
 "In OGRe, all tensor objects must have an ",
 StyleBox["associated metric",
  FontWeight->"Bold"],
 " - except coordinate objects, and the metric tensors themselves. This is \
because OGRe automatically raises and lowers indices as appropriate for \
various operations such as adding and contracting tensors, and it cannot do \
so without knowing which metric to use. Even scalars, which have no indices, \
should still be associated to a specific metric - since they can multiply \
other tensors, and you don\[CloseCurlyQuote]t want to multiply tensors from \
different manifolds together."
}], "Text",ExpressionUUID->"4fbf94c4-f5e9-45e2-9e68-1b1453e25387"],

Cell[TextData[{
 "The index configuration of the tensor is a 1-dimensional ",
 StyleBox["List", "Input"],
 ". The number of indices is the rank of the tensor. Each element in the ",
 StyleBox["List", "Input"],
 " corresponds to one index, with ",
 StyleBox["+1", "Input"],
 " specifying an upper index and ",
 StyleBox["-1", "Input"],
 " specifying a lower index. For example, ",
 StyleBox["{-1,-1}", "Input"],
 " corresponds to a tensor such as the metric ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["g", "\[Mu]\[Nu]"], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"49d25d5f-2856-4de6-a28f-05049986e2af"],
 ", which has two lower indices, while ",
 StyleBox["{1,-1,-1,-1}", "Input"],
 " corresponds to a tensor such as the Riemann tensor ",
 Cell[BoxData[
  TemplateBox[{"R", 
    RowBox[{" ", "\[Sigma]\[Mu]\[Nu]"}], "\[Rho]"},
   "Subsuperscript"]], "InlineFormula",
  CellChangeTimes->{{3.7959945744799833`*^9, 3.795994641243039*^9}, 
    3.796156638388831*^9},ExpressionUUID->
  "46389114-9faf-4b3b-97a0-3d1d33abc90f"],
 ", which has one upper index followed by three lower indices."
}], "Text",ExpressionUUID->"90d6811e-eb58-48f1-bac9-ca38f08cf595"],

Cell[TextData[{
 "The components of the tensor must also be a ",
 StyleBox["List", "Input"],
 ". The components are the representation of the new tensor in the given \
index configuration and coordinate system. If a coordinate system is not \
specified, ",
 "the default coordinate system of the associated metric will be used - but \
it is recommended to always specify the coordinate system explicitly, to \
avoid accidentally defining the tensor with the wrong components",
 ". The components will be automatically converted to different indices or \
coordinates later as needed, as we will demonstrate below."
}], "Text",ExpressionUUID->"e683d2c7-5419-4023-b092-e2820fe137b7"],

Cell[TextData[{
 "To create a ",
 StyleBox["scalar",
  FontWeight->"Bold"],
 ", or a tensor of rank 0 (with no indices), we must input an empty list ",
 StyleBox["{}", "Input"],
 " for the indices, and a list with one item for the components. For example, \
let us define the ",
 StyleBox["Kretschmann scalar",
  FontWeight->"Bold"],
 " in the Schwarzschild spacetime (below we will show how to calculate it \
directly from the metric):"
}], "Text",ExpressionUUID->"4181db7e-2300-47ac-a552-a823be3ad98e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewTensor", "[", 
  RowBox[{
  "\"\<Kretschmann\>\"", ",", "\"\<Schwarzschild\>\"", ",", 
   "\"\<Spherical\>\"", ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    FractionBox[
     RowBox[{"48", " ", 
      SuperscriptBox["M", "2"]}], 
     SuperscriptBox["r", "6"]], "}"}], ",", "\"\<K\>\""}], "]"}]], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"e086714b-c7df-4fd7-835d-b914e9e1ff77"],

Cell[BoxData["\<\"Kretschmann\"\>"], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"acb3ceea-96c1-40a3-b950-22b58724e558"]
}, Open  ]],

Cell["\<\
Again, the output is the unique ID of the tensor object that was created. Let \
us show the tensor:\
\>", "Text",ExpressionUUID->"196e017c-9d68-4f1d-9b9c-ae51d96cef35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<Kretschmann\>\"", "]"}]], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"07225bbf-adf2-45db-bf72-2b53e9c9d1ee"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Kretschmann\"", "\":   \"", 
    TemplateBox[{"\"K\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    FractionBox[
     RowBox[{"48", " ", 
       SuperscriptBox["M", "2"]}], 
     SuperscriptBox["r", "6"]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"bd7c0c51-dd56-483d-ae33-08acebe066e1"]
}, Open  ]],

Cell[TextData[{
 "Notice that the output of ",
 StyleBox["TNewTensor", "Input"],
 " is also the input of ",
 StyleBox["TShow", "Input"],
 ", so in fact, we could ",
 StyleBox["compose",
  FontWeight->"Bold"],
 " them together using ",
 StyleBox["@", "Input"],
 ". We will do so from now on."
}], "Text",ExpressionUUID->"278fee37-d9a4-4308-a8e0-d563306a0cd8"],

Cell[TextData[{
 "Similarly, we can create a ",
 StyleBox["vector",
  FontWeight->"Bold"],
 ", or a tensor of rank 1 (with one index). For example, let us create a \
vector for the 4-velocity of a particle moving at 3-velocity ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],ExpressionUUID->
  "817daa01-d71e-412b-b200-50305c7a85f9"],
 " along the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "c44e7757-8839-44a1-960b-6d824bffeb7d"],
 " direction in Minkowski space. (We do not need to reserve the symbol v, \
since we already reserved it for the Alcubierre metric above.)"
}], "Text",ExpressionUUID->"1d3b2eab-8829-44c0-9690-7c0292708adf"],

Cell[TextData[{
 "Since the 4-velocity has an upper index by definition, we make sure to \
define the components in the representation of the tensor with an upper index \
by specifying the index configuration as ",
 StyleBox["{1}", "Input"],
 ":"
}], "Text",ExpressionUUID->"9ee75ddf-599b-466f-9dfd-65fbe0640463"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewTensor", "[", 
   RowBox[{
   "\"\<FourVelocity\>\"", ",", "\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"",
     ",", 
    RowBox[{"{", "1", "}"}], ",", 
    FractionBox[
     RowBox[{"{", 
      RowBox[{"1", ",", "v", ",", "0", ",", "0"}], "}"}], 
     SqrtBox[
      RowBox[{"1", "-", 
       SuperscriptBox["v", "2"]}]]]}], "]"}]}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"88014842-35d8-4af2-aeab-99e80b0e2a22"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"FourVelocity\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{
           FractionBox["1", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {"0"}, {"0"}}, RowSpacings -> 1,
          ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"df556b40-7435-45e3-a440-c4abd5cf518b"]
}, Open  ]],

Cell[TextData[{
 "Again, the output of ",
 StyleBox["TNewTensor", "Input"],
 " was the ID of the tensor, ",
 StyleBox["\[OpenCurlyDoubleQuote]FourVelocity\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", but that is also the input we want to pass to ",
 StyleBox["TShow", "Input"],
 ", so we ",
 StyleBox["composed",
  FontWeight->"Bold"],
 " the two modules together. Note also that since we did not specify a symbol \
for this tensor, its symbol is just a placeholder \[DottedSquare]. We will \
give it a proper symbol below."
}], "Text",ExpressionUUID->"88dfb580-f911-43d4-9734-1dc71d5684fe"],

Cell[TextData[{
 "Finally, as an example of a tensor of rank 2 (with two indices), let us \
define the stress-energy tensor ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["T", "\[Mu]\[Nu]"], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"c851112f-cad0-4ff2-80c6-0672ae678680"],
 " for a perfect fluid. First, let us reserve the symbols ",
 StyleBox["\[Rho]", "Input"],
 " (for the energy density) and ",
 StyleBox["p", "Input"],
 " (for the pressure):"
}], "Text",ExpressionUUID->"a4cfc7eb-e398-488a-b36e-8da95f188b3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetReservedSymbols", "[", 
  RowBox[{"{", 
   RowBox[{"\[Rho]", ",", "p"}], "}"}], "]"}]], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"15e78264-0ea0-43e5-b96c-afbdb5843606"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"t\"\>", ",", "\<\"x\"\>", ",", "\<\"y\"\>", ",", "\<\"z\"\>", 
   ",", "\<\"r\"\>", ",", "\<\"\[Theta]\"\>", ",", "\<\"\[Phi]\"\>", 
   ",", "\<\"M\"\>", ",", "\<\"v\"\>", ",", "\<\"f\"\>", 
   ",", "\<\"\[Rho]\"\>", ",", "\<\"p\"\>"}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"135b1c9e-0826-4737-bfbb-395101068531"]
}, Open  ]],

Cell[TextData[{
 "Next we create the tensor, using its matrix representation with two upper \
indices by specifying the index configuration ",
 StyleBox["{1,1}", "Input"],
 ":"
}], "Text",ExpressionUUID->"2f89fee9-3fdf-43e5-8ef4-caff728d9601"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewTensor", "[", 
   RowBox[{
   "\"\<PerfectFluid\>\"", ",", "\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"",
     ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", 
    RowBox[{"DiagonalMatrix", "[", 
     RowBox[{"{", 
      RowBox[{"\[Rho]", ",", "p", ",", "p", ",", "p"}], "}"}], "]"}], ",", 
    "\"\<T\>\""}], "]"}]}]], "Input",
 CellLabel->"In[47]:=",ExpressionUUID->"ae9b130f-3ce0-4fe2-94b9-a0b7a20b969d"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluid\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"]}, 
     "Subsuperscript", SyntaxForm -> SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"\[Rho]", "0", "0", "0"}, {"0", "p", "0", "0"}, {
         "0", "0", "p", "0"}, {"0", "0", "0", "p"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"98b60522-1aa2-4db3-8a9b-f7c51fc92b71"]
}, Open  ]],

Cell["\<\
In a similar manner, we could also define tensors of rank 3 and above. \
However, such tensors are most often derived by operating on lower-rank \
tensors, rather than defined manually via their components. We will see an \
example of such a derivation when we derive the Christoffel symbols and \
Riemann tensor from the metric below.\
\>", "Text",ExpressionUUID->"6e26f9b2-8038-40a2-9800-ad661727ead6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations on single tensors", \
"Section",ExpressionUUID->"8a161198-bcb6-470d-a43b-aa3bbddf77d2"],

Cell[CellGroupData[{

Cell["Changing the symbol or ID of a tensor", \
"Subsection",ExpressionUUID->"03fc6437-186b-4c47-b075-df0f6a99cb74"],

Cell[TextData[{
 "If we ever want to change the symbol used to display a tensor, we can \
simply use the module ",
 StyleBox["TChangeSymbol", "Input"],
 ":"
}], "Text",ExpressionUUID->"755e4bce-652b-4090-9bc2-9b04c564d8a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TChangeSymbol"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"fda21cba-eb85-462e-a66e-76406da71730"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeSymbol[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\
\", \\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"] \
changes the symbol of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" to \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeSymbol[\\\", Style[\\\"ID\\\", Bold], \\\", \
\\\", Style[\\\"symbol\\\", Bold], \\\"] changes the symbol of the tensor \
object \\\", Style[\\\"ID\\\", Bold], \\\" to \\\", Style[\\\"symbol\\\", \
Bold], \\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TChangeSymbol", "[", 
                    
                    RowBox[{
                    "OGRe`Private`ID_String", ",", 
                    "OGRe`Private`symbol_String"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`ID", ",", "\"Symbol\"", ",", 
                    "OGRe`Private`symbol"}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`ID", "]"}], ";"}], 
                    ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TChangeSymbol\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeSymbol[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\
\", \\\", StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\"] \
changes the symbol of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" to \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeSymbol[\\\", Style[\\\"ID\\\", Bold], \\\", \
\\\", Style[\\\"symbol\\\", Bold], \\\"] changes the symbol of the tensor \
object \\\", Style[\\\"ID\\\", Bold], \\\" to \\\", Style[\\\"symbol\\\", \
Bold], \\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TChangeSymbol[\", StyleBox[\"ID\
\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"symbol\", Bold, \
Rule[StripOnInput, False]], \"] changes the symbol of the tensor object \", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \" to \", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \".\"}]], \
TextCell[Row[List[\"TChangeSymbol[\", Style[\"ID\", Bold], \", \", \
Style[\"symbol\", Bold], \"] changes the symbol of the tensor object \", \
Style[\"ID\", Bold], \" to \", Style[\"symbol\", Bold], \".\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TChangeSymbol, {OGRe`TChangeSymbol[
         Pattern[OGRe`Private`ID, 
          Blank[String]], 
         Pattern[OGRe`Private`symbol, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
        OGRe`Private`ChangeTensorKey[
         OGRe`Private`ID, "Symbol", OGRe`Private`symbol]; 
        Return[OGRe`Private`ID]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TChangeSymbol"|>, False]]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"362dbfa0-9586-49ad-b312-58e732402e9e"]
}, Open  ]],

Cell[TextData[{
 "For example, let us give the symbol ",
 Cell[BoxData[
  FormBox["u", TraditionalForm]],ExpressionUUID->
  "243388a6-474d-495a-980f-edb2c0589ccc"],
 " to the four-velocity, and then show it:"
}], "Text",ExpressionUUID->"8c8a5349-7ae0-417a-b338-3b0fd9001239"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TChangeSymbol", "[", 
   RowBox[{"\"\<FourVelocity\>\"", ",", "\"\<u\>\""}], "]"}]}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"e8c9d148-3edb-4de1-911d-1731069b0e20"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"FourVelocity\"", "\":   \"", 
    TemplateBox[{"\"u\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{
           FractionBox["1", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {"0"}, {"0"}}, RowSpacings -> 1,
          ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"8c5e8c64-b6a3-4935-85b4-225a421bde29"]
}, Open  ]],

Cell[TextData[{
 "Similarly, we can also change the ID of the tensor using the ",
 StyleBox["TChangeID", "Input"],
 " module:"
}], "Text",ExpressionUUID->"4aba88cc-ece8-4cb1-8a43-66e78d076742"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TChangeID"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"9ad8e60e-7b2e-4a2e-bd18-3ee20fbaa264"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeID[\\\", StyleBox[\\\"oldID\\\", Bold, Rule[StripOnInput, False]], \
\\\" \\\\[Rule] \\\", StyleBox[\\\"newID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] changes the ID of the tensor object \\\", StyleBox[\\\"oldID\\\
\", Bold, Rule[StripOnInput, False]], \\\" to \\\", StyleBox[\\\"newID\\\", \
Bold, Rule[StripOnInput, False]], \\\".\\\\nIf the tensor is a metric or a \
coordinate system, all currently defined tensors will be scanned, and any \
references to \\\", StyleBox[\\\"oldID\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be replaced with \\\", StyleBox[\\\"newID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeID[\\\", Style[\\\"oldID\\\", Bold], \\\" \
\\\\[Rule] \\\", Style[\\\"newID\\\", Bold], \\\"] changes the ID of the \
tensor object \\\", Style[\\\"oldID\\\", Bold], \\\" to \\\", Style[\\\"newID\
\\\", Bold], \\\".\\\\nIf the tensor is a metric or a coordinate system, all \
currently defined tensors will be scanned, and any references to \\\", Style[\
\\\"oldID\\\", Bold], \\\" will be replaced with \\\", Style[\\\"newID\\\", \
Bold], \\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TChangeID", "[", 
                    
                    RowBox[{
                    "OGRe`Private`oldID_String", "\[Rule]", 
                    "OGRe`Private`newID_String"}], "]"}], ":=", 
                    RowBox[{"TChangeID", "[", 
                    RowBox[{"OGRe`Private`oldID", ",", "OGRe`Private`newID"}],
                     "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TChangeID", "[", 
                    
                    RowBox[{
                    "OGRe`Private`oldID_String", ",", 
                    "OGRe`Private`newID_String"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`oldID", "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`newID", "]"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`oldID", "]"}]}], "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`RemoveTensorID", "[", "OGRe`Private`oldID", 
                    "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`this", "[", "\"Role\"", "]"}], 
                    "===", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Metric\"", "]"}], "===", "OGRe`Private`oldID"}], ",", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"#1", ",", "\"Metric\"", ",", 
                    "OGRe`Private`newID"}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`this", "[", "\"Role\"", "]"}], 
                    "===", "\"Coordinates\""}], ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`ChangeCoordinateID", "[", 
                    
                    RowBox[{"#1", ",", "OGRe`Private`oldID", ",", 
                    "OGRe`Private`newID"}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], ";"}],
                     ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TChangeID\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeID[\\\", StyleBox[\\\"oldID\\\", Bold, Rule[StripOnInput, False]], \
\\\" \\\\[Rule] \\\", StyleBox[\\\"newID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] changes the ID of the tensor object \\\", StyleBox[\\\"oldID\\\
\", Bold, Rule[StripOnInput, False]], \\\" to \\\", StyleBox[\\\"newID\\\", \
Bold, Rule[StripOnInput, False]], \\\".\\\\nIf the tensor is a metric or a \
coordinate system, all currently defined tensors will be scanned, and any \
references to \\\", StyleBox[\\\"oldID\\\", Bold, Rule[StripOnInput, False]], \
\\\" will be replaced with \\\", StyleBox[\\\"newID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeID[\\\", Style[\\\"oldID\\\", Bold], \\\" \
\\\\[Rule] \\\", Style[\\\"newID\\\", Bold], \\\"] changes the ID of the \
tensor object \\\", Style[\\\"oldID\\\", Bold], \\\" to \\\", Style[\\\"newID\
\\\", Bold], \\\".\\\\nIf the tensor is a metric or a coordinate system, all \
currently defined tensors will be scanned, and any references to \\\", Style[\
\\\"oldID\\\", Bold], \\\" will be replaced with \\\", Style[\\\"newID\\\", \
Bold], \\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TChangeID[\", \
StyleBox[\"oldID\", Bold, Rule[StripOnInput, False]], \" \\[Rule] \", \
StyleBox[\"newID\", Bold, Rule[StripOnInput, False]], \"] changes the ID of \
the tensor object \", StyleBox[\"oldID\", Bold, Rule[StripOnInput, False]], \
\" to \", StyleBox[\"newID\", Bold, Rule[StripOnInput, False]], \".\\nIf the \
tensor is a metric or a coordinate system, all currently defined tensors will \
be scanned, and any references to \", StyleBox[\"oldID\", Bold, \
Rule[StripOnInput, False]], \" will be replaced with \", StyleBox[\"newID\", \
Bold, Rule[StripOnInput, False]], \".\"}]], TextCell[Row[List[\"TChangeID[\", \
Style[\"oldID\", Bold], \" \\[Rule] \", Style[\"newID\", Bold], \"] changes \
the ID of the tensor object \", Style[\"oldID\", Bold], \" to \", \
Style[\"newID\", Bold], \".\\nIf the tensor is a metric or a coordinate \
system, all currently defined tensors will be scanned, and any references to \
\", Style[\"oldID\", Bold], \" will be replaced with \", Style[\"newID\", \
Bold], \".\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TChangeID, {OGRe`TChangeID[Pattern[OGRe`Private`oldID, 
           Blank[String]] -> Pattern[OGRe`Private`newID, 
           Blank[String]]] :> 
       OGRe`TChangeID[OGRe`Private`oldID, OGRe`Private`newID], OGRe`TChangeID[
         Pattern[OGRe`Private`oldID, 
          Blank[String]], 
         Pattern[OGRe`Private`newID, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`oldID]; 
        OGRe`Private`CheckIfOverwriting[OGRe`Private`newID]; 
        OGRe`Private`SetTensorID[OGRe`Private`newID, 
          OGRe`Private`TensorData[OGRe`Private`oldID]]; 
        OGRe`Private`RemoveTensorID[OGRe`Private`oldID]; 
        If[OGRe`Private`this["Role"] === "Metric", 
          Scan[If[OGRe`Private`TensorData[#]["Metric"] === OGRe`Private`oldID, 
             OGRe`Private`ChangeTensorKey[#, "Metric", OGRe`Private`newID]]& , 
            Keys[OGRe`Private`TensorData]]; Null]; 
        If[OGRe`Private`this["Role"] === "Coordinates", 
          Scan[OGRe`Private`ChangeCoordinateID[#, OGRe`Private`oldID, 
             OGRe`Private`newID]& , 
            Keys[OGRe`Private`TensorData]]; Null]; Return[OGRe`Private`newID]; 
        Null)}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> 
    None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "OGRe`TChangeID"|>, 
   False]]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"23ae6640-8a25-4ec4-bd0e-08d49873e3a5"]
}, Open  ]],

Cell[TextData[{
 "For example, let us change the ID of the 4-velocity tensor from ",
 StyleBox["\[OpenCurlyDoubleQuote]FourVelocity\[CloseCurlyDoubleQuote]", 
  "Input"],
 " to ",
 StyleBox["\[OpenCurlyDoubleQuote]4-Velocity\[CloseCurlyDoubleQuote]", 
  "Input"],
 ":"
}], "Text",ExpressionUUID->"fe588edb-defd-45e6-847c-3842629639c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TChangeID", "[", 
  RowBox[{"\"\<FourVelocity\>\"", "\[Rule]", "\"\<4-Velocity\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"b09d8624-4f55-4fa4-9451-85144a1d8a9a"],

Cell[BoxData["\<\"4-Velocity\"\>"], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"018c09c8-c2fb-4933-8b83-731f633b0734"]
}, Open  ]],

Cell["\<\
The old ID no longer represents any tensor object, so we get an error if we \
try using it:\
\>", "Text",ExpressionUUID->"ec162c85-35d2-4a8e-afdb-44db0db2b811"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<FourVelocity\>\"", "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"3f87188e-f5ff-4863-8350-2bea379e521d"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "ErrorDoesNotExist", 
   "\"The tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"FourVelocity\\\\\\\"\\\"}]\\)\\\" does not \
exist.\"", 2, 52, 2, 27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[52]:=",ExpressionUUID->"9631887c-5609-437b-b248-50ef76f97f63"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"3d14759b-6693-4fc3-881a-6abccb4bd00f"]
}, Open  ]],

Cell[TextData[{
 "Note that this error is associated with the symbol ",
 StyleBox["TMessage", "Input"],
 ". Any message not associated with a specific OGRe module will be associated \
with this symbol."
}], "Text",ExpressionUUID->"ab1192c7-30a4-49f8-80f0-f230116f6e3b"],

Cell["We can access the tensor using the new ID:", \
"Text",ExpressionUUID->"92b87d86-223f-4891-8c9e-7ad8da8cfa63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<4-Velocity\>\"", "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"8a849390-fb7d-4161-baa9-7e1aa155d5f1"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"4-Velocity\"", "\":   \"", 
    TemplateBox[{"\"u\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{
           FractionBox["1", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {"0"}, {"0"}}, RowSpacings -> 1,
          ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"bbc9e2cb-1713-4b81-aba5-b92a013e12d7"]
}, Open  ]],

Cell[TextData[{
 "Note that when we define a tensor using a metric and a coordinate system, \
OGRe doesn\[CloseCurlyQuote]t store the actual metric components or \
coordinates inside the tensor object - it only stores ",
 StyleBox["references",
  FontWeight->"Bold"],
 " to the relevant objects, using their IDs. This both improves performance \
and allows us to modify the metric or coordinates later without having to \
redefine all the tensors derived from them. For this reason, if the tensor to \
be renamed represents a metric or a coordinate system, OGRe will \
automatically update the references in the definitions of all of the tensors \
that have been defined so far in the session using that metric or coordinate \
system. This guarantees that there are never any broken references."
}], "Text",ExpressionUUID->"5cbe6c04-6e89-4291-a600-891e57fc84ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Deleting and overwriting tensors", \
"Subsection",ExpressionUUID->"5962a982-7eee-4c16-8d76-d7baeb3160fc"],

Cell[TextData[{
 "If we want to delete a tensor we have created, we can use the ",
 StyleBox["TDelete", "Input"],
 " module:"
}], "Text",ExpressionUUID->"1932f4e4-70c8-4ea5-b335-79559d99ebb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TDelete"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"1d6e2cfb-23c6-4f23-9dfa-831555b3e55f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TDelete[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
permanently deletes the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\". If the tensor is a metric or coordinate \
system, it cannot be deleted unless all tensors referring to it have been \
deleted first.\\\"}]], TextCell[Row[List[\\\"TDelete[\\\", Style[\\\"ID\\\", \
Bold], \\\"] permanently deletes the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\". If the tensor is a metric or coordinate system, it cannot be \
deleted unless all tensors referring to it have been deleted \
first.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TDelete", "[", "OGRe`Private`ID_String", "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", "\"Metric\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Metric\"", "]"}], "===", "OGRe`Private`ID"}], "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`ID"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TDelete", "::", "ErrorMetric"}], "MessageName"], 
                    ",", "OGRe`Private`ID", ",", "#1"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", 
                    "\"Coordinates\""}], ",", 
                    RowBox[{
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"DefaultCoords\"", "]"}], "===", "OGRe`Private`ID"}], 
                    "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`ID"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TDelete", "::", "ErrorCoords"}], "MessageName"], 
                    ",", "OGRe`Private`ID", ",", "#1"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";"}]}], "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`RemoveTensorID", "[", "OGRe`Private`ID", 
                    "]"}], ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TDelete\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TDelete[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
permanently deletes the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\". If the tensor is a metric or coordinate \
system, it cannot be deleted unless all tensors referring to it have been \
deleted first.\\\"}]], TextCell[Row[List[\\\"TDelete[\\\", Style[\\\"ID\\\", \
Bold], \\\"] permanently deletes the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\". If the tensor is a metric or coordinate system, it cannot be \
deleted unless all tensors referring to it have been deleted \
first.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TDelete[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] permanently deletes the tensor object \
\", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \". If the tensor is a \
metric or coordinate system, it cannot be deleted unless all tensors \
referring to it have been deleted first.\"}]], \
TextCell[Row[List[\"TDelete[\", Style[\"ID\", Bold], \"] permanently deletes \
the tensor object \", Style[\"ID\", Bold], \". If the tensor is a metric or \
coordinate system, it cannot be deleted unless all tensors referring to it \
have been deleted first.\"]]]]\)", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TDelete, {OGRe`TDelete[
         Pattern[OGRe`Private`ID, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
        If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Metric", 
          Scan[If[
             And[
             OGRe`Private`TensorData[#]["Metric"] === OGRe`Private`ID, # =!= 
              OGRe`Private`ID], Message[
               MessageName[OGRe`TDelete, "ErrorMetric"], OGRe`Private`ID, #]; 
             Abort[]; Null]& , 
            Keys[OGRe`Private`TensorData]]; Null]; 
        If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Coordinates",
           Scan[If[
             And[
             OGRe`Private`TensorData[#]["DefaultCoords"] === 
              OGRe`Private`ID, # =!= OGRe`Private`ID], Message[
               MessageName[OGRe`TDelete, "ErrorCoords"], OGRe`Private`ID, #]; 
             Abort[]; Null]& , 
            Keys[OGRe`Private`TensorData]]; Null]; 
        OGRe`Private`RemoveTensorID[OGRe`Private`ID]; Null)}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TDelete"|>, False]]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"b54482db-6900-4d20-b6ca-4d3669365025"]
}, Open  ]],

Cell[TextData[{
 "To prevent breaking references, ",
 StyleBox["TDelete", "Input"],
 " will not delete a tensor object representing a metric or coordinate system \
if it is referred to by any other tensor. For example, if we try to delete \
the coordinate system ",
 StyleBox["\[OpenCurlyDoubleQuote]Cartesian\[CloseCurlyDoubleQuote]", "Input"],
 ", we will get an error message, since it is used as the default coordinate \
system for ",
 StyleBox["\[OpenCurlyDoubleQuote]Minkowski\[CloseCurlyDoubleQuote]", "Input"],
 " (among others):"
}], "Text",ExpressionUUID->"8e0aa98e-4d40-4382-a9f8-6ae0be7bc091"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TDelete", "[", "\"\<Cartesian\>\"", "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"23af950e-407d-4e3d-b7fe-34fcfc5876fd"],

Cell[BoxData[
 TemplateBox[{
  "TDelete", "ErrorCoords", 
   "\"The coordinate system \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Cartesian\\\\\\\"\\\"}]\\)\\\" cannot be \
deleted, as it is the default coordinate system of the tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Minkowski\\\\\\\"\\\"}]\\)\\\". To delete \
the coordinate system, first change the default coordinate system of \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Minkowski\\\\\\\"\\\"}]\\)\\\" and any other \
relevant tensors.\"", 2, 55, 3, 27069071951462284006, "Local", "OGRe`TDelete"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[55]:=",ExpressionUUID->"a67ba9f5-b362-4746-bde3-cbc8c23bad3b"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"407bb151-0b5e-4e08-bc72-595053b5aa57"]
}, Open  ]],

Cell[TextData[{
 "Similarly, we cannot delete the metric ",
 StyleBox["\[OpenCurlyDoubleQuote]Minkowski\[CloseCurlyDoubleQuote]", "Input"],
 " since it was used to define the tensor ",
 StyleBox["\[OpenCurlyDoubleQuote]PerfectFluid\[CloseCurlyDoubleQuote]", 
  "Input"],
 " (among others):"
}], "Text",ExpressionUUID->"574de4bc-adb9-4d8a-b4c0-18496212b137"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TDelete", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"b430013f-e359-411e-a696-20555654cf35"],

Cell[BoxData[
 TemplateBox[{
  "TDelete", "ErrorMetric", 
   "\"The metric \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Minkowski\\\\\\\"\\\"}]\\)\\\" cannot be \
deleted, as it has been used to define the tensor \\\"\\!\\(\\*RowBox[{\\\"\\\
\\\\\"PerfectFluid\\\\\\\"\\\"}]\\)\\\". To delete the metric, first delete \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"PerfectFluid\\\\\\\"\\\"}]\\)\\\" and any \
other tensors defined using this metric.\"", 2, 56, 4, 27069071951462284006, 
   "Local", "OGRe`TDelete"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[56]:=",ExpressionUUID->"120ecb0e-d322-41bc-a2eb-fb8525a8ee19"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"56255eff-a01b-438e-a3e4-2b121d68fa50"]
}, Open  ]],

Cell[TextData[{
 "There is no module to change the components of a tensor after it has \
already been defined, as this may break class invariants (in other words, \
introduce inconsistencies in the data). Instead, you must create a new tensor \
with the same ID using ",
 StyleBox["TNewTensor", "Input"],
 ". By default, OGRe does not allow overwriting tensors, to prevent loss of \
data:"
}], "Text",ExpressionUUID->"8c14b054-7b78-4dd0-8f2b-41430b83c5eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewTensor", "[", 
  RowBox[{
  "\"\<4-Velocity\>\"", ",", "\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"", 
   ",", 
   RowBox[{"{", "1", "}"}], ",", 
   FractionBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "v", ",", "0", ",", "0"}], "}"}], 
    SqrtBox[
     RowBox[{"1", "-", 
      SuperscriptBox["v", "2"]}]]]}], "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"ec971a04-3c25-4f61-92eb-c0c3a444202d"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "WarningOverwrite", 
   "\"Overwriting the tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"4-Velocity\\\\\\\"\\\"}]\\)\\\".\"", 2, 57, 
   5, 27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[57]:=",ExpressionUUID->"5a7a3444-da11-4c76-819b-1b52bcfcb744"],

Cell[BoxData["\<\"4-Velocity\"\>"], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"b7154098-b7b0-4cae-b5ba-9358b01dfc18"]
}, Open  ]],

Cell[TextData[{
 "Users who want to be able to create new tensors with the same ID as an \
existing tensor without deleting the old tensor first, and are confident that \
they will not accidentally lose any data by doing so, may enable overwriting \
tensors using ",
 StyleBox["TSetAllowOverwrite", "Input"],
 ":"
}], "Text",ExpressionUUID->"e1069722-ecf8-40d1-a044-eceed383011e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetAllowOverwrite"}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"898320ff-2708-428b-8219-d75a783b0482"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAllowOverwrite[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] allows overwriting tensors. If the user creates a new tensor \
with the same ID as an existing tensor, the latter will be overwritten. Note \
that this can result in loss of data. TSetAllowOverwrite[\\\", \
StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, False]], \\\"] disallows \
overwriting, which is the default setting. TSetAllowOverwrite[] returns the \
current setting. Note that this setting is persistent between \
sessions.\\\"}]], TextCell[Row[List[\\\"TSetAllowOverwrite[\\\", \
Style[\\\"True\\\", Bold], \\\"] allows overwriting tensors. If the user \
creates a new tensor with the same ID as an existing tensor, the latter will \
be overwritten. Note that this can result in loss of data. \
TSetAllowOverwrite[\\\", Style[\\\"False\\\", Bold], \\\"] disallows \
overwriting, which is the default setting. TSetAllowOverwrite[] returns the \
current setting. Note that this setting is persistent between \
sessions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetAllowOverwrite", "[", "]"}], ":=", 
                    
                    RowBox[{
                    "OGRe`Private`OGReGlobalOptions", "[", 
                    "\"AllowOverwrite\"", "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TSetAllowOverwrite", "[", 
                    RowBox[{"OGRe`Private`bool_", "?", "BooleanQ"}], "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`OGReGlobalOptions", "]"}],
                     ";", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGReGlobalOptions", "[", 
                    "\"AllowOverwrite\"", "]"}], "=", "OGRe`Private`bool"}], 
                    ";", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TSetAllowOverwrite", "::", "Notify"}], 
                    "MessageName"], ",", 
                    RowBox[{"If", "[", 
                    
                    RowBox[{"OGRe`Private`bool", ",", "\"on\"", ",", 
                    "\"off\""}], "]"}]}], "]"}], ";", 
                    RowBox[{
                    
                    RowBox[{"LocalSymbol", "[", "\"OGReGlobalOptions\"", 
                    "]"}], "=", "OGRe`Private`OGReGlobalOptions"}], ";", 
                    
                    RowBox[{
                    "Protect", "[", "OGRe`Private`OGReGlobalOptions", "]"}], 
                    ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetAllowOverwrite\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAllowOverwrite[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] allows overwriting tensors. If the user creates a new tensor \
with the same ID as an existing tensor, the latter will be overwritten. Note \
that this can result in loss of data. TSetAllowOverwrite[\\\", \
StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, False]], \\\"] disallows \
overwriting, which is the default setting. TSetAllowOverwrite[] returns the \
current setting. Note that this setting is persistent between \
sessions.\\\"}]], TextCell[Row[List[\\\"TSetAllowOverwrite[\\\", \
Style[\\\"True\\\", Bold], \\\"] allows overwriting tensors. If the user \
creates a new tensor with the same ID as an existing tensor, the latter will \
be overwritten. Note that this can result in loss of data. \
TSetAllowOverwrite[\\\", Style[\\\"False\\\", Bold], \\\"] disallows \
overwriting, which is the default setting. TSetAllowOverwrite[] returns the \
current setting. Note that this setting is persistent between \
sessions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetAllowOverwrite[\", \
StyleBox[\"True\", Bold, Rule[StripOnInput, False]], \"] allows overwriting \
tensors. If the user creates a new tensor with the same ID as an existing \
tensor, the latter will be overwritten. Note that this can result in loss of \
data. TSetAllowOverwrite[\", StyleBox[\"False\", Bold, Rule[StripOnInput, \
False]], \"] disallows overwriting, which is the default setting. \
TSetAllowOverwrite[] returns the current setting. Note that this setting is \
persistent between sessions.\"}]], TextCell[Row[List[\"TSetAllowOverwrite[\", \
Style[\"True\", Bold], \"] allows overwriting tensors. If the user creates a \
new tensor with the same ID as an existing tensor, the latter will be \
overwritten. Note that this can result in loss of data. \
TSetAllowOverwrite[\", Style[\"False\", Bold], \"] disallows overwriting, \
which is the default setting. TSetAllowOverwrite[] returns the current \
setting. Note that this setting is persistent between sessions.\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetAllowOverwrite, {
      OGRe`TSetAllowOverwrite[] :> 
       OGRe`Private`OGReGlobalOptions["AllowOverwrite"], 
       OGRe`TSetAllowOverwrite[
         PatternTest[
          Pattern[OGRe`Private`bool, 
           Blank[]], BooleanQ]] :> (Unprotect[OGRe`Private`OGReGlobalOptions]; 
        OGRe`Private`OGReGlobalOptions["AllowOverwrite"] = OGRe`Private`bool; 
        Message[
          MessageName[OGRe`TSetAllowOverwrite, "Notify"], 
          If[OGRe`Private`bool, "on", "off"]]; 
        LocalSymbol["OGReGlobalOptions"] = OGRe`Private`OGReGlobalOptions; 
        Protect[OGRe`Private`OGReGlobalOptions]; Null)}], "SubValues" -> None,
     "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TSetAllowOverwrite"|>, False]]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"042cd4a6-21b3-4173-a3f8-f01c8d0a58c3"]
}, Open  ]],

Cell[TextData[{
 "First let us save the current state of ",
 StyleBox["TSetAllowOverwrite", "Input"],
 ":"
}], "Text",ExpressionUUID->"c721cb83-c6e1-4a26-9dd5-d9c15e363e38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"currentOverwrite", "=", 
  RowBox[{"TSetAllowOverwrite", "[", "]"}]}]], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"54b27df0-abb4-47a3-beaa-713df6702f27"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"bcafa41c-861c-4084-8ba8-d5b7265fe0d7"]
}, Open  ]],

Cell["Let us now turn it on:", \
"Text",ExpressionUUID->"5eaf55fa-4ba7-4977-913b-952e926aa7c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetAllowOverwrite", "[", "True", "]"}]], "Input",
 CellLabel->"In[60]:=",ExpressionUUID->"566b1e3c-4fda-49b8-b7d8-e92e6192fb14"],

Cell[BoxData[
 TemplateBox[{
  "TSetAllowOverwrite", "Notify", 
   "\"Overwriting tensors turned \
\\!\\(\\*RowBox[{\\\"\\\\\\\"on\\\\\\\"\\\"}]\\).\"", 2, 60, 6, 
   27069071951462284006, "Local", "OGRe`TSetAllowOverwrite"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[60]:=",ExpressionUUID->"4d1db06a-7917-424f-964a-4f0272854b5d"]
}, Open  ]],

Cell["\<\
We can now overwrite the tensor \[OpenCurlyDoubleQuote]4-Velocity\
\[CloseCurlyDoubleQuote] by creating a new tensor with the same ID:\
\>", "Text",ExpressionUUID->"80ae400f-2519-49ff-bc07-03d546f0c3e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TNewTensor", "[", 
  RowBox[{
  "\"\<4-Velocity\>\"", ",", "\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"", 
   ",", 
   RowBox[{"{", "1", "}"}], ",", 
   FractionBox[
    RowBox[{"{", 
     RowBox[{"1", ",", "v", ",", "0", ",", "0"}], "}"}], 
    SqrtBox[
     RowBox[{"1", "-", 
      SuperscriptBox["v", "2"]}]]]}], "]"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"9516d716-69e4-43cc-b973-d453c0e2a2fa"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "WarningOverwrite", 
   "\"Overwriting the tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"4-Velocity\\\\\\\"\\\"}]\\)\\\".\"", 2, 61, 
   7, 27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"fa23e6eb-7fc3-47f4-9e03-6e4d83b69846"],

Cell[BoxData["\<\"4-Velocity\"\>"], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"5c189afe-8357-4e14-b0ce-791b5197a784"]
}, Open  ]],

Cell[TextData[{
 "Like any other message, the message warning us that we are overwriting a \
tensor can be turned off using ",
 StyleBox["Off", "Input"],
 ". In this case, the command to turn it if would be ",
 StyleBox["Off[TMessage::WarningOverwrite]", "Input"],
 "."
}], "Text",ExpressionUUID->"6695ab67-0178-477b-ae00-23f9fcccd986"],

Cell["\<\
Let us switch overwriting tensors back to the previous setting:\
\>", "Text",ExpressionUUID->"7c824642-84ee-4da4-982b-fe9ca7b4ba01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetAllowOverwrite", "[", "currentOverwrite", "]"}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"818c0750-6306-4928-ae0e-3209d4332b9d"],

Cell[BoxData[
 TemplateBox[{
  "TSetAllowOverwrite", "Notify", 
   "\"Overwriting tensors turned \
\\!\\(\\*RowBox[{\\\"\\\\\\\"on\\\\\\\"\\\"}]\\).\"", 2, 62, 8, 
   27069071951462284006, "Local", "OGRe`TSetAllowOverwrite"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[62]:=",ExpressionUUID->"62456396-f48e-484d-9f19-0279bdf2712b"]
}, Open  ]],

Cell["\<\
Note that this setting is persistent between sessions - if you turn \
overwriting on, then it will remain on permanently, even in other Mathematica \
sessions, until you turn it back off.\
\>", "Text",ExpressionUUID->"6de620ea-ee40-4580-b8f3-2ae652c2bd49"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Raising and lowering indices", \
"Subsection",ExpressionUUID->"71c56471-8c4f-47e4-8268-09eb058242d3"],

Cell[TextData[{
 "Raising and lowering indices is one of the most basic tensor operations. \
For example, if we have a vector represented with one upper index, ",
 Cell[BoxData[
  SuperscriptBox["v", "\[Nu]"]], "InlineFormula",
  CellChangeTimes->{{3.796081756754366*^9, 3.7960818157547245`*^9}, {
   3.796473591258548*^9, 3.7964735976903043`*^9}},ExpressionUUID->
  "a023ca4e-6560-4b8d-9f2a-0cad0c0943ae"],
 ", we can turn it into a covector, which is represented with one lower \
index, by ",
 StyleBox["contracting",
  FontWeight->"Bold"],
 " it with the metric:"
}], "Text",ExpressionUUID->"61bd353c-9411-4923-87e2-df6e05e539af"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["v", "\[Mu]"], "=", 
  RowBox[{
   SubscriptBox["g", "\[Mu]\[Nu]"], 
   RowBox[{
    SuperscriptBox["v", "\[Nu]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"e62275d9-0731-4138-befe-3dd0c023a5a1"],

Cell[TextData[{
 "This is called \[OpenCurlyDoubleQuote]lowering an index\
\[CloseCurlyDoubleQuote]. Here and in the rest of this documentation, we will \
be using the ",
 StyleBox["Einstein summation convention",
  FontWeight->"Bold"],
 ", where the same index repeated ",
 StyleBox["exactly twice",
  FontWeight->"Bold"],
 ", once as an upper index and once as a lower index, implies summation over \
that index. In this case, the implied summation is over ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Nu]", "\[Element]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "2", ",", "3"}], "}"}]}], TraditionalForm]],
  ExpressionUUID->"961392d9-2d79-4c2b-bccd-775edc89fbd0"],
 ":"
}], "Text",ExpressionUUID->"d5603399-52d9-4487-96a2-0a91ed653fb4"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["v", "\[Mu]"], "=", 
  RowBox[{
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"\[Nu]", "=", "0"}], "3"], 
    RowBox[{
     SubscriptBox["g", "\[Mu]\[Nu]"], 
     SuperscriptBox["v", "\[Nu]"]}]}], "=", 
   RowBox[{
    RowBox[{
     SubscriptBox["g", "\[Mu]0"], 
     SuperscriptBox["v", "0"]}], "+", 
    RowBox[{
     SubscriptBox["g", "\[Mu]1"], 
     SuperscriptBox["v", "1"]}], "+", 
    RowBox[{
     SubscriptBox["g", "\[Mu]2"], 
     SuperscriptBox["v", "2"]}], "+", 
    RowBox[{
     SubscriptBox["g", "\[Mu]3"], 
     RowBox[{
      SuperscriptBox["v", "3"], 
      "."}]}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"3bb0871a-b5f0-47b8-912c-b9086b05f571"],

Cell[TextData[{
 "Such a sum over an index is called a ",
 StyleBox["contraction",
  FontWeight->"Bold"],
 ", and it is a generalization of the inner product, as we will describe in \
more details below. Conversely, if we have a covector ",
 Cell[BoxData[
  SubscriptBox["w", "\[Mu]"]], "InlineFormula",
  CellChangeTimes->{{3.796502465338701*^9, 3.796502471738274*^9}},
  ExpressionUUID->"0b33288c-3854-4f1b-9a7b-c0af1aaff2b9"],
 ", we can raise its index by contracting it with the inverse metric:"
}], "Text",ExpressionUUID->"ebe2c6fe-b90c-4c0d-9de7-8d9300d18208"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["w", "\[Mu]"], "=", 
  RowBox[{
   SuperscriptBox["g", "\[Mu]\[Nu]"], 
   RowBox[{
    SubscriptBox["w", "\[Nu]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"c31b9aab-956a-431d-b009-3ecb608817d0"],

Cell[TextData[{
 "This works the same for indices of higher-rank tensors. For example, if we \
have a tensor of rank 2 represented with two upper indices, ",
 Cell[BoxData[
  SuperscriptBox["T", "\[Mu]\[Lambda]"]], "InlineFormula",
  CellChangeTimes->{{3.796502493952751*^9, 3.796502524593952*^9}, {
   3.796502554986002*^9, 3.7965025774681883`*^9}},ExpressionUUID->
  "2ba1a676-4f3b-467d-99a9-c4f8c369da53"],
 ", we can lower either one or both of its indices:"
}], "Text",ExpressionUUID->"9dd75346-fe42-47f0-8395-b8122e38e834"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubsuperscriptBox["T", 
    RowBox[{"  ", "\[Nu]"}], "\[Mu]"], "=", 
   RowBox[{
    SubscriptBox["g", "\[Nu]\[Lambda]"], 
    SuperscriptBox["T", "\[Mu]\[Lambda]"]}]}], ",", " ", 
  RowBox[{
   SubscriptBox["T", "\[Mu]\[Nu]"], "=", 
   RowBox[{
    SubscriptBox["g", "\[Mu]\[Rho]"], 
    SubscriptBox["g", "\[Nu]\[Lambda]"], 
    RowBox[{
     SuperscriptBox["T", "\[Rho]\[Lambda]"], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"ef534743-492d-421a-9fad-ebbb3a5eefd7"],

Cell[TextData[{
 "In OGRe, since tensor objects are ",
 StyleBox["abstract tensors",
  FontWeight->"Bold"],
 ", independent of any specific index configuration, ",
 StyleBox["there is no notion of raising or lowering the indices of a tensor \
object",
  FontWeight->"Bold"],
 ". Instead, one simply request to display the components of the tensor with \
the desired index configuration. This works with both the ",
 StyleBox["TShow", "Input"],
 " and ",
 StyleBox["TList", "Input"],
 " modules, by simply adding as a second argument the list of indices in the \
format ",
 StyleBox["{\[PlusMinus]1,\[PlusMinus]1,...}", "Input"],
 ", as when we created a new tensor."
}], "Text",ExpressionUUID->"bbf3a2bf-d15c-432c-8b39-8173afc7d5fa"],

Cell[TextData[{
 "As an example, let us show the vector ",
 StyleBox["\[CloseCurlyDoubleQuote]4-Velocity\[CloseCurlyDoubleQuote]", 
  "Input"],
 " with a lower index, that is, with index configuration ",
 StyleBox["{-1}", "Input"],
 ":"
}], "Text",ExpressionUUID->"cf5e1dac-1225-4c0f-8a48-f8813f24adb6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<4-Velocity\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"a57d25c2-b037-4c40-aeca-5af36591cd58"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"4-Velocity\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{
           RowBox[{"-", 
             FractionBox["1", 
              SqrtBox[
               RowBox[{"1", "-", 
                 SuperscriptBox["v", "2"]}]]]}]}, {
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}, {"0"}, {"0"}}, RowSpacings -> 1,
          ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"4e06f295-7e2f-4874-bc04-61942e10a283"]
}, Open  ]],

Cell[TextData[{
 "OGRe automatically knows to use the Minkowski metric to lower the index, \
which means that a minus sign has been added to the first component, as \
expected. Similarly, let us lower just the ",
 StyleBox["second",
  FontWeight->"Bold"],
 " index on ",
 StyleBox["PerfectFluid", "Input"],
 ":"
}], "Text",ExpressionUUID->"5f643c27-733e-4f52-880d-35b38d6cd05e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"38e51a6e-e6a9-47d5-9a10-ab23c75abbd7"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"PerfectFluid\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", "\[Rho]"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                "\"x\""}, "RowDefault"], 
              TemplateBox[{"\"x\"", 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False], 
                "\"y\""}, "RowDefault"], 
              TemplateBox[{"\"y\"", 
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False], 
                "\"z\""}, "RowDefault"], 
              TemplateBox[{"\"z\"", 
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "p"}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"08a86e10-828d-4808-a665-8fef60002380"]
}, Open  ]],

Cell["\<\
The components of the representation of the metric with two upper indices are \
the components of the inverse metric, since\
\>", "Text",ExpressionUUID->"0b235b91-d0aa-40bc-a91f-32df2b20e5de"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["g", "\[Mu]\[Lambda]"], 
   SuperscriptBox["g", "\[Lambda]\[Nu]"]}], "=", 
  RowBox[{
   SubsuperscriptBox["\[Delta]", "\[Mu]", "\[Nu]"], 
   "."}]}]], \
"DisplayFormula",ExpressionUUID->"25393238-94f9-4892-b5dd-87e45ecde72f"],

Cell["\<\
Therefore, a quick way to show the components of the inverse metric is:\
\>", "Text",ExpressionUUID->"4d8f3507-c3ec-4fc2-8a2f-46bc76ba0a9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<Schwarzschild\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[65]:=",ExpressionUUID->"9670e989-e9b9-4324-bd17-67ba0eb6b557"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Schwarzschild\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"]}, 
     "Subsuperscript", SyntaxForm -> SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          FractionBox["r", 
           RowBox[{
             RowBox[{"2", " ", "M"}], "-", "r"}]], "0", "0", "0"}, {"0", 
          RowBox[{"1", "-", 
            FractionBox[
             RowBox[{"2", " ", "M"}], "r"]}], "0", "0"}, {"0", "0", 
          FractionBox["1", 
           SuperscriptBox["r", "2"]], "0"}, {"0", "0", "0", 
          FractionBox[
           SuperscriptBox[
            RowBox[{"Csc", "[", "\[Theta]", "]"}], "2"], 
           SuperscriptBox["r", "2"]]}}, RowSpacings -> 1, ColumnSpacings -> 1,
         RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]",
        ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"376de578-fc7a-4d3d-8d79-dceeb144ad54"]
}, Open  ]],

Cell["\<\
For the same reason, the metric with one upper and one lower index is just \
the identity matrix:\
\>", "Text",ExpressionUUID->"3d374ede-b11e-49cb-a2d6-325368cfcbcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<Schwarzschild\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"dc5c07f2-7322-4774-ac4e-1d7fff5903c3"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Schwarzschild\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"g\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"g\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"g\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"g\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "1"}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"09b02654-5b2f-4feb-be89-1024cd00ec8a"]
}, Open  ]],

Cell[TextData[{
 "As explained above, if the modules ",
 StyleBox["TShow", "Input"],
 " or ",
 StyleBox["TList", "Input"],
 " are called ",
 "without any",
 " arguments, the tensor is displayed in its ",
 StyleBox["default index configuration",
  FontWeight->"Bold"],
 ", which is the one first used to define the tensor. So the 4-velocity has \
one upper index by default, and the stress tensor has two upper indices by \
default, because that is how we initially defined them. However, the default \
indices can be changed using the module ",
 StyleBox["TChangeDefaultIndices", "Input"],
 ":"
}], "Text",ExpressionUUID->"13baba13-a9d2-4927-ac31-fe46c364b838"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TChangeDefaultIndices"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"f53dd652-edcc-49b6-ab24-4766eb081d93"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeDefaultIndices[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\"] changes the default index configuration of the tensor object \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" to \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\".\\\\n\\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" must be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\"}]], \
TextCell[Row[List[\\\"TChangeDefaultIndices[\\\", Style[\\\"ID\\\", Bold], \\\
\", \\\", Style[\\\"indices\\\", Bold], \\\"] changes the default index \
configuration of the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" to \
\\\", Style[\\\"indices\\\", Bold], \\\".\\\\n\\\", Style[\\\"indices\\\", \
Bold], \\\" must be a list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, \
...}, where +1 corresponds to an upper index and -1 corresponds to a lower \
index.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TChangeDefaultIndices", "[", 
                    
                    RowBox[{
                    "OGRe`Private`ID_String", ",", 
                    "OGRe`Private`indices_List"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", 
                    "\"Coordinates\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TChangeDefaultIndices", "::", "ErrorCoords"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", "\"Metric\""}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TChangeDefaultIndices", "::", "ErrorMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", 
                    "\"Christoffel\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TChangeDefaultIndices", "::", 
                    "ErrorChristoffel"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`CheckIndicesForm", "[", 
                    "OGRe`Private`indices", "]"}], ";", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    
                    RowBox[{"OGRe`Private`ID", ",", "OGRe`Private`indices", 
                    ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultCoords\"", "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`ID", ",", "\"DefaultIndices\"", ",",
                     "OGRe`Private`indices"}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`ID", "]"}], ";"}], 
                    ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TChangeDefaultIndices\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeDefaultIndices[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, \
False]], \\\"] changes the default index configuration of the tensor object \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" to \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\".\\\\n\\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" must be a \
list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 \
corresponds to an upper index and -1 corresponds to a lower index.\\\"}]], \
TextCell[Row[List[\\\"TChangeDefaultIndices[\\\", Style[\\\"ID\\\", Bold], \\\
\", \\\", Style[\\\"indices\\\", Bold], \\\"] changes the default index \
configuration of the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" to \
\\\", Style[\\\"indices\\\", Bold], \\\".\\\\n\\\", Style[\\\"indices\\\", \
Bold], \\\" must be a list of the form {\\\\[PlusMinus]1, \\\\[PlusMinus]1, \
...}, where +1 corresponds to an upper index and -1 corresponds to a lower \
index.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TChangeDefaultIndices[\", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"indices\
\", Bold, Rule[StripOnInput, False]], \"] changes the default index \
configuration of the tensor object \", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \" to \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \".\\n\", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \" must be a list of the form {\\[PlusMinus]1, \
\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\"}]], \
TextCell[Row[List[\"TChangeDefaultIndices[\", Style[\"ID\", Bold], \", \", \
Style[\"indices\", Bold], \"] changes the default index configuration of the \
tensor object \", Style[\"ID\", Bold], \" to \", Style[\"indices\", Bold], \
\".\\n\", Style[\"indices\", Bold], \" must be a list of the form \
{\\[PlusMinus]1, \\[PlusMinus]1, ...}, where +1 corresponds to an upper index \
and -1 corresponds to a lower index.\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TChangeDefaultIndices, {OGRe`TChangeDefaultIndices[
         Pattern[OGRe`Private`ID, 
          Blank[String]], 
         Pattern[OGRe`Private`indices, 
          Blank[List]]] :> (OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
        If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Coordinates",
           Message[
            MessageName[OGRe`TChangeDefaultIndices, "ErrorCoords"]]; Abort[]; 
          Null]; If[
         OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Metric", 
          Message[
            MessageName[OGRe`TChangeDefaultIndices, "ErrorMetric"]]; Abort[]; 
          Null]; If[
         OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Christoffel", 
          Message[
            MessageName[OGRe`TChangeDefaultIndices, "ErrorChristoffel"]]; 
          Abort[]; Null]; OGRe`Private`CheckIndicesForm[OGRe`Private`indices]; 
        OGRe`Private`AddRepresentation[OGRe`Private`ID, OGRe`Private`indices, 
          OGRe`Private`TensorData[OGRe`Private`ID]["DefaultCoords"]]; 
        OGRe`Private`ChangeTensorKey[
         OGRe`Private`ID, "DefaultIndices", OGRe`Private`indices]; 
        Return[OGRe`Private`ID]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TChangeDefaultIndices"|>, False]]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"6234b2f1-864c-4908-bcec-c293b5fdc498"]
}, Open  ]],

Cell["\<\
For example, let us change the default indices of the perfect fluid stress \
tensor to two lower indices:\
\>", "Text",ExpressionUUID->"903d5b96-c162-467c-900b-9e20688878e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TChangeDefaultIndices", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"23403521-2e95-4f5b-8209-c31ca63b2c2e"],

Cell[BoxData["\<\"PerfectFluid\"\>"], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"e7d5caf6-bf85-44c8-babe-45d36f926137"]
}, Open  ]],

Cell[TextData[{
 "Now, when we display the tensor using ",
 StyleBox["TShow", "Input"],
 " without any arguments, this is the index configuration that will be used:"
}], "Text",ExpressionUUID->"7a3759fd-209a-4ddf-84a7-29ce90755aa6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<PerfectFluid\>\"", "]"}]], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"dfd4023c-1655-48f4-8fdf-fe21c5ef8d8d"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluid\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"\[Rho]", "0", "0", "0"}, {"0", "p", "0", "0"}, {
         "0", "0", "p", "0"}, {"0", "0", "0", "p"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"806c45f0-8e68-42ea-8a2f-02117c6fb6f7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Coordinate transformations", \
"Subsection",ExpressionUUID->"c4ead008-ffb3-4ce6-a814-74ca4c9b4c8c"],

Cell[TextData[{
 "The components of any tensor may be transformed from one coordinate system ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", "\[Mu]"], "InlineFormula"], TraditionalForm]],
  ExpressionUUID->"418f8cd1-e636-4b03-accf-8e2d5b955a9d"],
 " to another coordinate system ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", 
     SuperscriptBox["\[Mu]", "\[Prime]"]], "InlineFormula"], 
   TraditionalForm]],ExpressionUUID->"4fbce3cc-e70f-431d-9873-fb2a0063d379"],
 " using the following prescription:"
}], "Text",ExpressionUUID->"12ce617c-9fda-41fc-bbf4-24998172aaf6"],

Cell[TextData[{
 "For every lower index ",
 StyleBox["\[Mu]", "InlineFormula"],
 ", add a factor of ",
 StyleBox[Cell[BoxData[
  RowBox[{"\[PartialD]", 
   SuperscriptBox["x", "\[Mu]"]}]], "InlineFormula",
  CellChangeTimes->{{3.7960557235636697`*^9, 3.796055809434673*^9}, {
   3.796073354341519*^9, 3.7960733733504252`*^9}, {3.7960734070531077`*^9, 
   3.796073424775813*^9}},ExpressionUUID->
  "8dc357b5-79bf-425c-b3b3-8323b4875618"], "InlineFormula"],
 StyleBox["/", "InlineFormula"],
 StyleBox[Cell[BoxData[
  RowBox[{"\[PartialD]", 
   SuperscriptBox["x", 
    SuperscriptBox["\[Mu]", "\[Prime]"]]}]], "InlineFormula",
  CellChangeTimes->{{3.7960557235636697`*^9, 3.796055809434673*^9}, {
   3.796073354341519*^9, 3.7960733733504252`*^9}, {3.7960734070531077`*^9, 
   3.796073424775813*^9}},ExpressionUUID->
  "d88b7697-11db-4454-8a66-44510ecaff76"], "InlineFormula"],
 " ",
 StyleBox["(i.e. the derivative of the old coordinates with respect to the \
new, or the ", "Text"],
 StyleBox["Jacobian", "Text",
  FontWeight->"Bold"],
 StyleBox[").", "Text"]
}], "Item",ExpressionUUID->"770287c5-9166-460a-bf08-1ad281706629"],

Cell[TextData[{
 "For every upper index ",
 StyleBox["\[Mu]", "InlineFormula"],
 ", add a factor of ",
 StyleBox[Cell[BoxData[
  RowBox[{"\[PartialD]", 
   SuperscriptBox["x", 
    SuperscriptBox["\[Mu]", "\[Prime]"]]}]], "InlineFormula",
  CellChangeTimes->{{3.7960557235636697`*^9, 3.796055809434673*^9}, {
   3.796073354341519*^9, 3.7960733733504252`*^9}, {3.7960734070531077`*^9, 
   3.796073424775813*^9}},ExpressionUUID->
  "b57a9d16-60a1-4ea5-9246-0720fb8386cb"], "InlineFormula"],
 StyleBox["/", "InlineFormula"],
 StyleBox[Cell[BoxData[
  RowBox[{"\[PartialD]", 
   SuperscriptBox["x", "\[Mu]"]}]], "InlineFormula",
  CellChangeTimes->{{3.7960557235636697`*^9, 3.796055809434673*^9}, {
   3.796073354341519*^9, 3.7960733733504252`*^9}, {3.7960734070531077`*^9, 
   3.796073424775813*^9}},ExpressionUUID->
  "3a8fb098-68ab-486e-b6dc-823e924d17b2"], "InlineFormula"],
 " ",
 StyleBox["(i.e. the derivative of the new coordinates with respect to the \
old, or the inverse of the Jacobian).", "Text"]
}], "Item",ExpressionUUID->"0ed8e867-0730-443c-8c36-b26d96a9d7aa"],

Cell[TextData[{
 "For example, given a tensor with components ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["T", "\[Alpha]\[Beta]"], "InlineFormula"], TraditionalForm]],
  ExpressionUUID->"808b6bdc-83f3-4127-aa35-59a1883c6977"],
 " in a coordinate system ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", "\[Mu]"], "InlineFormula"], TraditionalForm]],
  ExpressionUUID->"b907522b-e354-47b4-a13d-e550e5f9760a"],
 ", we can transform to components ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["T", 
     RowBox[{
      SuperscriptBox["\[Alpha]", "\[Prime]"], 
      SuperscriptBox["\[Beta]", "\[Prime]"]}]], "InlineFormula"], 
   TraditionalForm]],ExpressionUUID->"6fe59d2c-05bc-4724-a4a7-0a59525d2efe"],
 " in another coordinate system ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["x", 
     SuperscriptBox["\[Mu]", "\[Prime]"]], "InlineFormula"], 
   TraditionalForm]],ExpressionUUID->"391bb4ba-c871-44cc-9b8f-3a1461a8fabe"],
 " as follows:"
}], "Text",ExpressionUUID->"7a189c2e-98c5-457e-8299-56dae500f50a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["T", 
    RowBox[{
     SuperscriptBox["\[Alpha]", "\[Prime]"], 
     SuperscriptBox["\[Beta]", "\[Prime]"]}]], 
   RowBox[{"(", 
    SuperscriptBox["x", 
     SuperscriptBox["\[Mu]", "\[Prime]"]], ")"}]}], "=", 
  RowBox[{
   FractionBox[
    RowBox[{"\[PartialD]", 
     SuperscriptBox["x", "\[Alpha]"]}], 
    RowBox[{"\[PartialD]", 
     SuperscriptBox["x", 
      SuperscriptBox["\[Alpha]", "\[Prime]"]]}]], 
   FractionBox[
    RowBox[{"\[PartialD]", 
     SuperscriptBox["x", "\[Beta]"]}], 
    RowBox[{"\[PartialD]", 
     SuperscriptBox["x", 
      SuperscriptBox["\[Beta]", "\[Prime]"]]}]], 
   SubscriptBox["T", "\[Alpha]\[Beta]"], 
   RowBox[{
    RowBox[{"(", 
     SuperscriptBox["x", "\[Mu]"], ")"}], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"375075ae-90fe-4389-941e-664a9a4c9e74"],

Cell[TextData[{
 "For a general rank ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"p", ",", "q"}], ")"}], TraditionalForm]],ExpressionUUID->
  "9bb84af0-a8e7-4058-9264-40ea3d93bfc6"],
 " tensor with ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "9ad663e5-ca33-4326-ba03-2f09f4e134ea"],
 " upper indices ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Alpha]", "1"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["\[Alpha]", "p"]}], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"ad6590a4-1a9d-491a-bcd1-47763576e5a5"],
 " and ",
 Cell[BoxData[
  FormBox["q", TraditionalForm]],ExpressionUUID->
  "c46416e5-1015-4a86-8e15-37867f23c0ea"],
 " lower indices ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "1"], ",", "...", ",", 
    SubscriptBox["\[Beta]", "q"]}], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"c50f7f2e-77fc-482c-ad60-f8956d12f05d"],
 ", the transformation takes the form"
}], "Text",ExpressionUUID->"889aad62-744a-4af0-808a-7c8553ee8d0f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubsuperscriptBox["T", 
    RowBox[{
     SubsuperscriptBox["\[Beta]", "1", "\[Prime]"], 
     SubsuperscriptBox["\[CenterEllipsis]\[Beta]", "q", "\[Prime]"]}], 
    FormBox[
     RowBox[{
      SubsuperscriptBox["\[Alpha]", "1", "\[Prime]"], 
      SubsuperscriptBox["\[CenterEllipsis]\[Alpha]", "p", "\[Prime]"]}],
     TraditionalForm]], 
   RowBox[{"(", 
    SuperscriptBox["x", 
     SuperscriptBox["\[Mu]", "\[Prime]"]], ")"}]}], "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubsuperscriptBox["\[Alpha]", "1", "\[Prime]"]]}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubscriptBox["\[Alpha]", "1"]]}]], "\[CenterEllipsis]", 
     FractionBox[
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubsuperscriptBox["\[Alpha]", "p", "\[Prime]"]]}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubscriptBox["\[Alpha]", "p"]]}]]}], ")"}], 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubscriptBox["\[Beta]", "1"]]}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubsuperscriptBox["\[Beta]", "1", "\[Prime]"]]}]], 
     "\[CenterEllipsis]", 
     FractionBox[
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubscriptBox["\[Beta]", "q"]]}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", 
        SubsuperscriptBox["\[Beta]", "q", "\[Prime]"]]}]]}], ")"}], 
   SubsuperscriptBox["T", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Beta]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Alpha]", "p"]}]], 
   RowBox[{
    RowBox[{"(", 
     SuperscriptBox["x", "\[Mu]"], ")"}], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"2727399c-b090-4f8d-a3df-c39de53afb78"],

Cell[TextData[{
 "As a mnemonic for this formula, recall that two indices may only be \
contracted if one of them is an upper index and the other is a lower index. \
If an index is in the denominator of a derivative, then its role is reversed \
(upper \[LeftRightArrow] lower). Thus the old (",
 StyleBox["non-primed",
  IgnoreSpellCheck->True],
 ") and new (primed) indices can only be in places that allow properly \
contracting the Jacobian or inverse Jacobian with the tensor. For example, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Alpha]", "1"], TraditionalForm]],ExpressionUUID->
  "f9df20ae-6563-4c36-8c8b-bd867beed27c"],
 " is an upper index in ",
 Cell[BoxData[
  FormBox["T", TraditionalForm]],ExpressionUUID->
  "5043575f-6bed-4d9b-8468-7c56156d6618"],
 " and therefore must be contracted with a lower index. Thus, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PartialD]", 
    SuperscriptBox["x", 
     SubscriptBox["\[Alpha]", "1"]]}], TraditionalForm]],ExpressionUUID->
  "de664ad9-2429-4f55-9a85-75ca1580fef3"],
 " must be in the denominator, to lower its index and allow it to be \
contracted with the tensor."
}], "Text",ExpressionUUID->"2aa09c29-da66-4d9d-98b5-d144d56e72bc"],

Cell[TextData[{
 "As we saw above, OGRe automatically knows how to raise or lower indices as \
needed using the appropriate metric. Similarly, any operation that requires \
transforming to another coordinate system will preform the transformation \
automatically behind the scenes. However, for this to happen, OGRe needs to \
know the appropriate ",
 StyleBox["transformation rules",
  FontWeight->"Bold"],
 ". These are defined between the tensor objects representing the \
coordinates, which were generated using the module ",
 StyleBox["TNewCoordinates", "Input"],
 ". The rules for transforming from a source coordinate system to a target \
coordinate system are stored within the tensor object representing the \
source. This is done using the module ",
 StyleBox["TAddCoordTransformation", "Input"],
 ":"
}], "Text",ExpressionUUID->"8133c902-696e-42c6-a02e-a8b10b0770bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TAddCoordTransformation"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"b0384b1e-599d-4c91-a39d-b9eb4cb59522"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TAddCoordTransformation[\\\", StyleBox[\\\"sourceID\\\", Bold, \
Rule[StripOnInput, False]], \\\" \\\\[Rule] \\\", StyleBox[\\\"targetID\\\", \
Bold, Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"rules\\\", Bold, \
Rule[StripOnInput, False]], \\\"] adds a transformation from the coordinate \
system \\\", StyleBox[\\\"sourceID\\\", Bold, Rule[StripOnInput, False]], \
\\\" to the coordinate system \\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\n\\\", StyleBox[\\\"rules\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of transformation rules. For \
example, {x \\\\[Rule] r Sin[\\\\[Theta]] Cos[\\\\[Phi]], y \\\\[Rule] r Sin[\
\\\\[Theta]] Sin[\\\\[Phi]], z \\\\[Rule] r Cos[\\\\[Theta]]} is a \
transformation from Cartesian to spherical coordinates.\\\"}]], \
TextCell[Row[List[\\\"TAddCoordTransformation[\\\", Style[\\\"sourceID\\\", \
Bold], \\\" \\\\[Rule] \\\", Style[\\\"targetID\\\", Bold], \\\", \\\", \
Style[\\\"rules\\\", Bold], \\\"] adds a transformation from the coordinate \
system \\\", Style[\\\"sourceID\\\", Bold], \\\" to the coordinate system \
\\\", Style[\\\"targetID\\\", Bold], \\\".\\\\n\\\", Style[\\\"rules\\\", \
Bold], \\\" must be a list of transformation rules. For example, {x \
\\\\[Rule] r Sin[\\\\[Theta]] Cos[\\\\[Phi]], y \\\\[Rule] r Sin[\\\\[Theta]] \
Sin[\\\\[Phi]], z \\\\[Rule] r Cos[\\\\[Theta]]} is a transformation from \
Cartesian to spherical coordinates.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TAddCoordTransformation", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`sourceID_String", "\[Rule]", 
                    "OGRe`Private`targetID_String"}], ",", 
                    "OGRe`Private`rules_List"}], "]"}], ":=", 
                    RowBox[{"TAddCoordTransformation", "[", 
                    
                    RowBox[{
                    "OGRe`Private`sourceID", ",", "OGRe`Private`targetID", 
                    ",", "OGRe`Private`rules"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TAddCoordTransformation", "[", 
                    
                    RowBox[{
                    "OGRe`Private`sourceID_String", ",", 
                    "OGRe`Private`targetID_String", ",", 
                    "OGRe`Private`rules_List"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`allJacobians", ",", 
                    "OGRe`Private`ChristoffelJacobian", ",", 
                    "OGRe`Private`dim", ",", "OGRe`Private`i", ",", 
                    "OGRe`Private`inverseJacobian", ",", "OGRe`Private`j", 
                    ",", "OGRe`Private`jacobian", ",", "OGRe`Private`k", ",", 
                    "OGRe`Private`newCoordSymbols", ",", 
                    "OGRe`Private`oldCoordSymbols"}], "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`sourceID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{"OGRe`Private`rules", ",", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"_", "\[Rule]", "_"}]}], "]"}], "&"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TAddCoordTransformation", "::", 
                    "ErrorRulesForm"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`sourceID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`targetID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`sourceID", "===", 
                    "OGRe`Private`targetID"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TAddCoordTransformation", "::", 
                    "ErrorDifferentCoords"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`sourceID"}], 
                    "}"}], "]"}], "]"}], "\[NotEqual]", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`targetID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`targetID"}], 
                    "}"}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TAddCoordTransformation", "::", 
                    "ErrorNotSameDim"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], ",", 
                    "\"CoordTransformations\""}], "]"}], "&&", 
                    RowBox[{"AssociationQ", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", 
                    "\"CoordTransformations\"", "]"}], "]"}]}], ",", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`sourceID", ",", 
                    "\"CoordTransformations\"", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", 
                    "\"CoordTransformations\"", "]"}], ",", 
                    
                    RowBox[{"OGRe`Private`targetID", "\[Rule]", 
                    "OGRe`Private`rules"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`sourceID", ",", 
                    "\"CoordTransformations\"", ",", 
                    RowBox[{"Association", "[", 
                    
                    RowBox[{"OGRe`Private`targetID", "\[Rule]", 
                    "OGRe`Private`rules"}], "]"}]}], "]"}], ";"}]}], "]"}], 
                    ";", 
                    RowBox[{"OGRe`Private`oldCoordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`sourceID"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`newCoordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`targetID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`targetID"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`dim", "=", 
                    
                    RowBox[{"Length", "[", "OGRe`Private`oldCoordSymbols", 
                    "]"}]}], ";", 
                    RowBox[{"OGRe`Private`jacobian", "=", 
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`newCoordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`j", 
                    "\[RightDoubleBracket]"}]}]], 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`oldCoordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`i", 
                    "\[RightDoubleBracket]"}], "/.", "\[VeryThinSpace]", 
                    "OGRe`Private`rules"}], ")"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`i", ",", "1", ",", 
                    "OGRe`Private`dim"}], "}"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`j", ",", "1", ",", 
                    "OGRe`Private`dim"}], "}"}]}], "]"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`inverseJacobian", "=", 
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    RowBox[{"Inverse", "[", "OGRe`Private`jacobian", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChristoffelJacobian", "=", 
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`newCoordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`j", 
                    "\[RightDoubleBracket]"}], ",", 
                    
                    RowBox[{"OGRe`Private`newCoordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`k", 
                    "\[RightDoubleBracket]"}]}]], 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`oldCoordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`i", 
                    "\[RightDoubleBracket]"}], "/.", "\[VeryThinSpace]", 
                    "OGRe`Private`rules"}], ")"}]}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`i", ",", "1", ",", 
                    "OGRe`Private`dim"}], "}"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`j", ",", "1", ",", 
                    "OGRe`Private`dim"}], "}"}], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`k", ",", "1", ",", 
                    "OGRe`Private`dim"}], "}"}]}], "]"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`allJacobians", "=", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\"Jacobian\"", "\[Rule]", 
                    "OGRe`Private`jacobian"}], ",", 
                    
                    RowBox[{"\"InverseJacobian\"", "\[Rule]", 
                    "OGRe`Private`inverseJacobian"}], ",", 
                    
                    RowBox[{"\"ChristoffelJacobian\"", "\[Rule]", 
                    "OGRe`Private`ChristoffelJacobian"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], ",", "\"Jacobians\""}], 
                    "]"}], "&&", 
                    RowBox[{"AssociationQ", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", "\"Jacobians\"", 
                    "]"}], "]"}]}], ",", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`sourceID", ",", "\"Jacobians\"", 
                    ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`sourceID", "]"}], "[", "\"Jacobians\"", 
                    "]"}], ",", 
                    
                    RowBox[{"OGRe`Private`targetID", "\[Rule]", 
                    "OGRe`Private`allJacobians"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`sourceID", ",", "\"Jacobians\"", 
                    ",", 
                    RowBox[{"Association", "[", 
                    
                    RowBox[{"OGRe`Private`targetID", "\[Rule]", 
                    "OGRe`Private`allJacobians"}], "]"}]}], "]"}], ";"}]}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`sourceID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TAddCoordTransformation\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TAddCoordTransformation[\\\", StyleBox[\\\"sourceID\\\", Bold, \
Rule[StripOnInput, False]], \\\" \\\\[Rule] \\\", StyleBox[\\\"targetID\\\", \
Bold, Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"rules\\\", Bold, \
Rule[StripOnInput, False]], \\\"] adds a transformation from the coordinate \
system \\\", StyleBox[\\\"sourceID\\\", Bold, Rule[StripOnInput, False]], \
\\\" to the coordinate system \\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\\n\\\", StyleBox[\\\"rules\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of transformation rules. For \
example, {x \\\\[Rule] r Sin[\\\\[Theta]] Cos[\\\\[Phi]], y \\\\[Rule] r Sin[\
\\\\[Theta]] Sin[\\\\[Phi]], z \\\\[Rule] r Cos[\\\\[Theta]]} is a \
transformation from Cartesian to spherical coordinates.\\\"}]], \
TextCell[Row[List[\\\"TAddCoordTransformation[\\\", Style[\\\"sourceID\\\", \
Bold], \\\" \\\\[Rule] \\\", Style[\\\"targetID\\\", Bold], \\\", \\\", \
Style[\\\"rules\\\", Bold], \\\"] adds a transformation from the coordinate \
system \\\", Style[\\\"sourceID\\\", Bold], \\\" to the coordinate system \
\\\", Style[\\\"targetID\\\", Bold], \\\".\\\\n\\\", Style[\\\"rules\\\", \
Bold], \\\" must be a list of transformation rules. For example, {x \
\\\\[Rule] r Sin[\\\\[Theta]] Cos[\\\\[Phi]], y \\\\[Rule] r Sin[\\\\[Theta]] \
Sin[\\\\[Phi]], z \\\\[Rule] r Cos[\\\\[Theta]]} is a transformation from \
Cartesian to spherical coordinates.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TAddCoordTransformation[\", \
StyleBox[\"sourceID\", Bold, Rule[StripOnInput, False]], \" \\[Rule] \", \
StyleBox[\"targetID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"rules\", Bold, Rule[StripOnInput, False]], \"] adds a \
transformation from the coordinate system \", StyleBox[\"sourceID\", Bold, \
Rule[StripOnInput, False]], \" to the coordinate system \", \
StyleBox[\"targetID\", Bold, Rule[StripOnInput, False]], \".\\n\", \
StyleBox[\"rules\", Bold, Rule[StripOnInput, False]], \" must be a list of \
transformation rules. For example, {x \\[Rule] r Sin[\\[Theta]] Cos[\\[Phi]], \
y \\[Rule] r Sin[\\[Theta]] Sin[\\[Phi]], z \\[Rule] r Cos[\\[Theta]]} is a \
transformation from Cartesian to spherical coordinates.\"}]], \
TextCell[Row[List[\"TAddCoordTransformation[\", Style[\"sourceID\", Bold], \" \
\\[Rule] \", Style[\"targetID\", Bold], \", \", Style[\"rules\", Bold], \"] \
adds a transformation from the coordinate system \", Style[\"sourceID\", \
Bold], \" to the coordinate system \", Style[\"targetID\", Bold], \".\\n\", \
Style[\"rules\", Bold], \" must be a list of transformation rules. For \
example, {x \\[Rule] r Sin[\\[Theta]] Cos[\\[Phi]], y \\[Rule] r \
Sin[\\[Theta]] Sin[\\[Phi]], z \\[Rule] r Cos[\\[Theta]]} is a transformation \
from Cartesian to spherical coordinates.\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TAddCoordTransformation, {
      OGRe`TAddCoordTransformation[Pattern[OGRe`Private`sourceID, 
           Blank[String]] -> Pattern[OGRe`Private`targetID, 
           Blank[String]], 
         Pattern[OGRe`Private`rules, 
          Blank[List]]] :> 
       OGRe`TAddCoordTransformation[
        OGRe`Private`sourceID, OGRe`Private`targetID, OGRe`Private`rules], 
       OGRe`TAddCoordTransformation[
         Pattern[OGRe`Private`sourceID, 
          Blank[String]], 
         Pattern[OGRe`Private`targetID, 
          Blank[String]], 
         Pattern[OGRe`Private`rules, 
          Blank[List]]] :> 
       Module[{OGRe`Private`allJacobians, OGRe`Private`ChristoffelJacobian, 
          OGRe`Private`dim, OGRe`Private`i, OGRe`Private`inverseJacobian, 
          OGRe`Private`j, OGRe`Private`jacobian, OGRe`Private`k, 
          OGRe`Private`newCoordSymbols, OGRe`Private`oldCoordSymbols}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`sourceID]; If[
           Not[
            AllTrue[OGRe`Private`rules, MatchQ[#, Blank[] -> Blank[]]& ]], 
           Message[
             MessageName[OGRe`TAddCoordTransformation, "ErrorRulesForm"]]; 
           Abort[]; Null]; 
         OGRe`Private`CheckIfCoordinates[OGRe`Private`sourceID]; 
         OGRe`Private`CheckIfCoordinates[OGRe`Private`targetID]; 
         If[OGRe`Private`sourceID === OGRe`Private`targetID, Message[
             MessageName[
             OGRe`TAddCoordTransformation, "ErrorDifferentCoords"]]; Abort[]; 
           Null]; If[Length[
             OGRe`Private`TensorData[OGRe`Private`sourceID][
             "Components"][{{1}, OGRe`Private`sourceID}]] != Length[
             OGRe`Private`TensorData[OGRe`Private`targetID][
             "Components"][{{1}, OGRe`Private`targetID}]], Message[
             MessageName[OGRe`TAddCoordTransformation, "ErrorNotSameDim"]]; 
           Abort[]; Null]; If[
           And[
            KeyExistsQ[
             OGRe`Private`TensorData[OGRe`Private`sourceID], 
             "CoordTransformations"], 
            AssociationQ[
             OGRe`Private`TensorData[OGRe`Private`sourceID][
             "CoordTransformations"]]], 
           OGRe`Private`ChangeTensorKey[
           OGRe`Private`sourceID, "CoordTransformations", 
            Append[
             OGRe`Private`TensorData[OGRe`Private`sourceID][
             "CoordTransformations"], OGRe`Private`targetID -> 
             OGRe`Private`rules]], 
           OGRe`Private`ChangeTensorKey[
            OGRe`Private`sourceID, "CoordTransformations", <|
             OGRe`Private`targetID -> OGRe`Private`rules|>]; Null]; 
         OGRe`Private`oldCoordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`sourceID][
           "Components"][{{1}, OGRe`Private`sourceID}]; 
         OGRe`Private`newCoordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`targetID][
           "Components"][{{1}, OGRe`Private`targetID}]; 
         OGRe`Private`dim = Length[OGRe`Private`oldCoordSymbols]; 
         OGRe`Private`jacobian = OGRe`Private`TensorSimplify[
            Table[
             D[
              ReplaceAll[
               Part[OGRe`Private`oldCoordSymbols, OGRe`Private`i], 
               OGRe`Private`rules], 
              Part[OGRe`Private`newCoordSymbols, OGRe`Private`j]], {
             OGRe`Private`i, 1, OGRe`Private`dim}, {
             OGRe`Private`j, 1, OGRe`Private`dim}]]; 
         OGRe`Private`inverseJacobian = OGRe`Private`TensorSimplify[
            Inverse[OGRe`Private`jacobian]]; 
         OGRe`Private`ChristoffelJacobian = OGRe`Private`TensorSimplify[
            Table[
             D[
              ReplaceAll[
               Part[OGRe`Private`oldCoordSymbols, OGRe`Private`i], 
               OGRe`Private`rules], 
              Part[OGRe`Private`newCoordSymbols, OGRe`Private`j], 
              Part[OGRe`Private`newCoordSymbols, OGRe`Private`k]], {
             OGRe`Private`i, 1, OGRe`Private`dim}, {
             OGRe`Private`j, 1, OGRe`Private`dim}, {
             OGRe`Private`k, 1, OGRe`Private`dim}]]; 
         OGRe`Private`allJacobians = <|
           "Jacobian" -> OGRe`Private`jacobian, "InverseJacobian" -> 
            OGRe`Private`inverseJacobian, "ChristoffelJacobian" -> 
            OGRe`Private`ChristoffelJacobian|>; If[
           And[
            KeyExistsQ[
             OGRe`Private`TensorData[OGRe`Private`sourceID], "Jacobians"], 
            AssociationQ[
             OGRe`Private`TensorData[OGRe`Private`sourceID]["Jacobians"]]], 
           OGRe`Private`ChangeTensorKey[OGRe`Private`sourceID, "Jacobians", 
            Append[
             OGRe`Private`TensorData[OGRe`Private`sourceID]["Jacobians"], 
             OGRe`Private`targetID -> OGRe`Private`allJacobians]], 
           OGRe`Private`ChangeTensorKey[
            OGRe`Private`sourceID, "Jacobians", <|
             OGRe`Private`targetID -> OGRe`Private`allJacobians|>]; Null]; 
         Return[OGRe`Private`sourceID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TAddCoordTransformation"|>, False]]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"a1dbf2b1-90c7-439d-a811-314be9981b8f"]
}, Open  ]],

Cell["\<\
Let us add the rules to transform from Cartesian to spherical coordinates:\
\>", "Text",ExpressionUUID->"eaba12a1-499c-4d48-82f4-dddf3b38f19e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TAddCoordTransformation", "[", 
   RowBox[{
    RowBox[{"\"\<Cartesian\>\"", "\[Rule]", "\"\<Spherical\>\""}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "\[Rule]", 
       RowBox[{"r", " ", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
        RowBox[{"Cos", "[", "\[Phi]", "]"}]}]}], ",", 
      RowBox[{"y", "\[Rule]", 
       RowBox[{"r", " ", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
        RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], ",", 
      RowBox[{"z", "\[Rule]", 
       RowBox[{"r", " ", 
        RowBox[{"Cos", "[", "\[Theta]", "]"}]}]}]}], "}"}]}], "]"}], 
  ";"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"fc9c7d88-8595-44a7-81f4-5243eb6cdfa2"],

Cell[TextData[{
 "These will be stored in the data of the object ",
 StyleBox["\[CloseCurlyDoubleQuote]Cartesian\[CloseCurlyDoubleQuote]", 
  "Input"],
 ". Note that we did not have to input a rule for ",
 StyleBox["t", "Input"],
 ", since in this case, it stays the same. Conversely, let us add the rules \
to transform from spherical to Cartesian coordinates:"
}], "Text",ExpressionUUID->"dd82c4f6-3b19-4ea5-a4a4-fc4f49f05940"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TAddCoordTransformation", "[", 
   RowBox[{
    RowBox[{"\"\<Spherical\>\"", "\[Rule]", "\"\<Cartesian\>\""}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"r", "\[Rule]", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["y", "2"], "+", 
         SuperscriptBox["z", "2"]}]]}], ",", 
      RowBox[{"\[Theta]", "\[Rule]", 
       RowBox[{"ArcCos", "[", 
        FractionBox["z", 
         SqrtBox[
          RowBox[{
           SuperscriptBox["x", "2"], "+", 
           SuperscriptBox["y", "2"], "+", 
           SuperscriptBox["z", "2"]}]]], "]"}]}], ",", 
      RowBox[{"\[Phi]", "\[Rule]", 
       RowBox[{"ArcTan", "[", 
        RowBox[{"x", ",", "y"}], "]"}]}]}], "}"}]}], "]"}], ";"}]], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"774377ca-54bc-4f73-af03-218db300fe3d"],

Cell[TextData[{
 "These will be stored in the data of the object ",
 StyleBox["\[OpenCurlyDoubleQuote]Spherical\[CloseCurlyDoubleQuote]", "Input"],
 ". Now OGRe knows how to convert back and forth between these two coordinate \
systems - and this will happen automatically whenever required. We just \
needed to provide these rules once and for all, and any tensor initially \
defined in one coordinate system can now be automatically converted to the \
other."
}], "Text",ExpressionUUID->"a2bbe94a-ef8b-4c8d-8f99-c778f2748fcb"],

Cell[TextData[{
 "As in the case of raising and lowering indices, displaying a tensor in a \
different coordinate system is a simple matter of calling the modules ",
 StyleBox["TShow", "Input"],
 " or ",
 StyleBox["TList", "Input"],
 " with an additional argument specifying the coordinate system to use. For \
example, let us show the Minkowski metric in spherical coordinates:"
}], "Text",ExpressionUUID->"23dfc4cf-39bb-41c2-90fa-86e8e109d35a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<Minkowski\>\"", ",", "\"\<Spherical\>\""}], "]"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"08fee5a7-b316-45ad-8b59-8ff729a6f689"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Minkowski\"", "\":   \"", 
    TemplateBox[{"\"\[Eta]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", "1", "0", "0"}, {"0", "0", 
          SuperscriptBox["r", "2"], "0"}, {"0", "0", "0", 
          RowBox[{
            SuperscriptBox["r", "2"], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}}, RowSpacings -> 
        1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"35cc549c-4f9e-4d76-86aa-e1e255ed1edb"]
}, Open  ]],

Cell[TextData[{
 "We can also ask to see a tensor in a specific index configuration ",
 StyleBox["and",
  FontWeight->"Bold"],
 " a specific coordinate system:"
}], "Text",ExpressionUUID->"b63c0186-19c5-4ab4-899c-dba442a00bf2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", "\"\<Spherical\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"bf191801-d253-42b8-ab1b-dc33e9050391"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluid\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"]}, 
     "Subsuperscript", SyntaxForm -> SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"\[Rho]", "0", "0", "0"}, {"0", "p", "0", "0"}, {"0", "0", 
          FractionBox["p", 
           SuperscriptBox["r", "2"]], "0"}, {"0", "0", "0", 
          FractionBox[
           RowBox[{"p", " ", 
             SuperscriptBox[
              RowBox[{"Csc", "[", "\[Theta]", "]"}], "2"]}], 
           SuperscriptBox["r", "2"]]}}, RowSpacings -> 1, ColumnSpacings -> 1,
         RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]",
        ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1b5de5ee-2775-42f6-be4c-6db22fd78bf0"]
}, Open  ]],

Cell[TextData[{
 "The module ",
 StyleBox["TList", "Input"],
 " works in exactly the same way, for example:"
}], "Text",ExpressionUUID->"588fdfe2-4b33-4341-84ca-62106390e717"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<Kretschmann\>\"", ",", "\"\<Cartesian\>\""}], "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"5a582a89-5d17-41d8-a62f-7ec2e485a2fe"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Kretschmann\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"K\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"48", " ", 
            SuperscriptBox["M", "2"]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox["x", "2"], "+", 
              SuperscriptBox["y", "2"], "+", 
              SuperscriptBox["z", "2"]}], ")"}], "3"]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"c552a12a-ee27-4ca1-bac1-8d003cacb183"]
}, Open  ]],

Cell[TextData[{
 "Just as with default indices, every tensor has a ",
 StyleBox["default coordinate system",
  FontWeight->"Bold"],
 ", which is, initially, the one we used to create it. We can change it using \
the module ",
 StyleBox["TChangeDefaultCoords", "Input"],
 ", and then whenever we display the tensor, it will be displayed in that \
coordinate system if no other coordinate system is specified:"
}], "Text",ExpressionUUID->"6c1dfc2e-07cb-4be9-9135-84b667bf6d4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TChangeDefaultCoords"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"bec32f41-ddaf-4bbe-a97a-3e7cd5a427bb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeDefaultCoords[\\\", StyleBox[\\\"tensorID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] changes the default coordinate system of \
the tensor object \\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, \
False]], \\\" to \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeDefaultCoords[\\\", Style[\\\"tensorID\\\", \
Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] changes the \
default coordinate system of the tensor object \\\", Style[\\\"tensorID\\\", \
Bold], \\\" to \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TChangeDefaultCoords", "[", 
                    
                    RowBox[{
                    "OGRe`Private`tensorID_String", ",", 
                    "OGRe`Private`coordinatesID_String"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`tensorID", "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`tensorID", "]"}], "[", "\"Role\"", "]"}], 
                    "===", "\"Coordinates\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TChangeDefaultCoords", "::", 
                    "ErrorCoordTensor"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    
                    RowBox[{
                    "OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    RowBox[{"OGRe`Private`tensorID", ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`tensorID", "]"}], "[", "\"DefaultIndices\"",
                     "]"}], ",", "OGRe`Private`coordinatesID"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`tensorID", ",", "\"DefaultCoords\"",
                     ",", "OGRe`Private`coordinatesID"}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`tensorID", "]"}], 
                    ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TChangeDefaultCoords\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TChangeDefaultCoords[\\\", StyleBox[\\\"tensorID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] changes the default coordinate system of \
the tensor object \\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, \
False]], \\\" to \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\".\\\"}]], \
TextCell[Row[List[\\\"TChangeDefaultCoords[\\\", Style[\\\"tensorID\\\", \
Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] changes the \
default coordinate system of the tensor object \\\", Style[\\\"tensorID\\\", \
Bold], \\\" to \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\".\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TChangeDefaultCoords[\", \
StyleBox[\"tensorID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] changes the \
default coordinate system of the tensor object \", StyleBox[\"tensorID\", \
Bold, Rule[StripOnInput, False]], \" to \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \".\"}]], \
TextCell[Row[List[\"TChangeDefaultCoords[\", Style[\"tensorID\", Bold], \", \
\", Style[\"coordinatesID\", Bold], \"] changes the default coordinate system \
of the tensor object \", Style[\"tensorID\", Bold], \" to \", \
Style[\"coordinatesID\", Bold], \".\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TChangeDefaultCoords, {OGRe`TChangeDefaultCoords[
         Pattern[OGRe`Private`tensorID, 
          Blank[String]], 
         Pattern[OGRe`Private`coordinatesID, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`tensorID]; 
        OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
        If[OGRe`Private`TensorData[OGRe`Private`tensorID]["Role"] === 
          "Coordinates", Message[
            MessageName[OGRe`TChangeDefaultCoords, "ErrorCoordTensor"]]; 
          Abort[]; Null]; 
        OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
        OGRe`Private`AddRepresentation[OGRe`Private`tensorID, 
          OGRe`Private`TensorData[OGRe`Private`tensorID]["DefaultIndices"], 
          OGRe`Private`coordinatesID]; 
        OGRe`Private`ChangeTensorKey[
         OGRe`Private`tensorID, "DefaultCoords", OGRe`Private`coordinatesID]; 
        Return[OGRe`Private`tensorID]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TChangeDefaultCoords"|>, False]]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"bb03d9da-91fe-41a8-86ad-88a57b5c33fe"]
}, Open  ]],

Cell["\<\
For example, let\[CloseCurlyQuote]s change the default coordinates of the \
perfect fluid stress tensor to spherical coordinates:\
\>", "Text",ExpressionUUID->"71a1e250-6cde-4c92-9e27-7105a7c29e3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TChangeDefaultCoords", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", "\"\<Spherical\>\""}], "]"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"e6eeded5-feed-4378-91df-1f25be8e29e6"],

Cell[BoxData["\<\"PerfectFluid\"\>"], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"6454e74c-d225-45ac-9d73-9a291bbfb84f"]
}, Open  ]],

Cell[TextData[{
 "Now, when we display the tensor using ",
 StyleBox["TList", "Input"],
 " without any arguments (or with just indices), this is the coordinate \
system that will be used:"
}], "Text",ExpressionUUID->"61a80008-ee8c-46d7-80f8-5387ed852471"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", "\"\<PerfectFluid\>\"", "]"}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"cab296b5-526c-43ac-98b8-c33ce7c5f74c"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"PerfectFluid\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "\[Rho]"},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "p"},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"p", " ", 
           SuperscriptBox["r", "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"p", " ", 
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"28dc2f5c-b689-4824-8700-ca2b74af48ea"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applying a function to the tensor components", \
"Subsection",ExpressionUUID->"3f94245c-cb0c-4efc-b8b3-e063cd51561d"],

Cell[TextData[{
 "Optionally, a function can be provided to ",
 StyleBox["TList", "Input"],
 " and ",
 StyleBox["TShow", "Input"],
 " as their last argument. If provided, the function will be applied to each \
of the tensor\[CloseCurlyQuote]s components, the components will be \
simplified, and the tensor will be displayed with the new components. Note \
that this only applies to displaying the components; the tensor data itself \
will not change."
}], "Text",ExpressionUUID->"48b9ce15-3f67-4124-a04e-a5f535c7c59d"],

Cell[TextData[{
 "Typically, the applied function will be ",
 StyleBox["ReplaceAll", "Input"],
 " to replace a particular symbol in the tensor with another symbol or \
numerical value. For example, perhaps we would like to display the value of \
the Kretschmann scalar for a particular choice of M and r:"
}], "Text",ExpressionUUID->"3bcd3d6d-68c7-4c78-b621-55cea812a50d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<Kretschmann\>\"", ",", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"M", "->", "1"}], ",", 
      RowBox[{"r", "->", "10"}]}], "}"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[79]:=",ExpressionUUID->"b486b2d5-b97b-43ce-aa77-80c72edf8e33"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Kretschmann\"", "\":   \"", 
    TemplateBox[{"\"K\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    FractionBox["3", "62500"]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"72f6be18-f3c9-425d-abbd-d96244ce4478"]
}, Open  ]],

Cell["\<\
Or maybe we would like to display the perfect fluid stress tensor with p \
equal to \[Rho]:\
\>", "Text",ExpressionUUID->"878f6b32-369e-44f3-8fd8-40a1068643de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{"p", "->", "\[Rho]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"410142c8-2423-4836-9cdc-bab484ea54bc"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"PerfectFluid\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "\[Rho]"},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", "\[Rho]"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", "\[Rho]", " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"125f887f-8417-48ca-8ccd-dc7ef8ece4b1"]
}, Open  ]],

Cell["\<\
The function can, of course, also be combined with a choice of indices and/or \
coordinates:\
\>", "Text",ExpressionUUID->"e1652390-e725-45e4-ba10-b10e95e86d56"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<PerfectFluid\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", "\"\<Cartesian\>\"", ",", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{"p", "->", "\[Rho]"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[81]:=",ExpressionUUID->"7e720f9e-da41-445f-94e7-336abdd7cd42"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"PerfectFluid\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"]}, 
             "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\"", "\"x\""}, "RowDefault"]}, 
             "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\"", "\"y\""}, "RowDefault"]}, 
             "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
            TemplateBox[{"\"T\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\"", "\"z\""}, "RowDefault"]}, 
             "Subsuperscript", SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "\[Rho]"}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"4ff025b2-63bf-4982-b5a3-836bb7099143"]
}, Open  ]],

Cell[TextData[{
 "There are other useful functions we can apply besides ",
 StyleBox["ReplaceAll", "Input"],
 ". We will see an example below."
}], "Text",ExpressionUUID->"8ca9ce6c-7034-49d2-a84f-d7d7c821a43f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Setting simplification assumptions", \
"Subsection",ExpressionUUID->"08451138-5bc8-450a-b3c1-d88af08c5aee"],

Cell["\<\
Often, coordinate transformations are only invertible for a specific range of \
coordinates. For example, let us define a new scalar in Minkowski space, \
which is equal to the spatial distance from the origin:\
\>", "Text",ExpressionUUID->"c7d93bdb-ca6c-4616-bf05-655f35d46bb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewTensor", "[", 
   RowBox[{
   "\"\<SpatialDistance\>\"", ",", "\"\<Minkowski\>\"", ",", 
    "\"\<Cartesian\>\"", ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     SqrtBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"], "+", 
       SuperscriptBox["z", "2"]}]], "}"}], ",", "\"\<d\>\""}], 
   "]"}]}]], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"7e4aa0ca-629d-41d6-aef5-edabf6c10409"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SpatialDistance\"", "\":   \"", 
    TemplateBox[{"\"d\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    SqrtBox[
     RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"], "+", 
       SuperscriptBox["z", "2"]}]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"116f9e38-ac0a-48c2-b568-0ba606cd1cc0"]
}, Open  ]],

Cell[TextData[{
 "When we convert this scalar to spherical coordinates, we expect to get ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "96d9a76c-8ae3-4a9f-ad8a-313a8ae65eb8"],
 ", but instead we get the absolute value of ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "13df3d6a-db4b-486e-9b18-da751d04b7bf"],
 ":"
}], "Text",ExpressionUUID->"c18af8c7-5529-4501-bcc5-c6c755233321"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<SpatialDistance\>\"", ",", "\"\<Spherical\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"ef95e672-f8e9-43c7-801c-b677e4466cee"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SpatialDistance\"", "\":   \"", 
    TemplateBox[{"\"d\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    RowBox[{"Abs", "[", "r", "]"}]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"081768f3-7865-45ea-848b-6afd5594d1e3"]
}, Open  ]],

Cell[TextData[{
 "As usual in Mathematica, such issues can be easily fixed by using ",
 StyleBox["FullSimplify", "Input"],
 " with the correct ",
 StyleBox["assumptions",
  FontWeight->"Bold"],
 ". Most OGRe modules run their output through ",
 StyleBox["FullSimplify", "Input"],
 " automatically. By default, OGRe uses the simplification assumption that \
all variables (coordinates, parameters, etc.) are ",
 StyleBox["real",
  FontWeight->"Bold"],
 ". Therefore, Mathematica knows to simplify ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    SuperscriptBox["r", "2"]], TraditionalForm]],ExpressionUUID->
  "b1da6358-88f1-42c4-a528-8a00178cd2f1"],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"|", "r", "|"}], TraditionalForm]],ExpressionUUID->
  "e01ddaab-e31e-4793-96b9-bfede5e76f89"],
 ". However, Mathematica doesn\[CloseCurlyQuote]t automatically know that ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "7d67e8a5-bea1-4626-9f20-fd897d335fc2"],
 " is non-negative."
}], "Text",ExpressionUUID->"c3c6734f-0297-4b24-9798-c7f1afa689fa"],

Cell[TextData[{
 "The user may specify which assumptions to pass to ",
 StyleBox["FullSimplify", "Input"],
 " using the module ",
 StyleBox["TSetAssumptions", "Input"],
 ":"
}], "Text",ExpressionUUID->"c514eb2a-9e1c-4793-b708-bb76916fa4a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetAssumptions"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"54be3fe9-d4bf-4b48-81c9-6b6846efedf4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAssumptions[] shows the assumptions to be used when simplifying \
expressions.\\\\nTSetAssumptions[\\\", StyleBox[\\\"assumptions\\\", Bold, \
Rule[StripOnInput, False]], \\\"] appends new assumptions to the previously \
added assumptions.\\\\nTSetAssumptions[None] clears all previously added \
assumptions.\\\\nTSetAssumptions[!Reals] disables the default assumption that \
all variable are real, which secretly adds the assumption Element[_, Reals] \
to the list of assumptions. TSetAssumptions[Reals] re-enables this \
assumption.\\\\nThe output of this module is always an Association indicating \
whether variables are assumed to be real and listing the user-defined \
assumptions.\\\"}]], TextCell[Row[List[\\\"TSetAssumptions[] shows the \
assumptions to be used when simplifying \
expressions.\\\\nTSetAssumptions[\\\", Style[\\\"assumptions\\\", Bold], \
\\\"] appends new assumptions to the previously added \
assumptions.\\\\nTSetAssumptions[None] clears all previously added \
assumptions.\\\\nTSetAssumptions[!Reals] disables the default assumption that \
all variable are real, which secretly adds the assumption Element[_, Reals] \
to the list of assumptions. TSetAssumptions[Reals] re-enables this \
assumption.\\\\nThe output of this module is always an Association indicating \
whether variables are assumed to be real and listing the user-defined \
assumptions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetAssumptions", "[", "]"}], ":=", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetAssumptions", "[", "OGRe`Private`assumptions_", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`TensorData", "]"}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{"OGRe`Private`assumptions", ",", "None", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", "\"User\"", 
                    "]"}], "=", "None"}], ",", 
                    TemplateBox[{}, "Reals"], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", 
                    "\"AssumeReal\"", "]"}], "=", "True"}], ",", 
                    RowBox[{"!", 
                    TemplateBox[{}, "Reals"]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", 
                    "\"AssumeReal\"", "]"}], "=", "False"}], ",", "_", ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", "\"User\"", 
                    "]"}], "===", "None"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", "\"User\"", 
                    "]"}], "=", 
                    RowBox[{"{", "OGRe`Private`assumptions", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", "\"User\"", 
                    "]"}], ",", "OGRe`Private`assumptions"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "[", "\"User\"", 
                    "]"}], ",", "OGRe`Private`assumptions"}], "]"}], ";"}]}], 
                    "]"}], ";"}]}], "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"SimplifyAssumptions\"", "]"}], "]"}], ";"}], 
                    ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"HoldAll", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetAssumptions\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetAssumptions[] shows the assumptions to be used when simplifying \
expressions.\\\\nTSetAssumptions[\\\", StyleBox[\\\"assumptions\\\", Bold, \
Rule[StripOnInput, False]], \\\"] appends new assumptions to the previously \
added assumptions.\\\\nTSetAssumptions[None] clears all previously added \
assumptions.\\\\nTSetAssumptions[!Reals] disables the default assumption that \
all variable are real, which secretly adds the assumption Element[_, Reals] \
to the list of assumptions. TSetAssumptions[Reals] re-enables this \
assumption.\\\\nThe output of this module is always an Association indicating \
whether variables are assumed to be real and listing the user-defined \
assumptions.\\\"}]], TextCell[Row[List[\\\"TSetAssumptions[] shows the \
assumptions to be used when simplifying \
expressions.\\\\nTSetAssumptions[\\\", Style[\\\"assumptions\\\", Bold], \
\\\"] appends new assumptions to the previously added \
assumptions.\\\\nTSetAssumptions[None] clears all previously added \
assumptions.\\\\nTSetAssumptions[!Reals] disables the default assumption that \
all variable are real, which secretly adds the assumption Element[_, Reals] \
to the list of assumptions. TSetAssumptions[Reals] re-enables this \
assumption.\\\\nThe output of this module is always an Association indicating \
whether variables are assumed to be real and listing the user-defined \
assumptions.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetAssumptions[] shows the \
assumptions to be used when simplifying expressions.\\nTSetAssumptions[\", \
StyleBox[\"assumptions\", Bold, Rule[StripOnInput, False]], \"] appends new \
assumptions to the previously added assumptions.\\nTSetAssumptions[None] \
clears all previously added assumptions.\\nTSetAssumptions[!Reals] disables \
the default assumption that all variable are real, which secretly adds the \
assumption Element[_, Reals] to the list of assumptions. \
TSetAssumptions[Reals] re-enables this assumption.\\nThe output of this \
module is always an Association indicating whether variables are assumed to \
be real and listing the user-defined assumptions.\"}]], \
TextCell[Row[List[\"TSetAssumptions[] shows the assumptions to be used when \
simplifying expressions.\\nTSetAssumptions[\", Style[\"assumptions\", Bold], \
\"] appends new assumptions to the previously added \
assumptions.\\nTSetAssumptions[None] clears all previously added assumptions.\
\\nTSetAssumptions[!Reals] disables the default assumption that all variable \
are real, which secretly adds the assumption Element[_, Reals] to the list of \
assumptions. TSetAssumptions[Reals] re-enables this assumption.\\nThe output \
of this module is always an Association indicating whether variables are \
assumed to be real and listing the user-defined assumptions.\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetAssumptions, {
      OGRe`TSetAssumptions[] :> 
       OGRe`Private`TensorData[Options]["SimplifyAssumptions"], 
       OGRe`TSetAssumptions[
         Pattern[OGRe`Private`assumptions, 
          Blank[]]] :> (Unprotect[OGRe`Private`TensorData]; 
        Switch[OGRe`Private`assumptions, None, 
          OGRe`Private`TensorData[Options]["SimplifyAssumptions"]["User"] = 
          None, Reals, 
          OGRe`Private`TensorData[Options]["SimplifyAssumptions"][
           "AssumeReal"] = True, 
          Not[Reals], 
          OGRe`Private`TensorData[Options]["SimplifyAssumptions"][
           "AssumeReal"] = False, 
          Blank[], 
          If[OGRe`Private`TensorData[Options]["SimplifyAssumptions"]["User"] === 
            None, OGRe`Private`TensorData[Options]["SimplifyAssumptions"][
             "User"] = {OGRe`Private`assumptions}, If[
              Not[
               MemberQ[
                OGRe`Private`TensorData[Options]["SimplifyAssumptions"][
                "User"], OGRe`Private`assumptions]], AppendTo[
                OGRe`Private`TensorData[Options]["SimplifyAssumptions"][
                "User"], OGRe`Private`assumptions]; Null]; Null]; Null]; 
        Protect[OGRe`Private`TensorData]; Return[
          OGRe`Private`TensorData[Options]["SimplifyAssumptions"]]; Null)}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {HoldAll, Protected}, "FullName" -> 
    "OGRe`TSetAssumptions"|>, False]]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"46b4264a-42e4-46b2-9d2d-8f6a9cc26591"]
}, Open  ]],

Cell[TextData[{
 "Note that these assumptions will be globally applied to ",
 StyleBox["all",
  FontWeight->"Bold"],
 " tensor calculations, which is usually the desired behavior, since for \
example the assumption ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[GreaterEqual]", "0"}], TraditionalForm]],ExpressionUUID->
  "fbb36ed6-8572-47c8-a684-927ff5a0afd6"],
 " should apply to all tensors that use spherical coordinates. Let us set \
this assumption now:"
}], "Text",ExpressionUUID->"b5b7d679-d8e6-4875-bd07-9fdd77598ad8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetAssumptions", "[", 
  RowBox[{"r", "\[GreaterEqual]", "0"}], "]"}]], "Input",
 CellLabel->"In[85]:=",ExpressionUUID->"1e1a733e-7d9a-4f2c-a40e-946a569869b5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"AssumeReal\"\>", "\[Rule]", "True"}], ",", 
   RowBox[{"\<\"User\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"r", "\[GreaterEqual]", "0"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"49ae5014-3120-457c-b8dc-05ee478ecc05"]
}, Open  ]],

Cell[TextData[{
 "In fact, it is good practice to set any assumptions regarding the \
coordinates ",
 StyleBox["as soon as they are defined",
  FontWeight->"Bold"],
 ", so we should have set this assumption already when we defined the \
spherical coordinates in the beginning of this documentation. From now on, \
this assumption will automatically be used by modules that perform any kind \
of calculations on tensors. However, if we now try to show the scalar again \
using ",
 StyleBox["TShow", "Input"],
 ", we still get the same (non-simplified) result:"
}], "Text",ExpressionUUID->"a2b01f5c-4cca-4439-a560-0be151e5d872"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<SpatialDistance\>\"", ",", "\"\<Spherical\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"d9968366-4b15-4663-8a57-4da603b4017c"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SpatialDistance\"", "\":   \"", 
    TemplateBox[{"\"d\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    RowBox[{"Abs", "[", "r", "]"}]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"75af465a-55a8-4d43-b3b2-0c09125fe3d0"]
}, Open  ]],

Cell[TextData[{
 "The reason is that when OGRe calculates the components of a tensor in a \
particular representation, it calculates them ",
 StyleBox["once and for all",
  FontWeight->"Bold"],
 ", and then saves them in the object\[CloseCurlyQuote]s data to be reused \
later. This is done to improve performance, so that the components don\
\[CloseCurlyQuote]t have to be recalculated every time they are needed. In \
this case, since we already calculated the spatial distance in spherical \
coordinates when we showed it above - ",
 StyleBox["before",
  FontWeight->"Bold"],
 " we set the new simplification assumptions - that value has been saved, and \
will not be recalculated automatically, even though we now have new \
assumptions."
}], "Text",ExpressionUUID->"12069669-3126-4142-97a4-d29f7fb1cadc"],

Cell[TextData[{
 "However, we can force the simplification of the stored components with the \
new assumptions using the module ",
 StyleBox["TSimplify", "Input"],
 ":"
}], "Text",ExpressionUUID->"46c134dc-a292-4d38-a793-5a4c300b8a57"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSimplify"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"edb077d8-90e4-440c-a08d-845eba3b3235"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSimplify[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
simplifies all previously-calculated representations of the tensor object \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" based on \
the user-defined simplification assumptions set using TSetAssumptions[]. To \
be used if the assumptions have changed after the components have already \
been calculated.\\\\nTSimplify[\\\", StyleBox[\\\"expression\\\", Bold, \
Rule[StripOnInput, False]], \\\"] simplifies \\\", \
StyleBox[\\\"expression\\\", Bold, Rule[StripOnInput, False]], \\\" based on \
the user-defined simplification assumptions. If \\\", StyleBox[\\\"expression\
\\\", Bold, Rule[StripOnInput, False]], \\\" is a list, the components will \
be simplified in parallel.\\\\n\\\"}]], TextCell[Row[List[\\\"TSimplify[\\\", \
Style[\\\"ID\\\", Bold], \\\"] simplifies all previously-calculated \
representations of the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" \
based on the user-defined simplification assumptions set using \
TSetAssumptions[]. To be used if the assumptions have changed after the \
components have already been calculated.\\\\nTSimplify[\\\", \
Style[\\\"expression\\\", Bold], \\\"] simplifies \\\", \
Style[\\\"expression\\\", Bold], \\\" based on the user-defined \
simplification assumptions. If \\\", Style[\\\"expression\\\", Bold], \\\" is \
a list, the components will be simplified in parallel.\\\\n\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSimplify", "[", "OGRe`Private`ID_String", "]"}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    RowBox[{"OGRe`Private`ID", ",", "\"Components\"", ",", 
                    RowBox[{"OGRe`Private`TensorSimplify", "/@", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Components\"", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`ID", "]"}], ";"}], 
                    ")"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSimplify", "[", "OGRe`Private`expression_", "]"}], ":=", 
                    
                    RowBox[{
                    "OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`expression", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSimplify\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSimplify[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
simplifies all previously-calculated representations of the tensor object \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" based on \
the user-defined simplification assumptions set using TSetAssumptions[]. To \
be used if the assumptions have changed after the components have already \
been calculated.\\\\nTSimplify[\\\", StyleBox[\\\"expression\\\", Bold, \
Rule[StripOnInput, False]], \\\"] simplifies \\\", \
StyleBox[\\\"expression\\\", Bold, Rule[StripOnInput, False]], \\\" based on \
the user-defined simplification assumptions. If \\\", StyleBox[\\\"expression\
\\\", Bold, Rule[StripOnInput, False]], \\\" is a list, the components will \
be simplified in parallel.\\\\n\\\"}]], TextCell[Row[List[\\\"TSimplify[\\\", \
Style[\\\"ID\\\", Bold], \\\"] simplifies all previously-calculated \
representations of the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" \
based on the user-defined simplification assumptions set using \
TSetAssumptions[]. To be used if the assumptions have changed after the \
components have already been calculated.\\\\nTSimplify[\\\", \
Style[\\\"expression\\\", Bold], \\\"] simplifies \\\", \
Style[\\\"expression\\\", Bold], \\\" based on the user-defined \
simplification assumptions. If \\\", Style[\\\"expression\\\", Bold], \\\" is \
a list, the components will be simplified in parallel.\\\\n\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSimplify[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] simplifies all previously-calculated \
representations of the tensor object \", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \" based on the user-defined simplification \
assumptions set using TSetAssumptions[]. To be used if the assumptions have \
changed after the components have already been calculated.\\nTSimplify[\", \
StyleBox[\"expression\", Bold, Rule[StripOnInput, False]], \"] simplifies \", \
StyleBox[\"expression\", Bold, Rule[StripOnInput, False]], \" based on the \
user-defined simplification assumptions. If \", StyleBox[\"expression\", \
Bold, Rule[StripOnInput, False]], \" is a list, the components will be \
simplified in parallel.\\n\"}]], TextCell[Row[List[\"TSimplify[\", Style[\"ID\
\", Bold], \"] simplifies all previously-calculated representations of the \
tensor object \", Style[\"ID\", Bold], \" based on the user-defined \
simplification assumptions set using TSetAssumptions[]. To be used if the \
assumptions have changed after the components have already been \
calculated.\\nTSimplify[\", Style[\"expression\", Bold], \"] simplifies \", \
Style[\"expression\", Bold], \" based on the user-defined simplification \
assumptions. If \", Style[\"expression\", Bold], \" is a list, the components \
will be simplified in parallel.\\n\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSimplify, {OGRe`TSimplify[
         Pattern[OGRe`Private`ID, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
        OGRe`Private`ChangeTensorKey[OGRe`Private`ID, "Components", 
          Map[OGRe`Private`TensorSimplify, 
           OGRe`Private`TensorData[OGRe`Private`ID]["Components"]]]; 
        Return[OGRe`Private`ID]; Null), OGRe`TSimplify[
         Pattern[OGRe`Private`expression, 
          Blank[]]] :> OGRe`Private`TensorSimplify[OGRe`Private`expression]}],
     "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TSimplify"|>, False]]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"b2b3cd43-0653-4b04-83cc-73da9ba63198"]
}, Open  ]],

Cell["Now we get the expected result:", \
"Text",ExpressionUUID->"bab7bbed-1550-44bd-b305-bc3f91755655"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{
   RowBox[{"TSimplify", "[", "\"\<SpatialDistance\>\"", "]"}], ",", 
   "\"\<Spherical\>\""}], "]"}]], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"fb6c9549-8bc3-4c68-a393-3fd9546b73fd"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SpatialDistance\"", "\":   \"", 
    TemplateBox[{"\"d\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", "r"},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"31b312a5-deb7-45ce-bc68-567474193ab8"]
}, Open  ]],

Cell[TextData[{
 "Here, again, note that ",
 StyleBox["TSimplify", "Input"],
 " returns the ID of the tensor it simplifies, so we can compose it with ",
 StyleBox["TShow", "Input"],
 " if we want to show that same tensor. However, since we are now using ",
 StyleBox["TShow", "Input"],
 " with a second argument, we put ",
 StyleBox["TSimplify[\[OpenCurlyDoubleQuote]SpatialDistance\
\[CloseCurlyDoubleQuote]]", "Input"],
 " as the first argument, instead of composing it directly with ",
 StyleBox["@", "Input"],
 "."
}], "Text",ExpressionUUID->"4e45f920-7f86-450c-a068-2c6c6e939072"],

Cell[TextData[{
 "Finally, we note that if you are using non-real variables, you can disable \
the assumption that all variables are real using ",
 StyleBox["TSetAssumptions[!Reals]", "Input"],
 ". If you later want to turn it back on, use TSetAssumptions",
 StyleBox["[Reals]", "Input"],
 ". The value of the key ",
 StyleBox["\[OpenCurlyDoubleQuote]AssumeReal\[CloseCurlyDoubleQuote]", 
  "Input"],
 " in the output of ",
 StyleBox["TSetAssumptions", "Input"],
 " indicates whether this assumption is turned on."
}], "Text",ExpressionUUID->"14c91405-93dd-48c2-9129-0e762d8f8cd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Importing and exporting tensors", \
"Subsection",ExpressionUUID->"21e9caac-a306-4551-9183-9161ae53d67d"],

Cell["\<\
In a single Mathematica session, one can spend considerable time and effort \
defining tensors and doing various operations on them. However, as the \
tensors are only stored in memory, once the session is over and the kernel is \
stopped, all that information will be lost. Due to the non-linear nature of \
Mathematica notebooks, even if you saved the entire notebook, it can be hard \
or even impossible to retrace your steps and get the exact same tensors again \
from the information in the notebook.\
\>", "Text",ExpressionUUID->"caac045a-15e1-44e4-b0f2-fc09e5eb97ce"],

Cell[TextData[{
 "Instead of defining all the tensors from scratch, OGRe allows the user to \
export tensors and then import them in another session to continue working \
with them later. The tensors are stored internally as an ",
 StyleBox["Association", "Input"],
 ", and exporting a tensor essentially amounts to outputting the \
corresponding ",
 StyleBox["Association", "Input"],
 ". ",
 StyleBox["Warning: Do not change the exported data manually, as that might \
break the class invariants and cause errors after importing it back!",
  FontWeight->"Bold"]
}], "Text",ExpressionUUID->"a0ede925-9618-44bf-b9fb-818e721fe95f"],

Cell[TextData[{
 "To export a single tensor, use the ",
 StyleBox["TExport", "Input"],
 " module:"
}], "Text",ExpressionUUID->"2c3e3b4d-9352-4868-8941-5558b2109de6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TExport"}]], "Input",
 CellLabel->"In[89]:=",ExpressionUUID->"7b228165-1df7-404f-9b24-f82b0c2e2cfd"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TExport[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
exports the raw tensor data for the tensor object \\\", StyleBox[\\\"ID\\\", \
Bold, Rule[StripOnInput, False]], \\\" as an Association.\\\"}]], \
TextCell[Row[List[\\\"TExport[\\\", Style[\\\"ID\\\", Bold], \\\"] exports \
the raw tensor data for the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" \
as an Association.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TExport", "[", "OGRe`Private`ID_String", "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"Return", "[", 
                    RowBox[{"Association", "[", 
                    RowBox[{"OGRe`Private`ID", "\[Rule]", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], ",", 
                    
                    RowBox[{"\"OGReVersion\"", "\[Rule]", 
                    "OGRe`Private`OGReVersion"}]}], "]"}]}], "]"}], "]"}], 
                    ";"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TExport\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TExport[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
exports the raw tensor data for the tensor object \\\", StyleBox[\\\"ID\\\", \
Bold, Rule[StripOnInput, False]], \\\" as an Association.\\\"}]], \
TextCell[Row[List[\\\"TExport[\\\", Style[\\\"ID\\\", Bold], \\\"] exports \
the raw tensor data for the tensor object \\\", Style[\\\"ID\\\", Bold], \\\" \
as an Association.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TExport[\", StyleBox[\"ID\", \
Bold, Rule[StripOnInput, False]], \"] exports the raw tensor data for the \
tensor object \", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \" as an \
Association.\"}]], TextCell[Row[List[\"TExport[\", Style[\"ID\", Bold], \"] \
exports the raw tensor data for the tensor object \", Style[\"ID\", Bold], \" \
as an Association.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TExport, {OGRe`TExport[
         Pattern[OGRe`Private`ID, 
          Blank[String]]] :> (
        OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
        Return[<|OGRe`Private`ID -> Append[
             OGRe`Private`TensorData[OGRe`Private`ID], "OGReVersion" -> 
             OGRe`Private`OGReVersion]|>]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TExport"|>, False]]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"8b1d32e7-c610-46ef-9907-fbb444095f5f"]
}, Open  ]],

Cell["\<\
For example, here is how the 4-velocity is stored internally:\
\>", "Text",ExpressionUUID->"184a8f40-3b63-4eab-8fd6-dc1b8daba7ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TExport", "[", "\"\<4-Velocity\>\"", "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"b5e000bd-5e5a-48b4-bf94-6b209c8a4db6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"4-Velocity\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Components\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "1", "}"}], ",", "\<\"Cartesian\"\>"}], "}"}], 
         "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           FractionBox["1", 
            SqrtBox[
             RowBox[{"1", "-", 
              SuperscriptBox["v", "2"]}]]], ",", 
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
              SuperscriptBox["v", "2"]}]]], ",", "0", ",", "0"}], "}"}]}], 
        ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}], ",", "\<\"Cartesian\"\>"}], "}"}], 
         "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            FractionBox["1", 
             SqrtBox[
              RowBox[{"1", "-", 
               SuperscriptBox["v", "2"]}]]]}], ",", 
           FractionBox["v", 
            SqrtBox[
             RowBox[{"1", "-", 
              SuperscriptBox["v", "2"]}]]], ",", "0", ",", "0"}], "}"}]}]}], 
       "\[RightAssociation]"}]}], ",", 
     RowBox[{"\<\"DefaultCoords\"\>", "\[Rule]", "\<\"Cartesian\"\>"}], ",", 
     RowBox[{"\<\"DefaultIndices\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{"\<\"Metric\"\>", "\[Rule]", "\<\"Minkowski\"\>"}], ",", 
     RowBox[{"\<\"Role\"\>", "\[Rule]", "\<\"Tensor\"\>"}], ",", 
     RowBox[{"\<\"Symbol\"\>", "\[Rule]", "\<\"\[DottedSquare]\"\>"}], ",", 
     RowBox[{"\<\"OGReVersion\"\>", 
      "\[Rule]", "\<\"v1.7.0 (2021-09-17)\"\>"}]}], "\[RightAssociation]"}]}],
   "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"5f0bc5ad-ae7f-4cbf-9be5-618fc1b5700f"]
}, Open  ]],

Cell[TextData[{
 "This is a nested ",
 StyleBox["Association", "Input"],
 ". The upper level has just one key: ",
 StyleBox["\[OpenCurlyDoubleQuote]4-Velocity\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", which is the ID of the tensor. Its value is another ",
 StyleBox["Association", "Input"],
 ", which has the following keys:"
}], "Text",ExpressionUUID->"70f25b35-bbf8-43a0-b0a5-433d7f9965b5"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Components\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Bold"],
 ":",
 " An ",
 StyleBox["Association", "Input"],
 " containing the components of the tensor in different representations, each \
with a specific index configuration and coordinate system. The components are \
only generated when a particular combination of indices and coordinates is \
requested for the first time, so for example, here the components with both \
an upper and a lower index in Minkowski coordinates have been stored, but no \
components in spherical coordinates, since we have not tried to access them \
so far."
}], "Item",ExpressionUUID->"89ed7a81-5f42-485e-b884-fcb266d17d6c"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]DefaultCoords\[CloseCurlyDoubleQuote]", 
  "Input",
  FontWeight->"Bold"],
 ":",
 " The default coordinate system to use when displaying the tensor."
}], "Item",ExpressionUUID->"b1cfe337-a834-4618-aa96-97c1aefe4019"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]DefaultIndices\[CloseCurlyDoubleQuote]", 
  "Input",
  FontWeight->"Bold"],
 StyleBox[":", "Text"],
 " The default index configuration to use when displaying the tensor."
}], "Item",ExpressionUUID->"55a89a81-6362-4356-85fc-69077bfa6472"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Metric\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Bold"],
 ":",
 " The unique ID of the metric that will be used to raise and lower the \
tensor\[CloseCurlyQuote]s indices. Note that this is only a reference, so a \
tensor object with this ID must exist. If a tensor is exported, its metric \
must be exported separately as well for raising and lowering of indices to \
work."
}], "Item",ExpressionUUID->"b04bc5da-c04e-4ee5-a8b2-fe5d3d54e38a"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Role\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Bold"],
 ": The role of the tensor, which depends on the module that created it. Will \
be ",
 StyleBox["\[OpenCurlyDoubleQuote]Coordinates\[CloseCurlyDoubleQuote]", 
  "Input"],
 " if the tensor was created using ",
 StyleBox["TNewCoordinates", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]Metric\[CloseCurlyDoubleQuote]", "Input"],
 " if the tensor was created using ",
 StyleBox["TNewMetric", "Input"],
 ", or ",
 StyleBox["\[OpenCurlyDoubleQuote]Tensor\[CloseCurlyDoubleQuote]", "Input"],
 " if the tensor was created using ",
 StyleBox["TNewTensor", "Input"],
 ". Other modules that we will discuss below, such as ",
 StyleBox["TCalc", "Input"],
 ", ",
 StyleBox["TCalcChristoffel", "Input"],
 ", and ",
 StyleBox["TCalcRiemannTensor", "Input"],
 ", have corresponding roles as well. Additional roles are only used \
internally by OGRe, such as ",
 StyleBox["\[OpenCurlyDoubleQuote]Temporary\[CloseCurlyDoubleQuote]", "Input"]
  ,
 " for a temporary tensor created as an intermediate step in a calculation."
}], "Item",ExpressionUUID->"1396e63d-4c69-4ab2-85c5-9c7549d61df4"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]Symbol\[CloseCurlyDoubleQuote]", "Input",
  FontWeight->"Bold"],
 ": The symbol used to represent the tensor when displaying it."
}], "Item",ExpressionUUID->"3b8cd898-647d-4055-a1a1-e6f6445df6aa"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]OGReVersion\[CloseCurlyDoubleQuote]", 
  "Input",
  FontWeight->"Bold"],
 ": The version of the package used to create the tensor. (Note that this key \
is not stored internally, it is added by ",
 StyleBox["TExport", "Input"],
 ".)"
}], "Item",ExpressionUUID->"6f83cabd-5be5-442e-81bc-55a1a92c07ac"],

Cell[TextData[{
 "Other keys also exist in special cases. For example, for tensor objects \
representing coordinate systems, the keys ",
 StyleBox["\[OpenCurlyDoubleQuote]CoordTransformations\[CloseCurlyDoubleQuote]\
", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]Jacobians\[CloseCurlyDoubleQuote]", "Input"],
 " are used to store the details of coordinate transformations defined using ",
 StyleBox["TAddCoordTransformation", "Input"],
 ", as can be seen by exporting ",
 StyleBox["\[OpenCurlyDoubleQuote]Cartesian\[CloseCurlyDoubleQuote]", "Input"],
 ":"
}], "Text",ExpressionUUID->"f4f8aa45-4dba-4873-993a-232763b47536"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TExport", "[", "\"\<Cartesian\>\"", "]"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"a400816e-0d9a-44af-be3a-3e7201733b96"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Cartesian\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Components\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "1", "}"}], ",", "\<\"Cartesian\"\>"}], "}"}], 
        "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"t", ",", "x", ",", "y", ",", "z"}], "}"}]}], 
       "\[RightAssociation]"}]}], ",", 
     RowBox[{"\<\"DefaultCoords\"\>", "\[Rule]", "\<\"Cartesian\"\>"}], ",", 
     RowBox[{"\<\"DefaultIndices\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}], ",", 
     RowBox[{"\<\"Role\"\>", "\[Rule]", "\<\"Coordinates\"\>"}], ",", 
     RowBox[{"\<\"Symbol\"\>", "\[Rule]", "\<\"x\"\>"}], ",", 
     RowBox[{"\<\"CoordTransformations\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{"\<\"Spherical\"\>", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "\[Rule]", 
           RowBox[{"r", " ", 
            RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], ",", 
          RowBox[{"y", "\[Rule]", 
           RowBox[{"r", " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
            RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], ",", 
          RowBox[{"z", "\[Rule]", 
           RowBox[{"r", " ", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}]}]}], "}"}]}], 
       "\[RightAssociation]"}]}], ",", 
     RowBox[{"\<\"Jacobians\"\>", "\[Rule]", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{"\<\"Spherical\"\>", "\[Rule]", 
        RowBox[{"\[LeftAssociation]", 
         RowBox[{
          RowBox[{"\<\"Jacobian\"\>", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
               RowBox[{"r", " ", 
                RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"-", "r"}], " ", 
                RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
               RowBox[{"r", " ", 
                RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
               RowBox[{"r", " ", 
                RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
               RowBox[{
                RowBox[{"-", "r"}], " ", 
                RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}]}], 
            "}"}]}], ",", 
          RowBox[{"\<\"InverseJacobian\"\>", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{
                RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
               RowBox[{
                RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
                RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
               RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               FractionBox[
                RowBox[{
                 RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                 RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "r"], ",", 
               FractionBox[
                RowBox[{
                 RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                 RowBox[{"Sin", "[", "\[Phi]", "]"}]}], "r"], ",", 
               RowBox[{"-", 
                FractionBox[
                 RowBox[{"Sin", "[", "\[Theta]", "]"}], "r"]}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"-", 
                FractionBox[
                 RowBox[{
                  RowBox[{"Csc", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], "r"]}], ",", 
               FractionBox[
                RowBox[{
                 RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                 RowBox[{"Csc", "[", "\[Theta]", "]"}]}], "r"], ",", "0"}], 
              "}"}]}], "}"}]}], ",", 
          RowBox[{"\<\"ChristoffelJacobian\"\>", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Sin", "[", "\[Theta]", "]"}]}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{"Sin", "[", "\[Theta]", "]"}]}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}]}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{"r", " ", 
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{
                  RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
                 RowBox[{"r", " ", 
                  RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
                  RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", 
                 RowBox[{"-", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"-", 
                  RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
                 RowBox[{
                  RowBox[{"-", "r"}], " ", 
                  RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}],
             "}"}]}]}], "\[RightAssociation]"}]}], "\[RightAssociation]"}]}], 
     ",", 
     RowBox[{"\<\"OGReVersion\"\>", 
      "\[Rule]", "\<\"v1.7.0 (2021-09-17)\"\>"}]}], "\[RightAssociation]"}]}],
   "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"aaf822ec-3204-49c7-859a-c6cc26db0fa4"]
}, Open  ]],

Cell[TextData[{
 "The output of ",
 StyleBox["TExport", "Input"],
 " is a raw ",
 StyleBox["Association", "Input"],
 ", and is not intended to be read by humans. If you wish to display the \
information encoded in the object in human-readable form, use ",
 StyleBox["TInfo", "Input"],
 ":"
}], "Text",ExpressionUUID->"b656e76c-0de8-4d4c-80df-be66b3641744"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TInfo"}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"58fca895-4c2c-4df9-a8e2-a4fc6739a70a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TInfo[\
] lists all the tensors created so far in this session: coordinate systems, \
metrics, and the tensors associated with each metric.\\\\nTInfo[\\\", \
StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] displays \
information about the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", including its symbol, role, associated \
metric, and default coordinates and indices, in human-readable form.\\\\nIf \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" represents \
a coordinate system, displays a list of all tensors using it as their default \
coordinate system.\\\\nIf \\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\" represents a metric, displays a list of all tensors using it as \
their associated metric.\\\"}]], TextCell[Row[List[\\\"TInfo[] lists all the \
tensors created so far in this session: coordinate systems, metrics, and the \
tensors associated with each metric.\\\\nTInfo[\\\", Style[\\\"ID\\\", Bold], \
\\\"] displays information about the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\", including its symbol, role, associated metric, and default \
coordinates and indices, in human-readable form.\\\\nIf \\\", \
Style[\\\"ID\\\", Bold], \\\" represents a coordinate system, displays a list \
of all tensors using it as their default coordinate system.\\\\nIf \\\", \
Style[\\\"ID\\\", Bold], \\\" represents a metric, displays a list of all \
tensors using it as their associated metric.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TInfo", "[", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`tensorList", ",", 
                    RowBox[{"OGRe`Private`countCoord", "=", "1"}], ",", 
                    RowBox[{"OGRe`Private`countMetric", "=", "1"}]}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`tensorList", "=", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}], 
                    ",", 
                    
                    RowBox[{"Options", "|", 
                    "OGRe`Private`DefaultResultID"}]}], "]"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Total tensors created: \"", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"Length", "[", "OGRe`Private`tensorList", "]"}]}],
                     "}"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Coordinate Systems:\"", ",", "Bold"}], "]"}], 
                    ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"OGRe`Private`countCoord", "++"}], ",", "\". \"", 
                    ",", "OGRe`Private`ID"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`ID", ",", 
                    RowBox[{"OGRe`Private`InfoButton", "/@", 
                    RowBox[{"Select", "[", 
                    RowBox[{"OGRe`Private`tensorList", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Role\"", "]"}], "\[Equal]", "\"Coordinates\""}], 
                    "&"}]}], "]"}]}]}], "}"}]}], "]"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Metrics:\"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"OGRe`Private`countMetric", "++"}], ",", "\". \"",
                     ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`InfoButton", "[", "OGRe`Private`ID",
                     "]"}], ",", "Bold"}], "]"}], ",", "\" \[RightArrow] \"", 
                    ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`InfoButton", "/@", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Metric\"", "]"}], "===", "OGRe`Private`ID"}], "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`ID"}], "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`DefaultResultID"}]}], 
                    "&"}]}], "]"}]}], ",", "\"|\""}], "]"}]}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`ID", ",", 
                    RowBox[{"Select", "[", 
                    RowBox[{"OGRe`Private`tensorList", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Role\"", "]"}], "\[Equal]", "\"Metric\""}], "&"}]}], 
                    "]"}]}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}], "]"}], 
                    ";"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TInfo", "[", "OGRe`Private`ID_String", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`info", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"OGRe`Private`info", "=", 
                    RowBox[{"{", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"ID: \"", ",", "Bold"}], "]"}], ",", 
                    "OGRe`Private`ID"}], "}"}], "]"}], "}"}]}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Symbol: \"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Symbol\"", "]"}]}], "}"}], "]"}]}], "]"}],
                     ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Role: \"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}]}], "}"}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "=!=", 
                    "\"Coordinates\""}], "&&", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "=!=", "\"Metric\""}]}], 
                    ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Metric: \"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"OGRe`Private`InfoButton", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Metric\"", "]"}], "]"}]}], "}"}], "]"}]}],
                     "]"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "=!=", 
                    "\"Coordinates\""}], ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Default Coordinates: \"", ",", "Bold"}], "]"}],
                     ",", 
                    RowBox[{"OGRe`Private`InfoButton", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultCoords\"", "]"}], "]"}]}], "}"}], 
                    "]"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Default Indices: \"", ",", "Bold"}], "]"}], 
                    ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultIndices\"", "]"}]}], "}"}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", 
                    "\"Coordinates\""}], ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Default Coordinates For: \"", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`InfoButton", "/@", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"DefaultCoords\"", "]"}], "===", "OGRe`Private`ID"}], 
                    "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`ID"}]}], "&"}]}], 
                    "]"}]}], ",", "\", \""}], "]"}]}], "}"}], "]"}]}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"Role\"", "]"}], "===", "\"Metric\""}], 
                    ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Tensors Using This Metric: \"", ",", "Bold"}], 
                    "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`InfoButton", "/@", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "#1", "]"}], "[", 
                    "\"Metric\"", "]"}], "===", "OGRe`Private`ID"}], "&&", 
                    RowBox[{"#1", "=!=", "OGRe`Private`ID"}]}], "&"}]}], 
                    "]"}]}], ",", "\", \""}], "]"}]}], "}"}], "]"}]}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"OGRe`Private`info", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"Components: \"", ",", "Bold"}], "]"}], ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    RowBox[{"\"TList\"", ",", 
                    RowBox[{"TList", "[", "OGRe`Private`ID", "]"}]}], "]"}], 
                    ",", "\" | \"", ",", 
                    RowBox[{"OGRe`Private`CreateButton", "[", 
                    RowBox[{"\"TShow\"", ",", 
                    RowBox[{"TShow", "[", "OGRe`Private`ID", "]"}]}], "]"}]}],
                     "}"}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    RowBox[{"Column", "[", "OGRe`Private`info", "]"}], "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TInfo\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TInfo[\
] lists all the tensors created so far in this session: coordinate systems, \
metrics, and the tensors associated with each metric.\\\\nTInfo[\\\", \
StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"] displays \
information about the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", including its symbol, role, associated \
metric, and default coordinates and indices, in human-readable form.\\\\nIf \
\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" represents \
a coordinate system, displays a list of all tensors using it as their default \
coordinate system.\\\\nIf \\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, \
False]], \\\" represents a metric, displays a list of all tensors using it as \
their associated metric.\\\"}]], TextCell[Row[List[\\\"TInfo[] lists all the \
tensors created so far in this session: coordinate systems, metrics, and the \
tensors associated with each metric.\\\\nTInfo[\\\", Style[\\\"ID\\\", Bold], \
\\\"] displays information about the tensor object \\\", Style[\\\"ID\\\", \
Bold], \\\", including its symbol, role, associated metric, and default \
coordinates and indices, in human-readable form.\\\\nIf \\\", \
Style[\\\"ID\\\", Bold], \\\" represents a coordinate system, displays a list \
of all tensors using it as their default coordinate system.\\\\nIf \\\", \
Style[\\\"ID\\\", Bold], \\\" represents a metric, displays a list of all \
tensors using it as their associated metric.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TInfo[] lists all the tensors \
created so far in this session: coordinate systems, metrics, and the tensors \
associated with each metric.\\nTInfo[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \"] displays information about the tensor object \
\", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", including its \
symbol, role, associated metric, and default coordinates and indices, in \
human-readable form.\\nIf \", StyleBox[\"ID\", Bold, Rule[StripOnInput, \
False]], \" represents a coordinate system, displays a list of all tensors \
using it as their default coordinate system.\\nIf \", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \" represents a metric, displays a list of all \
tensors using it as their associated metric.\"}]], \
TextCell[Row[List[\"TInfo[] lists all the tensors created so far in this \
session: coordinate systems, metrics, and the tensors associated with each \
metric.\\nTInfo[\", Style[\"ID\", Bold], \"] displays information about the \
tensor object \", Style[\"ID\", Bold], \", including its symbol, role, \
associated metric, and default coordinates and indices, in human-readable \
form.\\nIf \", Style[\"ID\", Bold], \" represents a coordinate system, \
displays a list of all tensors using it as their default coordinate \
system.\\nIf \", Style[\"ID\", Bold], \" represents a metric, displays a list \
of all tensors using it as their associated metric.\"]]]]\)", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TInfo, {
      OGRe`TInfo[] :> 
       Module[{OGRe`Private`tensorList, OGRe`Private`countCoord = 1, 
          OGRe`Private`countMetric = 1}, OGRe`Private`tensorList = Sort[
            DeleteCases[
             Keys[OGRe`Private`TensorData], 
             Alternatives[Options, OGRe`Private`DefaultResultID]]]; 
         OGRe`Private`OGRePrint[
           Column[{
             Row[{
               Style["Total tensors created: ", Bold], 
               Length[OGRe`Private`tensorList]}], 
             Style["Coordinate Systems:", Bold], 
             Column[
              Table[
               Row[{
                 Increment[OGRe`Private`countCoord], ". ", 
                 OGRe`Private`ID}], {OGRe`Private`ID, 
                Map[OGRe`Private`InfoButton, 
                 Select[
                 OGRe`Private`tensorList, OGRe`Private`TensorData[#]["Role"] == 
                  "Coordinates"& ]]}]], 
             Style["Metrics:", Bold], 
             Column[
              Table[
               Row[{
                 Increment[OGRe`Private`countMetric], ". ", 
                 Style[
                  OGRe`Private`InfoButton[OGRe`Private`ID], Bold], 
                 " \[RightArrow] ", 
                 Row[
                  Map[OGRe`Private`InfoButton, 
                   Select[
                    Keys[OGRe`Private`TensorData], And[
                    OGRe`Private`TensorData[#]["Metric"] === 
                    OGRe`Private`ID, # =!= OGRe`Private`ID, # =!= 
                    OGRe`Private`DefaultResultID]& ]], "|"]}], {
               OGRe`Private`ID, 
                Select[
                OGRe`Private`tensorList, OGRe`Private`TensorData[#]["Role"] == 
                 "Metric"& ]}]]}]]; Null], OGRe`TInfo[
         Pattern[OGRe`Private`ID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`info}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; OGRe`Private`info = {
            Row[{
              Style["ID: ", Bold], OGRe`Private`ID}]}; 
         AppendTo[OGRe`Private`info, 
           Row[{
             Style["Symbol: ", Bold], 
             OGRe`Private`TensorData[OGRe`Private`ID]["Symbol"]}]]; 
         AppendTo[OGRe`Private`info, 
           Row[{
             Style["Role: ", Bold], 
             OGRe`Private`TensorData[OGRe`Private`ID]["Role"]}]]; If[
           And[
           OGRe`Private`TensorData[OGRe`Private`ID]["Role"] =!= "Coordinates",
             OGRe`Private`TensorData[OGRe`Private`ID]["Role"] =!= "Metric"], 
           AppendTo[OGRe`Private`info, 
            Row[{
              Style["Metric: ", Bold], 
              OGRe`Private`InfoButton[
               OGRe`Private`TensorData[OGRe`Private`ID]["Metric"]]}]]]; 
         If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] =!= 
           "Coordinates", 
           AppendTo[OGRe`Private`info, 
            Row[{
              Style["Default Coordinates: ", Bold], 
              OGRe`Private`InfoButton[
               OGRe`Private`TensorData[OGRe`Private`ID]["DefaultCoords"]]}]]]; 
         AppendTo[OGRe`Private`info, 
           Row[{
             Style["Default Indices: ", Bold], 
             OGRe`Private`TensorData[OGRe`Private`ID]["DefaultIndices"]}]]; 
         If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === 
           "Coordinates", 
           AppendTo[OGRe`Private`info, 
            Row[{
              Style["Default Coordinates For: ", Bold], 
              Row[
               Map[OGRe`Private`InfoButton, 
                Select[
                 Keys[OGRe`Private`TensorData], And[
                 OGRe`Private`TensorData[#]["DefaultCoords"] === 
                  OGRe`Private`ID, # =!= OGRe`Private`ID]& ]], ", "]}]]]; 
         If[OGRe`Private`TensorData[OGRe`Private`ID]["Role"] === "Metric", 
           AppendTo[OGRe`Private`info, 
            Row[{
              Style["Tensors Using This Metric: ", Bold], 
              Row[
               Map[OGRe`Private`InfoButton, 
                Select[
                 Keys[OGRe`Private`TensorData], And[
                 OGRe`Private`TensorData[#]["Metric"] === OGRe`Private`ID, # =!= 
                  OGRe`Private`ID]& ]], ", "]}]]]; AppendTo[OGRe`Private`info, 
           Row[{
             Style["Components: ", Bold], 
             OGRe`Private`CreateButton["TList", 
              OGRe`TList[OGRe`Private`ID]], " | ", 
             OGRe`Private`CreateButton["TShow", 
              OGRe`TShow[OGRe`Private`ID]]}]]; OGRe`Private`OGRePrint[
           Column[OGRe`Private`info]]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TInfo"|>, False]]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"5203d7b4-a92c-49d5-b1c0-a1ba8e3ef085"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TInfo", "Input"],
 " will also tell you which other tensor objects use this tensor as their \
metric or default coordinate system, if applicable. For example:"
}], "Text",ExpressionUUID->"6e754df7-92af-498b-a1a3-e28e54e389f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TInfo", "[", "\"\<Cartesian\>\"", "]"}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"5d203af4-fee0-4804-b15a-1602736c995c"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox["\"ID: \"", Bold, StripOnInput -> False], "\"Cartesian\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Symbol: \"", Bold, StripOnInput -> False], "\"x\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Role: \"", Bold, StripOnInput -> False], "\"Coordinates\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Indices: \"", Bold, StripOnInput -> False], 
       RowBox[{"{", "1", "}"}]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Coordinates For: \"", Bold, StripOnInput -> False], 
       TemplateBox[{", ", "\", \"", 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"Minkowski\"", "Hyperlink", StripOnInput -> False], True -> 
             StyleBox[
              "\"Minkowski\"", "HyperlinkActive", StripOnInput -> False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["Minkowski"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"Alcubierre\"", "Hyperlink", StripOnInput -> False], True -> 
             StyleBox[
              "\"Alcubierre\"", "HyperlinkActive", StripOnInput -> False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["Alcubierre"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"4-Velocity\"", "Hyperlink", StripOnInput -> False], True -> 
             StyleBox[
              "\"4-Velocity\"", "HyperlinkActive", StripOnInput -> False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["4-Velocity"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"SpatialDistance\"", "Hyperlink", StripOnInput -> False], 
             True -> StyleBox[
              "\"SpatialDistance\"", "HyperlinkActive", StripOnInput -> 
               False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["SpatialDistance"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]}, 
        "RowWithSeparators"]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Components: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TList\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TList\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TList["Cartesian"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
       "\" | \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TShow\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TShow\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TShow["Cartesian"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"2fa2fd82-90a2-4a41-aea7-8b1d197f0b8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TInfo", "[", "\"\<Minkowski\>\"", "]"}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"9bc8182b-7430-4c72-a971-a751515ac02c"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox["\"ID: \"", Bold, StripOnInput -> False], "\"Minkowski\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Symbol: \"", Bold, StripOnInput -> False], "\"\[Eta]\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Role: \"", Bold, StripOnInput -> False], "\"Metric\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Coordinates: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"Cartesian\"", "Hyperlink", StripOnInput -> False], True -> 
           StyleBox[
            "\"Cartesian\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TInfo["Cartesian"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Indices: \"", Bold, StripOnInput -> False], 
       RowBox[{"{", 
         RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"-", "1"}]}], "}"}]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"Tensors Using This Metric: \"", Bold, StripOnInput -> False], 
       TemplateBox[{", ", "\", \"", 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"PerfectFluid\"", "Hyperlink", StripOnInput -> False], True -> 
             StyleBox[
              "\"PerfectFluid\"", "HyperlinkActive", StripOnInput -> False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["PerfectFluid"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"4-Velocity\"", "Hyperlink", StripOnInput -> False], True -> 
             StyleBox[
              "\"4-Velocity\"", "HyperlinkActive", StripOnInput -> False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["4-Velocity"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
         ButtonBox[
          TagBox[
           
           PaneSelectorBox[{
            False -> StyleBox[
              "\"SpatialDistance\"", "Hyperlink", StripOnInput -> False], 
             True -> StyleBox[
              "\"SpatialDistance\"", "HyperlinkActive", StripOnInput -> 
               False]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], 
           MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
          OGRe`TInfo["SpatialDistance"], Appearance -> "Frameless", BaseStyle -> 
          "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]}, 
        "RowWithSeparators"]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Components: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TList\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TList\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TList["Minkowski"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
       "\" | \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TShow\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TShow\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TShow["Minkowski"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1eed12ed-c7a7-47c8-9488-b8b8e71dde36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TInfo", "[", "\"\<PerfectFluid\>\"", "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"93d01ff8-539d-4490-94b8-c320e4b293c7"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox["\"ID: \"", Bold, StripOnInput -> False], "\"PerfectFluid\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Symbol: \"", Bold, StripOnInput -> False], "\"T\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Role: \"", Bold, StripOnInput -> False], "\"Tensor\""},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Metric: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"Minkowski\"", "Hyperlink", StripOnInput -> False], True -> 
           StyleBox[
            "\"Minkowski\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TInfo["Minkowski"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Coordinates: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox[
            "\"Spherical\"", "Hyperlink", StripOnInput -> False], True -> 
           StyleBox[
            "\"Spherical\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TInfo["Spherical"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Default Indices: \"", Bold, StripOnInput -> False], 
       RowBox[{"{", 
         RowBox[{
           RowBox[{"-", "1"}], ",", 
           RowBox[{"-", "1"}]}], "}"}]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Components: \"", Bold, StripOnInput -> False], 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TList\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TList\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TList["PerfectFluid"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
       "\" | \"", 
       ButtonBox[
        TagBox[
         PaneSelectorBox[{
          False -> StyleBox["\"TShow\"", "Hyperlink", StripOnInput -> False], 
           True -> StyleBox[
            "\"TShow\"", "HyperlinkActive", StripOnInput -> False]}, 
          Dynamic[
           CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
          0], 
         MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
        OGRe`TShow["PerfectFluid"], Appearance -> "Frameless", BaseStyle -> 
        "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"fbb4fbd6-2d13-4b87-a3b2-7e8c7ae09387"]
}, Open  ]],

Cell[TextData[{
 "You can click on the links to ",
 StyleBox["TList", "Input"],
 " and ",
 StyleBox["TShow", "Input"],
 " at the bottom to display the components of the tensor being inspected. You \
can also click on any tensor name in the output (e.g. ",
 StyleBox["Minkowski", "Input"],
 ", ",
 StyleBox["4-Velocity", "Input"],
 ", and ",
 StyleBox["SpatialDistance", "Input"],
 " in ",
 StyleBox["TInfo[\[OpenCurlyDoubleQuote]Cartesian\[CloseCurlyDoubleQuote]]", 
  "Input"],
 ") to execute ",
 StyleBox["TInfo", "Input"],
 " for that tensor. In addition, calling ",
 StyleBox["TInfo[]", "Input"],
 " with no parameters lists all the tensors created so far in this session - \
coordinate systems, metrics, and the tensors associated with each metric:"
}], "Text",ExpressionUUID->"2f3c44b6-454c-4e2b-8662-cdf568e8552c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TInfo", "[", "]"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"423fbd56-12a8-4acf-8a68-cbdccb0db246"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox["\"Total tensors created: \"", Bold, StripOnInput -> False], 
       "9"},
      "RowDefault"]},
    {
     StyleBox["\<\"Coordinate Systems:\"\>",
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TagBox[GridBox[{
        {
         TemplateBox[{"1", "\". \"", 
           ButtonBox[
            TagBox[
             
             PaneSelectorBox[{
              False -> StyleBox[
                "\"Cartesian\"", "Hyperlink", StripOnInput -> False], True -> 
               StyleBox[
                "\"Cartesian\"", "HyperlinkActive", StripOnInput -> False]}, 
              Dynamic[
               CurrentValue["MouseOver"]], ImageSize -> Automatic, 
              FrameMargins -> 0], 
             MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
            OGRe`TInfo["Cartesian"], Appearance -> "Frameless", BaseStyle -> 
            "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
          "RowDefault"]},
        {
         TemplateBox[{"2", "\". \"", 
           ButtonBox[
            TagBox[
             
             PaneSelectorBox[{
              False -> StyleBox[
                "\"Spherical\"", "Hyperlink", StripOnInput -> False], True -> 
               StyleBox[
                "\"Spherical\"", "HyperlinkActive", StripOnInput -> False]}, 
              Dynamic[
               CurrentValue["MouseOver"]], ImageSize -> Automatic, 
              FrameMargins -> 0], 
             MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
            OGRe`TInfo["Spherical"], Appearance -> "Frameless", BaseStyle -> 
            "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     StyleBox["\<\"Metrics:\"\>",
      StripOnInput->False,
      FontWeight->Bold]},
    {
     TagBox[GridBox[{
        {
         TemplateBox[{"1", "\". \"", 
           StyleBox[
            ButtonBox[
             TagBox[
              
              PaneSelectorBox[{
               False -> StyleBox[
                 "\"Alcubierre\"", "Hyperlink", StripOnInput -> False], True -> 
                StyleBox[
                 "\"Alcubierre\"", "HyperlinkActive", StripOnInput -> False]}, 
               Dynamic[
                CurrentValue["MouseOver"]], ImageSize -> Automatic, 
               FrameMargins -> 0], 
              MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
             OGRe`TInfo["Alcubierre"], Appearance -> "Frameless", BaseStyle -> 
             "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
            Bold, StripOnInput -> False], "\" \[RightArrow] \"", 
           TemplateBox[{"|", "\"|\""}, "RowWithSeparators"]},
          "RowDefault"]},
        {
         TemplateBox[{"2", "\". \"", 
           StyleBox[
            ButtonBox[
             TagBox[
              
              PaneSelectorBox[{
               False -> StyleBox[
                 "\"Minkowski\"", "Hyperlink", StripOnInput -> False], True -> 
                StyleBox[
                 "\"Minkowski\"", "HyperlinkActive", StripOnInput -> False]}, 
               Dynamic[
                CurrentValue["MouseOver"]], ImageSize -> Automatic, 
               FrameMargins -> 0], 
              MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
             OGRe`TInfo["Minkowski"], Appearance -> "Frameless", BaseStyle -> 
             "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
            Bold, StripOnInput -> False], "\" \[RightArrow] \"", 
           TemplateBox[{"|", "\"|\"", 
             ButtonBox[
              TagBox[
               
               PaneSelectorBox[{
                False -> StyleBox[
                  "\"PerfectFluid\"", "Hyperlink", StripOnInput -> False], 
                 True -> StyleBox[
                  "\"PerfectFluid\"", "HyperlinkActive", StripOnInput -> 
                   False]}, 
                Dynamic[
                 CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                FrameMargins -> 0], 
               MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
              OGRe`TInfo["PerfectFluid"], Appearance -> "Frameless", 
              BaseStyle -> "Hyperlink", Evaluator -> Automatic, Method -> 
              "Preemptive"], 
             ButtonBox[
              TagBox[
               
               PaneSelectorBox[{
                False -> StyleBox[
                  "\"4-Velocity\"", "Hyperlink", StripOnInput -> False], True -> 
                 StyleBox[
                  "\"4-Velocity\"", "HyperlinkActive", StripOnInput -> 
                   False]}, 
                Dynamic[
                 CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                FrameMargins -> 0], 
               MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
              OGRe`TInfo["4-Velocity"], Appearance -> "Frameless", BaseStyle -> 
              "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"], 
             ButtonBox[
              TagBox[
               
               PaneSelectorBox[{
                False -> StyleBox[
                  "\"SpatialDistance\"", "Hyperlink", StripOnInput -> False], 
                 True -> StyleBox[
                  "\"SpatialDistance\"", "HyperlinkActive", StripOnInput -> 
                   False]}, 
                Dynamic[
                 CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                FrameMargins -> 0], 
               MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
              OGRe`TInfo["SpatialDistance"], Appearance -> "Frameless", 
              BaseStyle -> "Hyperlink", Evaluator -> Automatic, Method -> 
              "Preemptive"]}, "RowWithSeparators"]},
          "RowDefault"]},
        {
         TemplateBox[{"3", "\". \"", 
           StyleBox[
            ButtonBox[
             TagBox[
              
              PaneSelectorBox[{
               False -> StyleBox[
                 "\"Schwarzschild\"", "Hyperlink", StripOnInput -> False], 
                True -> StyleBox[
                 "\"Schwarzschild\"", "HyperlinkActive", StripOnInput -> 
                  False]}, 
               Dynamic[
                CurrentValue["MouseOver"]], ImageSize -> Automatic, 
               FrameMargins -> 0], 
              MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
             OGRe`TInfo["Schwarzschild"], Appearance -> "Frameless", 
             BaseStyle -> "Hyperlink", Evaluator -> Automatic, Method -> 
             "Preemptive"], Bold, StripOnInput -> False], 
           "\" \[RightArrow] \"", 
           TemplateBox[{"|", "\"|\"", 
             ButtonBox[
              TagBox[
               
               PaneSelectorBox[{
                False -> StyleBox[
                  "\"Kretschmann\"", "Hyperlink", StripOnInput -> False], 
                 True -> StyleBox[
                  "\"Kretschmann\"", "HyperlinkActive", StripOnInput -> 
                   False]}, 
                Dynamic[
                 CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                FrameMargins -> 0], 
               MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
              OGRe`TInfo["Kretschmann"], Appearance -> "Frameless", BaseStyle -> 
              "Hyperlink", Evaluator -> Automatic, Method -> "Preemptive"]}, 
            "RowWithSeparators"]},
          "RowDefault"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"a53c7901-c967-4b6d-b51a-3072c8e490f4"]
}, Open  ]],

Cell["\<\
We see that we created 9 tensors in total so far: 2 coordinate systems, 3 \
metrics, 3 tensors associated with the Minkowski metric, and 1 tensor \
associated with the Schwarzschild metric.\
\>", "Text",ExpressionUUID->"5edc09df-82c7-44d7-81b2-e82b4038deda"],

Cell[TextData[{
 "To import a tensor back after it has been exported, use the ",
 StyleBox["TImport", "Input"],
 " module:"
}], "Text",ExpressionUUID->"2eb03793-fcb8-46e5-b9a8-9893b839e570"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TImport"}]], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"ab941f45-1fc0-4195-b07d-82994af9d50b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TImport[\\\", StyleBox[\\\"data\\\", Bold, Rule[StripOnInput, False]], \\\"] \
imports a tensor that has been exported using TExport[].\\\"}]], \
TextCell[Row[List[\\\"TImport[\\\", Style[\\\"data\\\", Bold], \\\"] imports \
a tensor that has been exported using TExport[].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TImport", "[", "OGRe`Private`data_Association", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`newID", "}"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`newID", "=", 
                    RowBox[{
                    RowBox[{"Keys", "[", "OGRe`Private`data", "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`data", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", "\"OGReVersion\""}], 
                    "]"}]}], "||", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`data", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "[", "\"OGReVersion\"", "]"}], 
                    "\[NotEqual]", "OGRe`Private`OGReVersion"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Warning: The imported tensor was created in a \
different version of OGRe. Compatibility issues may occur.\"", "]"}], ";"}]}],
                     "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`newID", "]"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    RowBox[{"KeyDrop", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Values", "[", "OGRe`Private`data", "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    ",", "\"OGReVersion\""}], "]"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TImport\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TImport[\\\", StyleBox[\\\"data\\\", Bold, Rule[StripOnInput, False]], \\\"] \
imports a tensor that has been exported using TExport[].\\\"}]], \
TextCell[Row[List[\\\"TImport[\\\", Style[\\\"data\\\", Bold], \\\"] imports \
a tensor that has been exported using TExport[].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TImport[\", StyleBox[\"data\", \
Bold, Rule[StripOnInput, False]], \"] imports a tensor that has been exported \
using TExport[].\"}]], TextCell[Row[List[\"TImport[\", Style[\"data\", Bold], \
\"] imports a tensor that has been exported using TExport[].\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TImport, {OGRe`TImport[
         Pattern[OGRe`Private`data, 
          Blank[Association]]] :> 
       Module[{OGRe`Private`newID}, OGRe`Private`newID = Part[
            Keys[OGRe`Private`data], 1]; If[
           Or[
            Not[
             KeyExistsQ[
              Part[OGRe`Private`data, 1], "OGReVersion"]], 
            Part[OGRe`Private`data, 1]["OGReVersion"] != 
            OGRe`Private`OGReVersion], 
           OGRe`Private`OGRePrint[
            "Warning: The imported tensor was created in a different version \
of OGRe. Compatibility issues may occur."]; Null]; 
         OGRe`Private`CheckIfOverwriting[OGRe`Private`newID]; 
         OGRe`Private`SetTensorID[OGRe`Private`newID, 
           KeyDrop[
            Part[
             Values[OGRe`Private`data], 1], "OGReVersion"]]; 
         Return[OGRe`Private`newID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TImport"|>, False]]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"cbf5edee-cb23-41c0-ae88-32b8aafd5069"]
}, Open  ]],

Cell[TextData[{
 "To export ",
 StyleBox["all",
  FontWeight->"Bold"],
 " of the tensors defined in the current session, we may use the ",
 StyleBox["TExportAll", "Input"],
 " module:"
}], "Text",ExpressionUUID->"fecace99-9ae6-4da6-9fd1-e31fec3fbb31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TExportAll"}]], "Input",
 CellLabel->"In[98]:=",ExpressionUUID->"79dae3ce-eea8-4270-8fff-ce4263f5b9d8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TExportAll[] exports the raw tensor data for all tensors defined in the \
current session as an Association.\\\\nTExportAll[\\\", StyleBox[\\\"filename\
\\\", Bold, Rule[StripOnInput, False]], \\\"] exports the data to \\\", \
StyleBox[\\\"filename\\\", Bold, Rule[StripOnInput, False]], \\\". If a full \
path is not given, the file will be created in the current working directory, \
as given by Directory[]. This directory can be changed using SetDirectory[]. \
Note that the file will be overwritten if it already exists.\\\"}]], \
TextCell[Row[List[\\\"TExportAll[] exports the raw tensor data for all \
tensors defined in the current session as an \
Association.\\\\nTExportAll[\\\", Style[\\\"filename\\\", Bold], \\\"] \
exports the data to \\\", Style[\\\"filename\\\", Bold], \\\". If a full path \
is not given, the file will be created in the current working directory, as \
given by Directory[]. This directory can be changed using SetDirectory[]. \
Note that the file will be overwritten if it already exists.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TExportAll", "[", "]"}], ":=", 
                    "OGRe`Private`TensorData"}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TExportAll", "[", "OGRe`Private`filename_String", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`stream", "}"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`stream", "=", 
                    
                    RowBox[{"OpenWrite", "[", "OGRe`Private`filename", 
                    "]"}]}], ";", 
                    RowBox[{"Write", "[", 
                    RowBox[{"OGRe`Private`stream", ",", 
                    "OGRe`Private`TensorData"}], "]"}], ";", 
                    RowBox[{"Close", "[", "OGRe`Private`stream", "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    
                    RowBox[{"\"Exported all tensor data to \"", ",", 
                    "OGRe`Private`filename", ",", "\".\""}], "]"}], ";"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TExportAll\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TExportAll[] exports the raw tensor data for all tensors defined in the \
current session as an Association.\\\\nTExportAll[\\\", StyleBox[\\\"filename\
\\\", Bold, Rule[StripOnInput, False]], \\\"] exports the data to \\\", \
StyleBox[\\\"filename\\\", Bold, Rule[StripOnInput, False]], \\\". If a full \
path is not given, the file will be created in the current working directory, \
as given by Directory[]. This directory can be changed using SetDirectory[]. \
Note that the file will be overwritten if it already exists.\\\"}]], \
TextCell[Row[List[\\\"TExportAll[] exports the raw tensor data for all \
tensors defined in the current session as an \
Association.\\\\nTExportAll[\\\", Style[\\\"filename\\\", Bold], \\\"] \
exports the data to \\\", Style[\\\"filename\\\", Bold], \\\". If a full path \
is not given, the file will be created in the current working directory, as \
given by Directory[]. This directory can be changed using SetDirectory[]. \
Note that the file will be overwritten if it already exists.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TExportAll[] exports the raw \
tensor data for all tensors defined in the current session as an Association.\
\\nTExportAll[\", StyleBox[\"filename\", Bold, Rule[StripOnInput, False]], \
\"] exports the data to \", StyleBox[\"filename\", Bold, Rule[StripOnInput, \
False]], \". If a full path is not given, the file will be created in the \
current working directory, as given by Directory[]. This directory can be \
changed using SetDirectory[]. Note that the file will be overwritten if it \
already exists.\"}]], TextCell[Row[List[\"TExportAll[] exports the raw tensor \
data for all tensors defined in the current session as an \
Association.\\nTExportAll[\", Style[\"filename\", Bold], \"] exports the data \
to \", Style[\"filename\", Bold], \". If a full path is not given, the file \
will be created in the current working directory, as given by Directory[]. \
This directory can be changed using SetDirectory[]. Note that the file will \
be overwritten if it already exists.\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TExportAll, {
      OGRe`TExportAll[] :> OGRe`Private`TensorData, OGRe`TExportAll[
         Pattern[OGRe`Private`filename, 
          Blank[String]]] :> 
       Module[{OGRe`Private`stream}, 
         OGRe`Private`stream = OpenWrite[OGRe`Private`filename]; 
         Write[OGRe`Private`stream, OGRe`Private`TensorData]; 
         Close[OGRe`Private`stream]; 
         OGRe`Private`OGRePrint[
          "Exported all tensor data to ", OGRe`Private`filename, "."]; 
         Null]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> 
    None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "OGRe`TExportAll"|>, 
   False]]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"ce8929e0-31d5-4c48-84a6-71dca5afb168"]
}, Open  ]],

Cell[TextData[{
 "The output will be an ",
 StyleBox["Association", "Input"],
 " as above, where the keys are the names of all the tensors defined so far \
in the current session, and the value of each key is the data of that tensor. \
We will not show the complete output here, since it is very long, but let us \
just demonstrate that the keys of the ",
 StyleBox["Association", "Input"],
 " are all of the tensors we defined so far in this session:"
}], "Text",ExpressionUUID->"940a2d25-57c8-4d36-9a51-37fd02340356"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "@", 
  RowBox[{"TExportAll", "[", "]"}]}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"daeb14f1-e9bc-4984-9118-7dcc2f3bee22"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Options", ",", "\<\"Cartesian\"\>", ",", "\<\"Spherical\"\>", 
   ",", "\<\"Minkowski\"\>", ",", "\<\"Schwarzschild\"\>", 
   ",", "\<\"Alcubierre\"\>", ",", "\<\"Kretschmann\"\>", 
   ",", "\<\"PerfectFluid\"\>", ",", "\<\"4-Velocity\"\>", 
   ",", "\<\"SpatialDistance\"\>"}], "}"}]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"1849a082-17d4-4ded-9374-5426820dd6de"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TExportAll", "Input"],
 " exports not only the tensors, but also a special key called ",
 StyleBox["Options", "Input"],
 ", which contains the current version of the package (for compatibility \
purposes, in case the storage format changes in future versions) and any \
options set by the user during the session. Note that keys associated with \
tensor objects, such as ",
 StyleBox["\[OpenCurlyDoubleQuote]Cartesian\[CloseCurlyDoubleQuote]", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]Spherical\[CloseCurlyDoubleQuote]", "Input"],
 ", and so on, are always strings, but ",
 StyleBox["Options", "Input"],
 " is not a string; this is to ensure it doesn\[CloseCurlyQuote]t get \
accidentally interpreted as a tensor object. We can see the options \
configured in this session by reading the value of the ",
 StyleBox["Options", "Input"],
 " key:"
}], "Text",ExpressionUUID->"e412e606-80b3-4614-9d41-83bc74cb4ce1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TExportAll", "[", "]"}], "[", "Options", "]"}]], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"4205f4f5-2bfb-4fae-b2c5-fe98b97633e3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"CurveParameter\"\>", "\[Rule]", "\<\"Global`\[Lambda]\"\>"}], 
   ",", 
   RowBox[{"\<\"IndexLetters\"\>", 
    "\[Rule]", "\<\"\[Mu]\[Nu]\[Rho]\[Sigma]\[Kappa]\[Lambda]\[Alpha]\[Beta]\
\[Gamma]\[Delta]\[CurlyEpsilon]\[Zeta]\[Epsilon]\[Theta]\[Iota]\[Xi]\[Pi]\
\[Tau]\[Phi]\[Chi]\[Psi]\[Omega]\"\>"}], ",", 
   RowBox[{"\<\"OGReVersion\"\>", "\[Rule]", "\<\"v1.7.0 (2021-09-17)\"\>"}], 
   ",", 
   RowBox[{"\<\"Parallelize\"\>", "\[Rule]", "False"}], ",", 
   RowBox[{"\<\"ReservedSymbols\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"t\"\>", ",", "\<\"x\"\>", ",", "\<\"y\"\>", 
      ",", "\<\"z\"\>", ",", "\<\"r\"\>", ",", "\<\"\[Theta]\"\>", 
      ",", "\<\"\[Phi]\"\>", ",", "\<\"M\"\>", ",", "\<\"v\"\>", 
      ",", "\<\"f\"\>", ",", "\<\"\[Rho]\"\>", ",", "\<\"p\"\>"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"SimplifyAssumptions\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"AssumeReal\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"User\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"r", "\[GreaterEqual]", "0"}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[100]=",ExpressionUUID->"2854c96e-1c6c-4898-9e78-8a2ef240d595"]
}, Open  ]],

Cell["\<\
Note that several settings we have already discussed, such as the index \
letters, reserved symbols, and simplification assumptions, are included. This \
means that these settings will be imported when you import the tensor data in \
another Mathematica session - you can start right where you left off, no need \
to reconfigure anything.\
\>", "Text",ExpressionUUID->"1502109e-1b34-45ce-bc51-447cc041a3ee"],

Cell[TextData[{
 "The output of ",
 StyleBox["TExportAll", "Input"],
 " can be saved in a Mathematica notebook, and imported using the module ",
 StyleBox["TImportAll", "Input"],
 ":"
}], "Text",ExpressionUUID->"7c5c423b-89ff-46eb-8ab4-0f45b60dd611"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TImportAll"}]], "Input",
 CellLabel->
  "In[101]:=",ExpressionUUID->"10dcf9fe-9127-4c1d-94a2-ecee62a20896"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TImportAll[\\\", StyleBox[\\\"source\\\", Bold, Rule[StripOnInput, False]], \
\\\"] imports tensor data that has been exported using TExportAll[]. If \\\", \
StyleBox[\\\"source\\\", Bold, Rule[StripOnInput, False]], \\\" is an \
Association, imports the data directly. If \\\", StyleBox[\\\"source\\\", \
Bold, Rule[StripOnInput, False]], \\\" is a file name, imports the data from \
that file. If a full path is not given, the file is assumed to be located in \
the current working directory, as given by Directory[]. This directory can be \
changed using SetDirectory[].\\\\n\\\", StyleBox[\\\"WARNING: This will \
irreversibly delete ALL of the tensors already defined in the current \
session.\\\", Bold, Rule[StripOnInput, False]]}]], \
TextCell[Row[List[\\\"TImportAll[\\\", Style[\\\"source\\\", Bold], \\\"] \
imports tensor data that has been exported using TExportAll[]. If \\\", \
Style[\\\"source\\\", Bold], \\\" is an Association, imports the data \
directly. If \\\", Style[\\\"source\\\", Bold], \\\" is a file name, imports \
the data from that file. If a full path is not given, the file is assumed to \
be located in the current working directory, as given by Directory[]. This \
directory can be changed using SetDirectory[].\\\\n\\\", Style[\\\"WARNING: \
This will irreversibly delete ALL of the tensors already defined in the \
current session.\\\", Bold]]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TImportAll", "[", "OGRe`Private`data_Association", "]"}],
                     ":=", 
                    
                    RowBox[{
                    "OGRe`Private`ImportTensorData", "[", "OGRe`Private`data",
                     "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TImportAll", "[", "OGRe`Private`filename_String", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`data", ",", "OGRe`Private`stream"}],
                     "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    
                    RowBox[{"FileExistsQ", "[", "OGRe`Private`filename", 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TImportAll", "::", "ErrorFile"}], "MessageName"],
                     ",", "OGRe`Private`filename"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`stream", "=", 
                    RowBox[{"OpenRead", "[", "OGRe`Private`filename", "]"}]}],
                     ";", 
                    RowBox[{"OGRe`Private`data", "=", 
                    RowBox[{"Read", "[", "OGRe`Private`stream", "]"}]}], ";", 
                    
                    RowBox[{"OGRe`Private`ImportTensorData", "[", 
                    "OGRe`Private`data", "]"}], ";", 
                    RowBox[{"Close", "[", "OGRe`Private`stream", "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    
                    RowBox[{"\"Imported all tensor data from \"", ",", 
                    "OGRe`Private`filename", ",", "\".\""}], "]"}], ";"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TImportAll\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TImportAll[\\\", StyleBox[\\\"source\\\", Bold, Rule[StripOnInput, False]], \
\\\"] imports tensor data that has been exported using TExportAll[]. If \\\", \
StyleBox[\\\"source\\\", Bold, Rule[StripOnInput, False]], \\\" is an \
Association, imports the data directly. If \\\", StyleBox[\\\"source\\\", \
Bold, Rule[StripOnInput, False]], \\\" is a file name, imports the data from \
that file. If a full path is not given, the file is assumed to be located in \
the current working directory, as given by Directory[]. This directory can be \
changed using SetDirectory[].\\\\n\\\", StyleBox[\\\"WARNING: This will \
irreversibly delete ALL of the tensors already defined in the current \
session.\\\", Bold, Rule[StripOnInput, False]]}]], \
TextCell[Row[List[\\\"TImportAll[\\\", Style[\\\"source\\\", Bold], \\\"] \
imports tensor data that has been exported using TExportAll[]. If \\\", \
Style[\\\"source\\\", Bold], \\\" is an Association, imports the data \
directly. If \\\", Style[\\\"source\\\", Bold], \\\" is a file name, imports \
the data from that file. If a full path is not given, the file is assumed to \
be located in the current working directory, as given by Directory[]. This \
directory can be changed using SetDirectory[].\\\\n\\\", Style[\\\"WARNING: \
This will irreversibly delete ALL of the tensors already defined in the \
current session.\\\", Bold]]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TImportAll[\", \
StyleBox[\"source\", Bold, Rule[StripOnInput, False]], \"] imports tensor \
data that has been exported using TExportAll[]. If \", StyleBox[\"source\", \
Bold, Rule[StripOnInput, False]], \" is an Association, imports the data \
directly. If \", StyleBox[\"source\", Bold, Rule[StripOnInput, False]], \" is \
a file name, imports the data from that file. If a full path is not given, \
the file is assumed to be located in the current working directory, as given \
by Directory[]. This directory can be changed using SetDirectory[].\\n\", \
StyleBox[\"WARNING: This will irreversibly delete ALL of the tensors already \
defined in the current session.\", Bold, Rule[StripOnInput, False]]}]], \
TextCell[Row[List[\"TImportAll[\", Style[\"source\", Bold], \"] imports \
tensor data that has been exported using TExportAll[]. If \", \
Style[\"source\", Bold], \" is an Association, imports the data directly. If \
\", Style[\"source\", Bold], \" is a file name, imports the data from that \
file. If a full path is not given, the file is assumed to be located in the \
current working directory, as given by Directory[]. This directory can be \
changed using SetDirectory[].\\n\", Style[\"WARNING: This will irreversibly \
delete ALL of the tensors already defined in the current session.\", \
Bold]]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TImportAll, {OGRe`TImportAll[
         Pattern[OGRe`Private`data, 
          Blank[Association]]] :> 
       OGRe`Private`ImportTensorData[OGRe`Private`data], OGRe`TImportAll[
         Pattern[OGRe`Private`filename, 
          Blank[String]]] :> 
       Module[{OGRe`Private`data, OGRe`Private`stream}, If[
           Not[
            FileExistsQ[OGRe`Private`filename]], Message[
             MessageName[OGRe`TImportAll, "ErrorFile"], 
             OGRe`Private`filename]; Abort[]; Null]; 
         OGRe`Private`stream = OpenRead[OGRe`Private`filename]; 
         OGRe`Private`data = Read[OGRe`Private`stream]; 
         OGRe`Private`ImportTensorData[OGRe`Private`data]; 
         Close[OGRe`Private`stream]; 
         OGRe`Private`OGRePrint[
          "Imported all tensor data from ", OGRe`Private`filename, "."]; 
         Null]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> 
    None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "OGRe`TImportAll"|>, 
   False]]], "Output",
 CellLabel->"Out[101]=",ExpressionUUID->"bd094912-ea8c-481a-a8ac-d99bcea75d70"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["TImportAll", "Input"],
 " will delete any tensors already defined in the current session, whether or \
not they have the same ID as an imported tensor. To keep them, first export \
them into an ",
 StyleBox["Association", "Input"],
 ", ",
 StyleBox["Join", "Input"],
 " it with the ",
 StyleBox["Association", "Input"],
 " you wish the import, and then use ",
 StyleBox["TImportAll", "Input"],
 " on the result - or, alternatively, import the tensors one by one using ",
 StyleBox["TImport", "Input"],
 ". Similarly, any settings configured during the session will be replaced \
with the imported settings."
}], "Text",ExpressionUUID->"856bd527-e061-4172-8195-0bfba1d67151"],

Cell[TextData[{
 "If a file name is given to ",
 StyleBox["TExportAll", "Input"],
 ", the output will be saved to that file. If only the name of the file is \
given, and not a full path - e.g. ",
 StyleBox["TExportAll[\[OpenCurlyDoubleQuote]OGReTensors.m\
\[CloseCurlyDoubleQuote]]", "Input"],
 " - then the file will be saved in the current working directory, as given \
by ",
 StyleBox["Directory[]", "Input"],
 ". To change the working directory, use ",
 StyleBox["SetDirectory[]", "Input"],
 " before exporting the file. To import from the file, pass the file name to ",
 StyleBox["TImportAll", "Input"],
 ", e.g. ",
 StyleBox["TImportAll[\[OpenCurlyDoubleQuote]OGReTensors.m\
\[CloseCurlyDoubleQuote]]", "Input"],
 "."
}], "Text",ExpressionUUID->"74010054-409c-409b-8dbc-780297cafc7d"],

Cell[TextData[{
 "Note that if for some reason you would like to delete all the tensors \
defined so far in the current session, you can simply import an empty ",
 StyleBox["Association", "Input"],
 " as follows: ",
 StyleBox["TImportAll[<||>]", "Input"],
 ". Be careful, as this action is ",
 StyleBox["irreversible",
  FontWeight->"Bold"],
 "!"
}], "Text",ExpressionUUID->"4f7cf75b-bc09-4e7f-a8b3-6ff20ce65a31"],

Cell[TextData[{
 "Finally, sometimes you may want to extract the components of a tensor in a \
specific representation as a ",
 StyleBox["List", "Input"],
 " so you can use them outside of this package, as regular Mathematica \
expressions rather than tensor objects. This is done using ",
 StyleBox["TGetComponents", "Input"],
 ":"
}], "Text",ExpressionUUID->"06709be0-f339-4262-b2b7-afc73c125225"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TGetComponents"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"592a131f-863c-400f-a2e8-8e2a2c479576"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TGetComponents[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\", \
\\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
extracts the components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" with the index configuration \\\", StyleBox[\
\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\" as a list.\\\\n\\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\nIf \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and/or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" are \
omitted, the default values are used, and a message will let the user know \
which representation the components are given in, to avoid \
confusion.\\\\nTGetComponents[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are returned. Typically this would \
be ReplaceAll[rules] to apply the rules to the elements, but any function can \
be used.\\\"}]], TextCell[Row[List[\\\"TGetComponents[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] extracts the components of the \
tensor object \\\", Style[\\\"ID\\\", Bold], \\\" with the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and in the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\" as a list.\\\\n\\\", \
Style[\\\"indices\\\", Bold], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\nIf \\\", \
Style[\\\"indices\\\", Bold], \\\" and/or \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" are omitted, the default values are used, and a message will let \
the user know which representation the components are given in, to avoid \
confusion.\\\\nTGetComponents[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \\\", \
Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, and \
then automatically simplifies them, before they are returned. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"TGetComponents", "[", 
                    RowBox[{"OGRe`Private`ID_String", ",", 
                    RowBox[{"OGRe`Private`indices_List", ":", 
                    RowBox[{"{", "\"_UseDefault_\"", "}"}]}], ",", 
                    
                    RowBox[{"OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`function_", ":", "Identity"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", "OGRe`Private`function", "]"}]}], 
                    "&&", 
                    RowBox[{"!", 
                    
                    RowBox[{"StringQ", "[", "OGRe`Private`function", 
                    "]"}]}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`components", ",", 
                    "OGRe`Private`useCoords", ",", "OGRe`Private`useIndices", 
                    ",", 
                    RowBox[{"OGRe`Private`usingMessage", "=", "\"\""}]}], 
                    "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`ID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`indices", "===", 
                    RowBox[{"{", "\"_UseDefault_\"", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`useIndices", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultIndices\"", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`usingMessage", "=", 
                    RowBox[{"\"the default index configuration \"", "<>", 
                    
                    RowBox[{"ToString", "[", "OGRe`Private`useIndices", 
                    "]"}]}]}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIndicesForm", "[", 
                    "OGRe`Private`indices", "]"}], ";", 
                    RowBox[{"OGRe`Private`CheckIndicesRank", "[", 
                    RowBox[{"OGRe`Private`indices", ",", "OGRe`Private`ID"}], 
                    "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useIndices", "=", 
                    "OGRe`Private`indices"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", "OGRe`Private`ID",
                     "]"}], "[", "\"DefaultCoords\"", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`usingMessage", "=!=", "\"\""}], ",", 
                    RowBox[{"OGRe`Private`usingMessage", "=", 
                    
                    RowBox[{"OGRe`Private`usingMessage", "<>", 
                    "\" and \""}]}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`usingMessage", "=", 
                    
                    RowBox[{"OGRe`Private`usingMessage", "<>", 
                    "\"the default coordinate system \\\"\"", "<>", 
                    "OGRe`Private`useCoords", "<>", "\"\\\"\""}]}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`usingMessage", "=!=", "\"\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TGetComponents", "::", "UsingDefault"}], 
                    "MessageName"], ",", "OGRe`Private`usingMessage"}], "]"}],
                     ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`components", "=", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    
                    RowBox[{"OGRe`Private`ID", ",", "OGRe`Private`useIndices",
                     ",", "OGRe`Private`useCoords"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`function", "=!=", "Identity"}], ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`components", "=", 
                    RowBox[{"Map", "[", 
                    
                    RowBox[{"OGRe`Private`function", ",", 
                    "OGRe`Private`components", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"ArrayDepth", "[", "OGRe`Private`components", 
                    "]"}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`components", "=", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`components", "]"}]}], ";"}]}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`components", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TGetComponents\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TGetComponents[\\\", StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \
\\\", \\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\", \
\\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\"] \
extracts the components of the tensor object \\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\" with the index configuration \\\", StyleBox[\
\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and in the coordinate \
system \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\" as a list.\\\\n\\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\nIf \\\", \
StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" and/or \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" are \
omitted, the default values are used, and a message will let the user know \
which representation the components are given in, to avoid \
confusion.\\\\nTGetComponents[\\\", StyleBox[\\\"ID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"indices\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\"] maps \\\", StyleBox[\\\"function\\\", Bold, \
Rule[StripOnInput, False]], \\\" to each of the tensor's elements, and then \
automatically simplifies them, before they are returned. Typically this would \
be ReplaceAll[rules] to apply the rules to the elements, but any function can \
be used.\\\"}]], TextCell[Row[List[\\\"TGetComponents[\\\", Style[\\\"ID\\\", \
Bold], \\\", \\\", Style[\\\"indices\\\", Bold], \\\", \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\"] extracts the components of the \
tensor object \\\", Style[\\\"ID\\\", Bold], \\\" with the index \
configuration \\\", Style[\\\"indices\\\", Bold], \\\" and in the coordinate \
system \\\", Style[\\\"coordinatesID\\\", Bold], \\\" as a list.\\\\n\\\", \
Style[\\\"indices\\\", Bold], \\\" must be a list of the form \
{\\\\[PlusMinus]1, \\\\[PlusMinus]1, ...}, where +1 corresponds to an upper \
index and -1 corresponds to a lower index.\\\\nIf \\\", \
Style[\\\"indices\\\", Bold], \\\" and/or \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" are omitted, the default values are used, and a message will let \
the user know which representation the components are given in, to avoid \
confusion.\\\\nTGetComponents[\\\", Style[\\\"ID\\\", Bold], \\\", \\\", \
Style[\\\"indices\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\", \\\", Style[\\\"function\\\", Bold], \\\"] maps \\\", \
Style[\\\"function\\\", Bold], \\\" to each of the tensor's elements, and \
then automatically simplifies them, before they are returned. Typically this \
would be ReplaceAll[rules] to apply the rules to the elements, but any \
function can be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TGetComponents[\", \
StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"indices\
\", Bold, Rule[StripOnInput, False]], \", \", StyleBox[\"coordinatesID\", \
Bold, Rule[StripOnInput, False]], \"] extracts the components of the tensor \
object \", StyleBox[\"ID\", Bold, Rule[StripOnInput, False]], \" with the \
index configuration \", StyleBox[\"indices\", Bold, Rule[StripOnInput, \
False]], \" and in the coordinate system \", StyleBox[\"coordinatesID\", \
Bold, Rule[StripOnInput, False]], \" as a list.\\n\", StyleBox[\"indices\", \
Bold, Rule[StripOnInput, False]], \" must be a list of the form \
{\\[PlusMinus]1, \\[PlusMinus]1, ...}, where +1 corresponds to an upper index \
and -1 corresponds to a lower index.\\nIf \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \" and/or \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \" are omitted, the default values are used, and \
a message will let the user know which representation the components are \
given in, to avoid confusion.\\nTGetComponents[\", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \", \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \"] maps \", StyleBox[\"function\", Bold, \
Rule[StripOnInput, False]], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are returned. Typically this would \
be ReplaceAll[rules] to apply the rules to the elements, but any function can \
be used.\"}]], TextCell[Row[List[\"TGetComponents[\", Style[\"ID\", Bold], \
\", \", Style[\"indices\", Bold], \", \", Style[\"coordinatesID\", Bold], \"] \
extracts the components of the tensor object \", Style[\"ID\", Bold], \" with \
the index configuration \", Style[\"indices\", Bold], \" and in the \
coordinate system \", Style[\"coordinatesID\", Bold], \" as a list.\\n\", \
Style[\"indices\", Bold], \" must be a list of the form {\\[PlusMinus]1, \
\\[PlusMinus]1, ...}, where +1 corresponds to an upper index and -1 \
corresponds to a lower index.\\nIf \", Style[\"indices\", Bold], \" and/or \
\", Style[\"coordinatesID\", Bold], \" are omitted, the default values are \
used, and a message will let the user know which representation the \
components are given in, to avoid confusion.\\nTGetComponents[\", \
Style[\"ID\", Bold], \", \", Style[\"indices\", Bold], \", \", \
Style[\"coordinatesID\", Bold], \", \", Style[\"function\", Bold], \"] maps \
\", Style[\"function\", Bold], \" to each of the tensor's elements, and then \
automatically simplifies them, before they are returned. Typically this would \
be ReplaceAll[rules] to apply the rules to the elements, but any function can \
be used.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TGetComponents, {Condition[
         OGRe`TGetComponents[
          Pattern[OGRe`Private`ID, 
           Blank[String]], 
          Optional[
           Pattern[OGRe`Private`indices, 
            Blank[List]], {"_UseDefault_"}], 
          Optional[
           Pattern[OGRe`Private`coordinatesID, 
            Blank[String]], "_UseDefault_"], 
          Optional[
           Pattern[OGRe`Private`function, 
            Blank[]], Identity]], 
         And[
          Not[
           ListQ[OGRe`Private`function]], 
          Not[
           StringQ[OGRe`Private`function]]]] :> 
       Module[{OGRe`Private`components, OGRe`Private`useCoords, 
          OGRe`Private`useIndices, OGRe`Private`usingMessage = ""}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`ID]; 
         If[OGRe`Private`indices === {"_UseDefault_"}, 
           OGRe`Private`useIndices = 
            OGRe`Private`TensorData[OGRe`Private`ID]["DefaultIndices"]; 
           OGRe`Private`usingMessage = 
            "the default index configuration " <> 
             ToString[OGRe`Private`useIndices], 
           OGRe`Private`CheckIndicesForm[OGRe`Private`indices]; 
           OGRe`Private`CheckIndicesRank[
            OGRe`Private`indices, OGRe`Private`ID]; 
           OGRe`Private`useIndices = OGRe`Private`indices; Null]; 
         If[OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
            OGRe`Private`TensorData[OGRe`Private`ID]["DefaultCoords"]; 
           If[OGRe`Private`usingMessage =!= "", OGRe`Private`usingMessage = 
             OGRe`Private`usingMessage <> " and "]; 
           OGRe`Private`usingMessage = 
            OGRe`Private`usingMessage <> "the default coordinate system \"" <> 
             OGRe`Private`useCoords <> "\"", 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; 
         If[OGRe`Private`usingMessage =!= "", Message[
             MessageName[OGRe`TGetComponents, "UsingDefault"], 
             OGRe`Private`usingMessage]; Null]; 
         OGRe`Private`components = 
          OGRe`Private`AddRepresentation[
           OGRe`Private`ID, OGRe`Private`useIndices, OGRe`Private`useCoords]; 
         If[OGRe`Private`function =!= Identity, 
           OGRe`Private`components = 
            Map[OGRe`Private`function, OGRe`Private`components, {
               ArrayDepth[OGRe`Private`components]}]; 
           OGRe`Private`components = 
            OGRe`Private`TensorSimplify[OGRe`Private`components]; Null]; 
         Return[OGRe`Private`components]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TGetComponents"|>, False]]], "Output",
 CellLabel->"Out[102]=",ExpressionUUID->"a4253f60-6b5e-4576-ba65-d1a1a2edf275"]
}, Open  ]],

Cell["For example :", \
"Text",ExpressionUUID->"ef466656-995f-44b9-9e38-ab08040ba4a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InverseSchwarzschild", "=", 
  RowBox[{"TGetComponents", "[", 
   RowBox[{"\"\<Schwarzschild\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", "\"\<Spherical\>\""}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"87d8306e-8172-4b92-adf8-07e5464f4ca9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["r", 
      RowBox[{
       RowBox[{"2", " ", "M"}], "-", "r"}]], ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"1", "-", 
      FractionBox[
       RowBox[{"2", " ", "M"}], "r"]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     FractionBox["1", 
      SuperscriptBox["r", "2"]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     FractionBox[
      SuperscriptBox[
       RowBox[{"Csc", "[", "\[Theta]", "]"}], "2"], 
      SuperscriptBox["r", "2"]]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[103]=",ExpressionUUID->"26d00328-109e-4859-8ad7-ed7c9d2ddf92"]
}, Open  ]],

Cell[TextData[{
 "We can now treat ",
 StyleBox["InverseSchwarzschild", "Input"],
 " as any other ",
 StyleBox["List", "Input"],
 " in Mathematica - for example, extract the element at a particular position:"
}], "Text",ExpressionUUID->"0fbef91f-52b0-472b-87c0-d90e11a55aa0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InverseSchwarzschild", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"79496bcd-5579-472f-88bd-93a4ac5c07f0"],

Cell[BoxData[
 FractionBox["r", 
  RowBox[{
   RowBox[{"2", " ", "M"}], "-", "r"}]]], "Output",
 CellLabel->"Out[104]=",ExpressionUUID->"d31b48f2-7cb8-4950-ad3b-ad4b22a0c59b"]
}, Open  ]],

Cell["\<\
If the desired index configuration and/or coordinate system are not \
specified, the default ones will be used. However, it is important to always \
know exactly which representation the components are in, to avoid confusion. \
Thus, you will be notified which representation was used:\
\>", "Text",ExpressionUUID->"15cec4c5-4466-4a93-b249-46d88215fa77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", "\"\<Schwarzschild\>\"", "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"b0561b93-bda9-4ed9-bf6d-5d74fdb2e01d"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {-1, \
-1} and the default coordinate system \\\\\\\\\\\\\\\"Spherical\\\\\\\\\\\\\\\
\"\\\\\\\"\\\"}]\\).\"", 2, 105, 9, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[105]:=",ExpressionUUID->"2575ca0d-470a-43c3-9fdd-7c04f4ba420e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      FractionBox[
       RowBox[{"2", " ", "M"}], "r"]}], ",", "0", ",", "0", ",", "0"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["1", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"2", " ", "M"}], "r"]}]], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     SuperscriptBox["r", "2"], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     RowBox[{
      SuperscriptBox["r", "2"], " ", 
      SuperscriptBox[
       RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[105]=",ExpressionUUID->"39cf783f-f61b-4681-b272-b60cd10ae88f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TGetComponents", "Input"],
 " can take as its last argument a function, which will be applied to the \
elements. The elements will then be simplified, and the result will be \
returned. This works exactly the same as providing a function to ",
 StyleBox["TList", "Input"],
 " and ",
 StyleBox["TShow", "Input"],
 " (see above). For example, here are the components of the Schwarzschild \
metric on the hypersurface with ",
 StyleBox["\[Theta] = \[Pi]/2", "InlineFormula"],
 ":"
}], "Text",ExpressionUUID->"8a642a93-21fd-4147-ab75-994c79161756"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", 
  RowBox[{"\"\<Schwarzschild\>\"", ",", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{"\[Theta]", "\[Rule]", 
     FractionBox["\[Pi]", "2"]}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"88d20673-6c1e-400c-80d1-33d01f8673da"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {-1, \
-1} and the default coordinate system \\\\\\\\\\\\\\\"Spherical\\\\\\\\\\\\\\\
\"\\\\\\\"\\\"}]\\).\"", 2, 106, 10, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[106]:=",ExpressionUUID->"fac600fc-e2bb-4e77-8ab7-bdaaa8b9a919"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      FractionBox[
       RowBox[{"2", " ", "M"}], "r"]}], ",", "0", ",", "0", ",", "0"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["1", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"2", " ", "M"}], "r"]}]], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     SuperscriptBox["r", "2"], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     SuperscriptBox["r", "2"]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[106]=",ExpressionUUID->"6230dc10-e234-4c65-8757-68fbbaa985b9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calculations with tensors", \
"Section",ExpressionUUID->"33c5c060-b142-426f-8a4f-5568514ee17e"],

Cell[CellGroupData[{

Cell["The TCalc module", \
"Subsection",ExpressionUUID->"366c66ef-f172-483d-8cd7-5a86976057c0"],

Cell[TextData[{
 "Now that we have all the bookkeeping of tensors out of the way, we can \
finally discuss how to use those tensors in calculations. In OGRe, all tensor \
calculations are performed using the ",
 StyleBox["TCalc", "Input"],
 " module:"
}], "Text",ExpressionUUID->"2a39c053-3b4a-4f42-ad02-c0cc8736e5be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalc"}]], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"2a64b3d9-178e-491b-a1a5-3e02402c4bfd"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TCalc[\
\\\", StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\"] \
calculates a tensor \\\", StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, \
False]], \\\", which may involve any number of tensors in the format \\\", \
StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"[\\\", StyleBox[\\\
\"indices\\\", Bold, Rule[StripOnInput, False]], \\\"], where \\\", StyleBox[\
\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" is a tensor object and \
\\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" is a \
string representing the order of indices, along with any combination of the \
following operations:\\\\n\\\\[Bullet] Addition: For example, \\\\\\\"A\\\\\\\
\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"] + \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Contraction: For example, \
\\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Lambda]\\\\\\\"] . \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Lambda]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Multiplication by scalar: For example, 2 * \\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\
\\\\[Nu]\\\\\\\"].\\\\nTCalc[\\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\"[\\\", StyleBox[\\\"targetIndices\\\", Bold, \
Rule[StripOnInput, False]], \\\"], \\\", StyleBox[\\\"formula\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates a tensor \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object.\\\\n\\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\" specifies the ID of the tensor object in \
which to store the result. If omitted, the ID \\\\\\\"Result\\\\\\\" will be \
used.\\\\n\\\", StyleBox[\\\"targetIndices\\\", Bold, Rule[StripOnInput, \
False]], \\\" specifies the order of indices of the resulting tensor. The \
indices must be a permutation of the free indices of \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\". If omitted, \
the indices are assumed to be in the same order as they appear in \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\".\\\\n\\\", \
StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\" specifies the \
symbol to use for the resulting tensor. If omitted, the placeholder symbol \\\
\\[DottedSquare] will be used.\\\"}]], TextCell[Row[List[\\\"TCalc[\\\", \
Style[\\\"formula\\\", Bold], \\\"] calculates a tensor \\\", \
Style[\\\"formula\\\", Bold], \\\", which may involve any number of tensors \
in the format \\\", Style[\\\"ID\\\", Bold], \\\"[\\\", \
Style[\\\"indices\\\", Bold], \\\"], where \\\", Style[\\\"ID\\\", Bold], \
\\\" is a tensor object and \\\", Style[\\\"indices\\\", Bold], \\\" is a \
string representing the order of indices, along with any combination of the \
following operations:\\\\n\\\\[Bullet] Addition: For example, \\\\\\\"A\\\\\\\
\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"] + \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Contraction: For example, \
\\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Lambda]\\\\\\\"] . \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Lambda]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Multiplication by scalar: For example, 2 * \\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\
\\\\[Nu]\\\\\\\"].\\\\nTCalc[\\\", Style[\\\"targetID\\\", Bold], \\\"[\\\", \
Style[\\\"targetIndices\\\", Bold], \\\"], \\\", Style[\\\"formula\\\", \
Bold], \\\", \\\", Style[\\\"symbol\\\", Bold], \\\"] calculates a tensor \
\\\", Style[\\\"formula\\\", Bold], \\\" and stores the result in a new \
tensor object.\\\\n\\\", Style[\\\"targetID\\\", Bold], \\\" specifies the ID \
of the tensor object in which to store the result. If omitted, the ID \
\\\\\\\"Result\\\\\\\" will be used.\\\\n\\\", Style[\\\"targetIndices\\\", \
Bold], \\\" specifies the order of indices of the resulting tensor. The \
indices must be a permutation of the free indices of \\\", \
Style[\\\"formula\\\", Bold], \\\". If omitted, the indices are assumed to be \
in the same order as they appear in \\\", Style[\\\"formula\\\", Bold], \\\".\
\\\\n\\\", Style[\\\"symbol\\\", Bold], \\\" specifies the symbol to use for \
the resulting tensor. If omitted, the placeholder symbol \\\\[DottedSquare] \
will be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCalc", "[", 
                    RowBox[{"OGRe`Private`RHSExpression_", ",", 
                    
                    RowBox[{
                    "OGRe`Private`symbol_String", ":", 
                    "\"\[DottedSquare]\""}]}], "]"}], ":=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`DefaultResultID", "[", "\"\"", "]"}], ",", 
                    "OGRe`Private`RHSExpression", ",", 
                    "OGRe`Private`symbol"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TCalc", "[", 
                    
                    RowBox[{
                    "OGRe`Private`LHSTensorID_String", ",", 
                    "OGRe`Private`RHSExpression_", ",", 
                    
                    RowBox[{
                    "OGRe`Private`symbol_String", ":", 
                    "\"\[DottedSquare]\""}]}], "]"}], ":=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`LHSTensorID", "[", "\"\"", "]"}], 
                    ",", "OGRe`Private`RHSExpression", ",", 
                    "OGRe`Private`symbol"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "OGRe`Private`LHSTensorID_String", "[", 
                    "OGRe`Private`LHSIndices_String", "]"}], ",", 
                    "OGRe`Private`RHSExpression_", ",", 
                    
                    RowBox[{
                    "OGRe`Private`symbol_String", ":", 
                    "\"\[DottedSquare]\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`allVars", ",", 
                    "OGRe`Private`components", ",", "OGRe`Private`LHSVars", 
                    ",", "OGRe`Private`newComponents", ",", 
                    "OGRe`Private`newIndices", ",", "OGRe`Private`result", 
                    ",", "OGRe`Private`resultID", ",", 
                    "OGRe`Private`resultIndices", ",", "OGRe`Private`RHSVars",
                     ",", "OGRe`Private`rules", ",", "OGRe`Private`useCoords",
                     ",", "OGRe`Private`useIndices"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`LHSTensorID", "=!=", 
                    "OGRe`Private`DefaultResultID"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfOverwriting", "[", 
                    "OGRe`Private`LHSTensorID", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`rules", "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`ID_String", "[", 
                    RowBox[{"OGRe`Private`indices_String", "/;", 
                    RowBox[{"!", 
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"Characters", "[", "OGRe`Private`indices", "]"}], 
                    "]"}]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`ID", "[", "OGRe`Private`indices", 
                    "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`firstID_String", "[", 
                    "OGRe`Private`firstIndices_String", "]"}], "+", 
                    
                    RowBox[{"OGRe`Private`secondID_String", "[", 
                    "OGRe`Private`secondIndices_String", "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`AddTensors", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`firstID", "[", 
                    "OGRe`Private`firstIndices", "]"}], "]"}], ",", 
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`secondID", "[", 
                    "OGRe`Private`secondIndices", "]"}], "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`scalar_", " ", 
                    
                    RowBox[{"OGRe`Private`ID_String", "[", 
                    "OGRe`Private`indices_String", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`TensorByScalar", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`ID", "[", "OGRe`Private`indices", 
                    "]"}], "]"}], ",", "OGRe`Private`scalar"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`firstID_String", "[", 
                    "OGRe`Private`firstIndices_String", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`secondID_String", "[", 
                    "OGRe`Private`secondIndices_String", "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`ContractTensors", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`firstID", "[", 
                    "OGRe`Private`firstIndices", "]"}], "]"}], ",", 
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`secondID", "[", 
                    "OGRe`Private`secondIndices", "]"}], "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"TPartialD", "[", 
                    "OGRe`Private`derivativeIndex_String", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`tensorID_String", "[", 
                    "OGRe`Private`tensorIndices_String", "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`DivOrGrad", "[", 
                    RowBox[{"OGRe`Private`derivativeIndex", ",", 
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`tensorID", "[", 
                    "OGRe`Private`tensorIndices", "]"}], "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"TCovariantD", "[", 
                    "OGRe`Private`derivativeIndex_String", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`tensorID_String", "[", 
                    "OGRe`Private`tensorIndices_String", "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"OGRe`Private`CovariantDivOrGrad", "[", 
                    RowBox[{"OGRe`Private`derivativeIndex", ",", 
                    RowBox[{"OGRe`Private`TensorTrace", "[", 
                    
                    RowBox[{"OGRe`Private`tensorID", "[", 
                    "OGRe`Private`tensorIndices", "]"}], "]"}]}], "]"}]}]}], 
                    "}"}]}], ";", 
                    RowBox[{"OGRe`Private`result", "=", 
                    
                    RowBox[{"OGRe`Private`RHSExpression", "//.", 
                    "\[VeryThinSpace]", "OGRe`Private`rules"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"OGRe`Private`result", ",", 
                    RowBox[{"_String", "[", "_String", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TCalc", "::", "ErrorResult"}], "MessageName"], 
                    ",", "OGRe`Private`result"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ClearTemp", "[", "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`resultID", "=", 
                    
                    RowBox[{"OGRe`Private`result", "\[LeftDoubleBracket]", 
                    "0", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"OGRe`Private`resultIndices", "=", 
                    
                    RowBox[{"OGRe`Private`result", "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"OGRe`Private`useIndices", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`resultID", "]"}], "[", "\"DefaultIndices\"",
                     "]"}]}], ";", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`resultID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ";", 
                    RowBox[{"OGRe`Private`components", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`resultID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`useIndices", ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`components", "=", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`components", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`LHSIndices", "===", "\"\""}], ",", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`LHSTensorID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`useIndices", ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`components"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    "OGRe`Private`useIndices"}], ",", 
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`resultID", "]"}], "[", "\"Metric\"", 
                    "]"}]}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Calculated\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "OGRe`Private`symbol"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Sort", "[", 
                    
                    RowBox[{"Characters", "[", "OGRe`Private`LHSIndices", 
                    "]"}], "]"}], "\[NotEqual]", 
                    RowBox[{"Sort", "[", 
                    
                    RowBox[{"Characters", "[", "OGRe`Private`resultIndices", 
                    "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"TCalc", "::", "ErrorIndices"}], "MessageName"], 
                    ",", "OGRe`Private`LHSIndices", ",", 
                    "OGRe`Private`resultIndices"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ClearTemp", "[", "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`allVars", "=", 
                    RowBox[{"Association", "[", "]"}]}], ";", 
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"OGRe`Private`allVars", "[", "#1", "]"}], "=", 
                    RowBox[{"Unique", "[", "\"var\"", "]"}]}], ")"}], "&"}], 
                    ",", 
                    
                    RowBox[{"Characters", "[", "OGRe`Private`LHSIndices", 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`LHSVars", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"OGRe`Private`allVars", "[", "#1", "]"}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"Characters", "[", "OGRe`Private`LHSIndices", 
                    "]"}]}]}], ";", 
                    RowBox[{"OGRe`Private`RHSVars", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"OGRe`Private`allVars", "[", "#1", "]"}], "&"}], 
                    ")"}], "/@", 
                    
                    RowBox[{"Characters", "[", "OGRe`Private`resultIndices", 
                    "]"}]}]}], ";", 
                    RowBox[{"OGRe`Private`newComponents", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`components", "\[LeftDoubleBracket]", 
                    RowBox[{"Sequence", "@@", "OGRe`Private`RHSVars"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#1", ",", "1", ",", 
                    RowBox[{"Length", "[", "OGRe`Private`components", "]"}]}],
                     "}"}], "&"}], ")"}], "/@", "OGRe`Private`LHSVars"}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`newIndices", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`useIndices", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"StringPosition", "[", 
                    RowBox[{"OGRe`Private`resultIndices", ",", 
                    RowBox[{
                    
                    RowBox[{"Characters", "[", "OGRe`Private`LHSIndices", 
                    "]"}], "\[LeftDoubleBracket]", "OGRe`Private`n", 
                    "\[RightDoubleBracket]"}]}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`n", ",", "1", ",", 
                    
                    RowBox[{"StringLength", "[", "OGRe`Private`LHSIndices", 
                    "]"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`LHSTensorID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`newIndices", ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`newComponents"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    "OGRe`Private`newIndices"}], ",", 
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`resultID", "]"}], "[", "\"Metric\"", 
                    "]"}]}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Calculated\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "OGRe`Private`symbol"}]}], "]"}]}], "]"}], ";"}]}], "]"}],
                     ";", 
                    RowBox[{"OGRe`Private`ClearTemp", "[", "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`LHSTensorID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalc\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TCalc[\
\\\", StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\"] \
calculates a tensor \\\", StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, \
False]], \\\", which may involve any number of tensors in the format \\\", \
StyleBox[\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\"[\\\", StyleBox[\\\
\"indices\\\", Bold, Rule[StripOnInput, False]], \\\"], where \\\", StyleBox[\
\\\"ID\\\", Bold, Rule[StripOnInput, False]], \\\" is a tensor object and \
\\\", StyleBox[\\\"indices\\\", Bold, Rule[StripOnInput, False]], \\\" is a \
string representing the order of indices, along with any combination of the \
following operations:\\\\n\\\\[Bullet] Addition: For example, \\\\\\\"A\\\\\\\
\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"] + \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Contraction: For example, \
\\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Lambda]\\\\\\\"] . \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Lambda]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Multiplication by scalar: For example, 2 * \\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\
\\\\[Nu]\\\\\\\"].\\\\nTCalc[\\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\"[\\\", StyleBox[\\\"targetIndices\\\", Bold, \
Rule[StripOnInput, False]], \\\"], \\\", StyleBox[\\\"formula\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"symbol\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates a tensor \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object.\\\\n\\\", StyleBox[\\\"targetID\\\", Bold, \
Rule[StripOnInput, False]], \\\" specifies the ID of the tensor object in \
which to store the result. If omitted, the ID \\\\\\\"Result\\\\\\\" will be \
used.\\\\n\\\", StyleBox[\\\"targetIndices\\\", Bold, Rule[StripOnInput, \
False]], \\\" specifies the order of indices of the resulting tensor. The \
indices must be a permutation of the free indices of \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\". If omitted, \
the indices are assumed to be in the same order as they appear in \\\", \
StyleBox[\\\"formula\\\", Bold, Rule[StripOnInput, False]], \\\".\\\\n\\\", \
StyleBox[\\\"symbol\\\", Bold, Rule[StripOnInput, False]], \\\" specifies the \
symbol to use for the resulting tensor. If omitted, the placeholder symbol \\\
\\[DottedSquare] will be used.\\\"}]], TextCell[Row[List[\\\"TCalc[\\\", \
Style[\\\"formula\\\", Bold], \\\"] calculates a tensor \\\", \
Style[\\\"formula\\\", Bold], \\\", which may involve any number of tensors \
in the format \\\", Style[\\\"ID\\\", Bold], \\\"[\\\", \
Style[\\\"indices\\\", Bold], \\\"], where \\\", Style[\\\"ID\\\", Bold], \
\\\" is a tensor object and \\\", Style[\\\"indices\\\", Bold], \\\" is a \
string representing the order of indices, along with any combination of the \
following operations:\\\\n\\\\[Bullet] Addition: For example, \\\\\\\"A\\\\\\\
\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"] + \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Contraction: For example, \
\\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\\\\[Lambda]\\\\\\\"] . \
\\\\\\\"B\\\\\\\"[\\\\\\\"\\\\[Lambda]\\\\[Nu]\\\\\\\"].\\\\n\\\\[Bullet] \
Multiplication by scalar: For example, 2 * \\\\\\\"A\\\\\\\"[\\\\\\\"\\\\[Mu]\
\\\\[Nu]\\\\\\\"].\\\\nTCalc[\\\", Style[\\\"targetID\\\", Bold], \\\"[\\\", \
Style[\\\"targetIndices\\\", Bold], \\\"], \\\", Style[\\\"formula\\\", \
Bold], \\\", \\\", Style[\\\"symbol\\\", Bold], \\\"] calculates a tensor \
\\\", Style[\\\"formula\\\", Bold], \\\" and stores the result in a new \
tensor object.\\\\n\\\", Style[\\\"targetID\\\", Bold], \\\" specifies the ID \
of the tensor object in which to store the result. If omitted, the ID \
\\\\\\\"Result\\\\\\\" will be used.\\\\n\\\", Style[\\\"targetIndices\\\", \
Bold], \\\" specifies the order of indices of the resulting tensor. The \
indices must be a permutation of the free indices of \\\", \
Style[\\\"formula\\\", Bold], \\\". If omitted, the indices are assumed to be \
in the same order as they appear in \\\", Style[\\\"formula\\\", Bold], \\\".\
\\\\n\\\", Style[\\\"symbol\\\", Bold], \\\" specifies the symbol to use for \
the resulting tensor. If omitted, the placeholder symbol \\\\[DottedSquare] \
will be used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalc[\", StyleBox[\"formula\", \
Bold, Rule[StripOnInput, False]], \"] calculates a tensor \", \
StyleBox[\"formula\", Bold, Rule[StripOnInput, False]], \", which may involve \
any number of tensors in the format \", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \"[\", StyleBox[\"indices\", Bold, \
Rule[StripOnInput, False]], \"], where \", StyleBox[\"ID\", Bold, \
Rule[StripOnInput, False]], \" is a tensor object and \", \
StyleBox[\"indices\", Bold, Rule[StripOnInput, False]], \" is a string \
representing the order of indices, along with any combination of the \
following operations:\\n\\[Bullet] Addition: For example, \
\\\"A\\\"[\\\"\\[Mu]\\[Nu]\\\"] + \
\\\"B\\\"[\\\"\\[Mu]\\[Nu]\\\"].\\n\\[Bullet] Contraction: For example, \\\"A\
\\\"[\\\"\\[Mu]\\[Lambda]\\\"] . \
\\\"B\\\"[\\\"\\[Lambda]\\[Nu]\\\"].\\n\\[Bullet] Multiplication by scalar: \
For example, 2 * \\\"A\\\"[\\\"\\[Mu]\\[Nu]\\\"].\\nTCalc[\", \
StyleBox[\"targetID\", Bold, Rule[StripOnInput, False]], \"[\", \
StyleBox[\"targetIndices\", Bold, Rule[StripOnInput, False]], \"], \", \
StyleBox[\"formula\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"symbol\", Bold, Rule[StripOnInput, False]], \"] calculates a \
tensor \", StyleBox[\"formula\", Bold, Rule[StripOnInput, False]], \" and \
stores the result in a new tensor object.\\n\", StyleBox[\"targetID\", Bold, \
Rule[StripOnInput, False]], \" specifies the ID of the tensor object in which \
to store the result. If omitted, the ID \\\"Result\\\" will be used.\\n\", \
StyleBox[\"targetIndices\", Bold, Rule[StripOnInput, False]], \" specifies \
the order of indices of the resulting tensor. The indices must be a \
permutation of the free indices of \", StyleBox[\"formula\", Bold, \
Rule[StripOnInput, False]], \". If omitted, the indices are assumed to be in \
the same order as they appear in \", StyleBox[\"formula\", Bold, \
Rule[StripOnInput, False]], \".\\n\", StyleBox[\"symbol\", Bold, \
Rule[StripOnInput, False]], \" specifies the symbol to use for the resulting \
tensor. If omitted, the placeholder symbol \\[DottedSquare] will be \
used.\"}]], TextCell[Row[List[\"TCalc[\", Style[\"formula\", Bold], \"] \
calculates a tensor \", Style[\"formula\", Bold], \", which may involve any \
number of tensors in the format \", Style[\"ID\", Bold], \"[\", \
Style[\"indices\", Bold], \"], where \", Style[\"ID\", Bold], \" is a tensor \
object and \", Style[\"indices\", Bold], \" is a string representing the \
order of indices, along with any combination of the following \
operations:\\n\\[Bullet] Addition: For example, \
\\\"A\\\"[\\\"\\[Mu]\\[Nu]\\\"] + \
\\\"B\\\"[\\\"\\[Mu]\\[Nu]\\\"].\\n\\[Bullet] Contraction: For example, \\\"A\
\\\"[\\\"\\[Mu]\\[Lambda]\\\"] . \
\\\"B\\\"[\\\"\\[Lambda]\\[Nu]\\\"].\\n\\[Bullet] Multiplication by scalar: \
For example, 2 * \\\"A\\\"[\\\"\\[Mu]\\[Nu]\\\"].\\nTCalc[\", \
Style[\"targetID\", Bold], \"[\", Style[\"targetIndices\", Bold], \"], \", \
Style[\"formula\", Bold], \", \", Style[\"symbol\", Bold], \"] calculates a \
tensor \", Style[\"formula\", Bold], \" and stores the result in a new tensor \
object.\\n\", Style[\"targetID\", Bold], \" specifies the ID of the tensor \
object in which to store the result. If omitted, the ID \\\"Result\\\" will \
be used.\\n\", Style[\"targetIndices\", Bold], \" specifies the order of \
indices of the resulting tensor. The indices must be a permutation of the \
free indices of \", Style[\"formula\", Bold], \". If omitted, the indices are \
assumed to be in the same order as they appear in \", Style[\"formula\", \
Bold], \".\\n\", Style[\"symbol\", Bold], \" specifies the symbol to use for \
the resulting tensor. If omitted, the placeholder symbol \\[DottedSquare] \
will be used.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, OGRe`TCalc, {OGRe`TCalc[
         Pattern[OGRe`Private`RHSExpression, 
          Blank[]], 
         Optional[
          Pattern[OGRe`Private`symbol, 
           Blank[String]], "\[DottedSquare]"]] :> OGRe`TCalc[
         OGRe`Private`DefaultResultID[""], OGRe`Private`RHSExpression, 
         OGRe`Private`symbol], OGRe`TCalc[
         Pattern[OGRe`Private`LHSTensorID, 
          Blank[String]], 
         Pattern[OGRe`Private`RHSExpression, 
          Blank[]], 
         Optional[
          Pattern[OGRe`Private`symbol, 
           Blank[String]], "\[DottedSquare]"]] :> OGRe`TCalc[
         OGRe`Private`LHSTensorID[""], OGRe`Private`RHSExpression, 
         OGRe`Private`symbol], OGRe`TCalc[
         Pattern[OGRe`Private`LHSTensorID, 
          Blank[String]][
          Pattern[OGRe`Private`LHSIndices, 
           Blank[String]]], 
         Pattern[OGRe`Private`RHSExpression, 
          Blank[]], 
         Optional[
          Pattern[OGRe`Private`symbol, 
           Blank[String]], "\[DottedSquare]"]] :> 
       Module[{OGRe`Private`allVars, OGRe`Private`components, 
          OGRe`Private`LHSVars, OGRe`Private`newComponents, 
          OGRe`Private`newIndices, OGRe`Private`result, OGRe`Private`resultID,
           OGRe`Private`resultIndices, OGRe`Private`RHSVars, 
          OGRe`Private`rules, OGRe`Private`useCoords, 
          OGRe`Private`useIndices}, 
         If[OGRe`Private`LHSTensorID =!= OGRe`Private`DefaultResultID, 
           OGRe`Private`CheckIfOverwriting[OGRe`Private`LHSTensorID]; Null]; 
         OGRe`Private`rules = {Pattern[OGRe`Private`ID, 
              Blank[String]][
              Condition[
               Pattern[OGRe`Private`indices, 
                Blank[String]], 
               Not[
                DuplicateFreeQ[
                 Characters[OGRe`Private`indices]]]]] :> 
            OGRe`Private`TensorTrace[
              OGRe`Private`ID[OGRe`Private`indices]], 
            Pattern[OGRe`Private`firstID, 
               Blank[String]][
               Pattern[OGRe`Private`firstIndices, 
                Blank[String]]] + Pattern[OGRe`Private`secondID, 
               Blank[String]][
               Pattern[OGRe`Private`secondIndices, 
                Blank[String]]] :> OGRe`Private`AddTensors[
              OGRe`Private`TensorTrace[
               OGRe`Private`firstID[OGRe`Private`firstIndices]], 
              OGRe`Private`TensorTrace[
               OGRe`Private`secondID[OGRe`Private`secondIndices]]], 
            Pattern[OGRe`Private`scalar, 
               Blank[]] Pattern[OGRe`Private`ID, 
               Blank[String]][
               Pattern[OGRe`Private`indices, 
                Blank[String]]] :> OGRe`Private`TensorByScalar[
              OGRe`Private`TensorTrace[
               OGRe`Private`ID[OGRe`Private`indices]], OGRe`Private`scalar], 
            Dot[
              Pattern[OGRe`Private`firstID, 
               Blank[String]][
               Pattern[OGRe`Private`firstIndices, 
                Blank[String]]], 
              Pattern[OGRe`Private`secondID, 
               Blank[String]][
               Pattern[OGRe`Private`secondIndices, 
                Blank[String]]]] :> OGRe`Private`ContractTensors[
              OGRe`Private`TensorTrace[
               OGRe`Private`firstID[OGRe`Private`firstIndices]], 
              OGRe`Private`TensorTrace[
               OGRe`Private`secondID[OGRe`Private`secondIndices]]], Dot[
              OGRe`TPartialD[
               Pattern[OGRe`Private`derivativeIndex, 
                Blank[String]]], 
              Pattern[OGRe`Private`tensorID, 
               Blank[String]][
               Pattern[OGRe`Private`tensorIndices, 
                Blank[String]]]] :> 
            OGRe`Private`DivOrGrad[OGRe`Private`derivativeIndex, 
              OGRe`Private`TensorTrace[
               OGRe`Private`tensorID[OGRe`Private`tensorIndices]]], Dot[
              OGRe`TCovariantD[
               Pattern[OGRe`Private`derivativeIndex, 
                Blank[String]]], 
              Pattern[OGRe`Private`tensorID, 
               Blank[String]][
               Pattern[OGRe`Private`tensorIndices, 
                Blank[String]]]] :> 
            OGRe`Private`CovariantDivOrGrad[OGRe`Private`derivativeIndex, 
              OGRe`Private`TensorTrace[
               OGRe`Private`tensorID[OGRe`Private`tensorIndices]]]}; 
         OGRe`Private`result = 
          ReplaceRepeated[OGRe`Private`RHSExpression, OGRe`Private`rules]; If[
           Not[
            MatchQ[OGRe`Private`result, 
             Blank[String][
              Blank[String]]]], Message[
             MessageName[OGRe`TCalc, "ErrorResult"], OGRe`Private`result]; 
           OGRe`Private`ClearTemp[]; Abort[]; Null]; 
         OGRe`Private`resultID = Part[OGRe`Private`result, 0]; 
         OGRe`Private`resultIndices = Part[OGRe`Private`result, 1]; 
         OGRe`Private`useIndices = 
          OGRe`Private`TensorData[OGRe`Private`resultID]["DefaultIndices"]; 
         OGRe`Private`useCoords = 
          OGRe`Private`TensorData[OGRe`Private`resultID]["DefaultCoords"]; 
         OGRe`Private`components = 
          OGRe`Private`TensorData[OGRe`Private`resultID][
           "Components"][{OGRe`Private`useIndices, OGRe`Private`useCoords}]; 
         OGRe`Private`components = 
          OGRe`Private`TensorSimplify[OGRe`Private`components]; 
         If[OGRe`Private`LHSIndices === "", 
           OGRe`Private`SetTensorID[
           OGRe`Private`LHSTensorID, <|
            "Components" -> <|{
                OGRe`Private`useIndices, OGRe`Private`useCoords} -> 
               OGRe`Private`components|>, "DefaultCoords" -> 
             OGRe`Private`useCoords, "DefaultIndices" -> 
             OGRe`Private`useIndices, "Metric" -> 
             OGRe`Private`TensorData[OGRe`Private`resultID]["Metric"], "Role" -> 
             "Calculated", "Symbol" -> OGRe`Private`symbol|>], If[Sort[
               Characters[OGRe`Private`LHSIndices]] != Sort[
               Characters[OGRe`Private`resultIndices]], Message[
               MessageName[OGRe`TCalc, "ErrorIndices"], 
               OGRe`Private`LHSIndices, OGRe`Private`resultIndices]; 
             OGRe`Private`ClearTemp[]; Abort[]; Null]; 
           OGRe`Private`allVars = <||>; 
           Scan[(OGRe`Private`allVars[#] = Unique["var"])& , 
             Characters[OGRe`Private`LHSIndices]]; 
           OGRe`Private`LHSVars = Map[OGRe`Private`allVars[#]& , 
              Characters[OGRe`Private`LHSIndices]]; 
           OGRe`Private`RHSVars = Map[OGRe`Private`allVars[#]& , 
              Characters[OGRe`Private`resultIndices]]; 
           OGRe`Private`newComponents = Table[
              Part[OGRe`Private`components, 
               Apply[Sequence, OGRe`Private`RHSVars]], 
              Evaluate[
               Apply[Sequence, 
                Map[{#, 1, 
                  Length[OGRe`Private`components]}& , 
                 OGRe`Private`LHSVars]]]]; OGRe`Private`newIndices = Table[
              Part[OGRe`Private`useIndices, 
               Part[
                StringPosition[OGRe`Private`resultIndices, 
                 Part[
                  Characters[OGRe`Private`LHSIndices], OGRe`Private`n]], 1, 
                1]], {OGRe`Private`n, 1, 
               StringLength[OGRe`Private`LHSIndices]}]; 
           OGRe`Private`SetTensorID[
            OGRe`Private`LHSTensorID, <|
             "Components" -> <|{
                 OGRe`Private`newIndices, OGRe`Private`useCoords} -> 
                OGRe`Private`newComponents|>, "DefaultCoords" -> 
              OGRe`Private`useCoords, "DefaultIndices" -> 
              OGRe`Private`newIndices, "Metric" -> 
              OGRe`Private`TensorData[OGRe`Private`resultID]["Metric"], 
              "Role" -> "Calculated", "Symbol" -> OGRe`Private`symbol|>]; 
           Null]; OGRe`Private`ClearTemp[]; Return[OGRe`Private`LHSTensorID]; 
         Null]}], "SubValues" -> None, "DefaultValues" -> None, "NValues" -> 
    None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "OGRe`TCalc"|>, 
   False]]], "Output",
 CellLabel->"Out[107]=",ExpressionUUID->"3c72d32c-3b4a-4dc7-a722-f56da8d9c37e"]
}, Open  ]],

Cell[TextData[{
 "Any use of ",
 StyleBox["TCalc", "Input"],
 " should be thought of as invoking a tensor equation of the form"
}], "Text",ExpressionUUID->"8eb070d2-0c0a-41ff-b762-7191f8ce3050"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubsuperscriptBox["L", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Beta]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Alpha]", "p"]}]], "=", 
   SubsuperscriptBox["R", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Beta]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Alpha]", "p"]}]]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"68621477-4c4c-4b1e-8404-\
23c856b4e0a7"],

Cell[TextData[{
 "where both the left-hand side and the right-hand side are tensors of the \
same rank and with the same ",
 StyleBox["free indices",
  FontWeight->"Bold"],
 " (that is, indices that are not being contracted). ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["L", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Beta]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Alpha]", "p"]}]], TraditionalForm]],
  ExpressionUUID->"1839a3bd-fe0f-401e-b075-73eb881c1d3f"],
 " is the tensor that will be used to store the result, while ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["R", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Beta]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Alpha]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Alpha]", "p"]}]], TraditionalForm]],
  ExpressionUUID->"a826e898-a318-413d-8654-36c48847f8ec"],
 " is (the final result of) a general tensor calculation which contains any \
combination of addition, multiplication by scalar, trace, contraction, \
partial derivative, and covariant derivative. Let us now go over these \
operations one by one, and give some examples."
}], "Text",ExpressionUUID->"022ec79b-b072-4595-b9f3-d055ed78e6d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Addition of tensors", \
"Subsection",ExpressionUUID->"7b3d4e46-a49a-4ec1-9bc7-c9273f073afe"],

Cell[TextData[{
 "Addition of tensors in OGRe is represented by a sum of the form ",
 StyleBox["\[OpenCurlyDoubleQuote]ID1\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]indices1\[CloseCurlyDoubleQuote]] + \
\[OpenCurlyDoubleQuote]ID2\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\
indices2\[CloseCurlyDoubleQuote]]", "Input"],
 ", where ",
 StyleBox["\[OpenCurlyDoubleQuote]ID1\[CloseCurlyDoubleQuote]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]ID2\[CloseCurlyDoubleQuote]", "Input"],
 " are the IDs of the tensor objects to be added, and ",
 StyleBox["\[OpenCurlyDoubleQuote]indices1\[CloseCurlyDoubleQuote]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]indices2\[CloseCurlyDoubleQuote]", "Input"],
 " are the ",
 StyleBox["index specifications",
  FontWeight->"Bold"],
 " for each tensor, given as a string of letters. Note that you do ",
 StyleBox["not",
  FontWeight->"Bold"],
 " specify the position (upper or lower) of the indices. Furthermore, just \
like in any tensor equation, ",
 StyleBox["the index letters themselves have no meaning",
  FontWeight->"Bold"],
 "; they are just placeholders. Therefore, ",
 StyleBox["\[OpenCurlyDoubleQuote]\[Alpha]\[Beta]\[Gamma]\
\[CloseCurlyDoubleQuote]", "Input"],
 ", ",
 StyleBox["\[OpenCurlyDoubleQuote]abc\[CloseCurlyDoubleQuote]", "Input"],
 ", and ",
 StyleBox["\[OpenCurlyDoubleQuote]ABC\[CloseCurlyDoubleQuote]", "Input"],
 " are all completely equivalent. The only requirement is that the ",
 StyleBox["indices are consistent",
  FontWeight->"Bold"],
 "; in the case of addition, this means that both tensors being added must \
have ",
 StyleBox["the same indices up to permutation",
  FontWeight->"Bold"],
 "."
}], "Text",ExpressionUUID->"5dd7546b-62a5-4963-8bff-ed730c5c15ef"],

Cell["The following constraints apply to addition of tensors:", \
"Text",ExpressionUUID->"ff646d0c-1310-444c-96c3-432f486bb749"],

Cell["\<\
You may not add a tensor representing a coordinate system to any other \
tensor, since coordinates do not transform like tensors.\
\>", "Item",ExpressionUUID->"48704c67-fbfb-4433-a7e7-847ddaac0625"],

Cell["\<\
You may not add two tensors associated with different metrics, since their \
sum would have undefined transformation properties.\
\>", "Item",ExpressionUUID->"1deb03ed-1873-4fc1-bfe4-930c65d8e80c"],

Cell["\<\
You may not add two tensors with different ranks, since that is not a \
well-defined operation.\
\>", "Item",ExpressionUUID->"57ec81e0-2ff8-4909-a09f-ca93ee18b183"],

Cell[TextData[{
 "As stated above, both tensors must have the same indices up to permutation. \
",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "\[Mu]\[Nu]"], "+", 
    SuperscriptBox["B", "\[Mu]\[Nu]"]}], TraditionalForm]],ExpressionUUID->
  "8f120e5e-0e4d-46cc-bcd5-6be24b14620d"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "\[Mu]\[Nu]"], "+", 
    SuperscriptBox["B", "\[Nu]\[Mu]"]}], TraditionalForm]],ExpressionUUID->
  "01269be6-c0dc-44cd-aa09-96c87a488b96"],
 " are both okay, but ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["A", "\[Mu]\[Nu]"], "+", 
    SuperscriptBox["B", "\[Alpha]\[Beta]"]}], TraditionalForm]],
  ExpressionUUID->"cc1a5327-6941-40ed-aabb-f011d43b12a1"],
 " doesn\[CloseCurlyQuote]t make sense, as it has more free indices than the \
rank of the result."
}], "Item",ExpressionUUID->"4251b181-699f-469e-86ff-e1504a3dea7a"],

Cell[TextData[{
 "As an example, let us add the Minkowski metric ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], TraditionalForm]],ExpressionUUID->
  "ff1e383c-7211-46fc-80c9-b956f109cc77"],
 " and the perfect fluid stress tensor ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["T", "\[Mu]\[Nu]"], TraditionalForm]],ExpressionUUID->
  "6f11734a-e04d-4da3-9e8e-fb70fa644bdd"],
 ":"
}], "Text",ExpressionUUID->"67e4a1bc-aa8d-48c5-9482-baf0472743a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
    RowBox[{"\"\<PerfectFluid\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[108]:=",ExpressionUUID->"0c0414a5-c7f6-4c28-9624-61d02f834fca"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", "\[Rho]"}], "0", "0", "0"}, {"0", 
          RowBox[{"1", "+", "p"}], "0", "0"}, {"0", "0", 
          RowBox[{"1", "+", "p"}], "0"}, {"0", "0", "0", 
          RowBox[{"1", "+", "p"}]}}, RowSpacings -> 1, ColumnSpacings -> 1, 
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"9f30826f-09ec-4543-9cb8-1d14b3d0440b"]
}, Open  ]],

Cell[TextData[{
 "Notice that the result was stored in a tensor with ID ",
 StyleBox["\[OpenCurlyDoubleQuote]Result\[CloseCurlyDoubleQuote]", "Input"],
 ", and has no symbol. We can add a symbol to use as an additional argument:"
}], "Text",ExpressionUUID->"199d85df-a6f8-42e6-8ab0-d86d1c39ba03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<PerfectFluid\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], ",", 
    "\"\<S\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"cd808f74-1600-4750-9f80-5e1f662e4a5f"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"S\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", "\[Rho]"}], "0", "0", "0"}, {"0", 
          RowBox[{"1", "+", "p"}], "0", "0"}, {"0", "0", 
          RowBox[{"1", "+", "p"}], "0"}, {"0", "0", "0", 
          RowBox[{"1", "+", "p"}]}}, RowSpacings -> 1, ColumnSpacings -> 1, 
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"abbff220-f236-47b2-99fb-d557b0e7430e"]
}, Open  ]],

Cell["\<\
With this symbol, the tensor equation we are calculating becomes:\
\>", "Text",ExpressionUUID->"3016e31b-5790-4f63-991f-14acef4cdca8"],

Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["S", "\[Mu]\[Nu]"], "=", 
   RowBox[{
    SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], "+", 
    RowBox[{
     SubscriptBox["T", "\[Mu]\[Nu]"], "."}]}]}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"e4be7bbe-b2bb-4dfa-b6b5-8394c03b0ffa"],

Cell["\<\
We can also use a different ID for the result by giving it as the first \
argument, with or without a symbol:\
\>", "Text",ExpressionUUID->"005d37e3-6dbd-445f-9b6b-a9e964672c8c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{"\"\<SumResult\>\"", ",", 
    RowBox[{
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<PerfectFluid\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], ",", 
    "\"\<S\>\""}], "]"}]}], "\n", 
 RowBox[{"TDelete", "[", "\"\<SumResult\>\"", "]"}]}], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"6660326b-4d70-4c0c-b2e8-103fa4624bd1"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SumResult\"", "\":   \"", 
    TemplateBox[{"\"S\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", "\[Rho]"}], "0", "0", "0"}, {"0", 
          RowBox[{"1", "+", "p"}], "0", "0"}, {"0", "0", 
          RowBox[{"1", "+", "p"}], "0"}, {"0", "0", "0", 
          RowBox[{"1", "+", "p"}]}}, RowSpacings -> 1, ColumnSpacings -> 1, 
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"59b06e2c-9f99-4498-b966-abf68078a689"]
}, Open  ]],

Cell["\<\
(We deleted the result to avoid cluttering memory with unused objects.) In \
the following examples, we will not specify a symbol, to keep the code \
cleaner.\
\>", "Text",ExpressionUUID->"257771be-e75c-429b-81f7-e47687544ae8"],

Cell["\<\
Sometimes it is also helpful to specify indices for the result. To give an \
example, let us define the following non-symmetric tensor:\
\>", "Text",ExpressionUUID->"08c5364a-1f3c-4696-9988-c93991caad93"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewTensor", "[", 
   RowBox[{
   "\"\<NonSymmetric\>\"", ",", "\"\<Minkowski\>\"", ",", "\"\<Cartesian\>\"",
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
    "\"\<N\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"32048a01-8bf9-49d0-9959-a68893bbdea3"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"NonSymmetric\"", "\":   \"", 
    TemplateBox[{"\"N\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"0", "0", "0", "1"}, {"0", "0", "0", "0"}, {
         "0", "0", "0", "0"}, {"0", "0", "0", "0"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"d551033d-791c-4a41-8b66-bcc15e989b3d"]
}, Open  ]],

Cell["If we add it to the Minkowski metric, we get:", \
"Text",ExpressionUUID->"a4109e0e-76b8-43fc-b926-83a27a00fb6c"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[DottedSquare]", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["N", 
    RowBox[{
    "\[Mu]\[Nu]", 
     ","}]]}]}]], \
"DisplayFormula",ExpressionUUID->"34f816e3-df12-41d3-92fc-8ff6342b297f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"67344644-89b0-49fb-8426-de99c2ce8260"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "1"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"010541de-9d63-4773-a819-f9cc323c7c26"]
}, Open  ]],

Cell[TextData[{
 "However, if we flip its index string from ",
 StyleBox["\[OpenCurlyDoubleQuote]\[Mu]\[Nu]\[CloseCurlyDoubleQuote]", 
  "Input"],
 " to ",
 StyleBox["\[OpenCurlyDoubleQuote]\[Nu]\[Mu]\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", then we instead get:"
}], "Text",ExpressionUUID->"559e5306-4cdc-462c-a85f-4068ea6b200e"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[DottedSquare]", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["N", 
    RowBox[{
    "\[Nu]\[Mu]", 
     ","}]]}]}]], \
"DisplayFormula",ExpressionUUID->"549a84f6-ef67-46da-a04e-45f42bcf56b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Nu]\[Mu]\>\"", "]"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"da2eb2a1-8931-4008-b00f-824ec41fef14"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"1", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"2be365b0-3e70-4495-9461-449730a9f644"]
}, Open  ]],

Cell[TextData[{
 "Since the order of indices now matters, we can also define an index string \
for the left-hand side, to indicate the order of indices we want in the \
result. If that string is also ",
 StyleBox["\[OpenCurlyDoubleQuote]\[Nu]\[Mu]\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", then we get back to the original result:"
}], "Text",ExpressionUUID->"d36ebc75-e9a7-4afb-af7b-1dee9374a0f7"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[DottedSquare]", "\[Nu]\[Mu]"], "=", 
  RowBox[{
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["N", 
    RowBox[{
    "\[Nu]\[Mu]", 
     ","}]]}]}]], \
"DisplayFormula",ExpressionUUID->"f64181e1-0c87-4103-8f9e-b658b7e3645f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<Result\>\"", "[", "\"\<\[Nu]\[Mu]\>\"", "]"}], ",", 
     RowBox[{
      RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
      RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Nu]\[Mu]\>\"", "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[115]:=",ExpressionUUID->"5c374f2e-f157-411d-b8a6-1e6ab7040026"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "1"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"801d153c-6fc0-4b79-a71f-64c3cc9cc723"]
}, Open  ]],

Cell[TextData[{
 "We see that explicitly specifying the indices in ",
 StyleBox["TCalc", "Input"],
 " allows it to have ",
 StyleBox["a 1-to-1 correspondence with any tensor equation",
  FontWeight->"Bold"],
 ". Importantly, note that there is no difference between ",
 StyleBox["\[OpenCurlyDoubleQuote]NonSymmetric\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Mu]\[Nu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]NonSymmetric\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Nu]\[Mu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]]", "Input"],
 " on its own, as ",
 StyleBox["the index labels themselves are meaningless",
  FontWeight->"Bold"],
 " unless there is some context in which they obtain meaning - as is always \
the case for tensor expressions. However, there is a big difference between, \
for example, ",
 StyleBox["\[OpenCurlyDoubleQuote]Minkowski\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Mu]\[Nu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]] + \[OpenCurlyDoubleQuote]NonSymmetric\
\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Mu]\[Nu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]Minkowski\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Mu]\[Nu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]] + \[OpenCurlyDoubleQuote]NonSymmetric\
\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]", "Input"],
 StyleBox["\[Nu]\[Mu]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]]", "Input"],
 ", as the indices have a different order, and thus the two expressions refer \
to adding different components."
}], "Text",ExpressionUUID->"af93a365-a5d1-4e32-88f2-aea85d062e29"],

Cell["\<\
Of course, any number of tensors can be added, not just two - and the same \
tensor can be added with different index configurations. For example, we can \
calculate:\
\>", "Text",ExpressionUUID->"770d3d43-9087-4e8f-9e05-1fc367f6ff7b"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[DottedSquare]", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["T", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["N", "\[Mu]\[Nu]"], "+", 
   SubscriptBox["N", 
    RowBox[{
    "\[Nu]\[Mu]", 
     ","}]]}]}]], \
"DisplayFormula",ExpressionUUID->"f67086f6-dd53-4563-ac76-6d58a66dd6b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<PerfectFluid\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "+", 
     RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Nu]\[Mu]\>\"", "]"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[116]:=",ExpressionUUID->"5317b96f-1b18-416a-9a91-48e3101034fb"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{"-", "1"}], "+", "\[Rho]"}], "0", "0", "1"}, {"0", 
          RowBox[{"1", "+", "p"}], "0", "0"}, {"0", "0", 
          RowBox[{"1", "+", "p"}], "0"}, {"1", "0", "0", 
          RowBox[{"1", "+", "p"}]}}, RowSpacings -> 1, ColumnSpacings -> 1, 
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"db39ddee-fc22-499b-879b-ddc41c553105"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multiplication of tensor by scalar", \
"Subsection",ExpressionUUID->"014f353f-09cd-45df-8b19-e5822680a9fb"],

Cell[TextData[{
 "Multiplication of tensor by scalar in OGRe is represented by a product of \
the form ",
 StyleBox["scalar * \[OpenCurlyDoubleQuote]ID\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]indices\[CloseCurlyDoubleQuote]]", "Input"],
 ", where ",
 StyleBox["\[OpenCurlyDoubleQuote]ID\[CloseCurlyDoubleQuote]", "Input"],
 " is the ID of the tensor object to be multiplied, ",
 StyleBox["\[OpenCurlyDoubleQuote]indices\[CloseCurlyDoubleQuote]", "Input"],
 " is an index specification as for addition, and ",
 StyleBox["scalar", "Input"],
 " is the scalar to multiply by. Note that ",
 StyleBox["scalar", "Input"],
 " should be a normal Mathematica symbol, such as a number or a variable, and \
",
 StyleBox["not",
  FontWeight->"Bold"],
 " a tensor object of rank 0. To multiply a tensor by a tensor of rank 0, use \
contraction instead, as detailed in the next section."
}], "Text",ExpressionUUID->"6ee55956-8322-4cd9-8305-1076765b6027"],

Cell[TextData[{
 "As an example, let us multiply the Minkowski metric ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Eta]", "\[Mu]\[Nu]"], TraditionalForm]],ExpressionUUID->
  "94ee7d90-06b8-4595-95fb-e3cc29b46be5"],
 " by 2. The tensor equation we will be calculating is:"
}], "Text",ExpressionUUID->"a1cd7f35-a56e-4e92-8f63-d3200575562c"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    SubscriptBox["\[DottedSquare]", "\[Mu]\[Nu]"], "=", 
    RowBox[{"2", 
     SubscriptBox["\[Eta]", "\[Mu]\[Nu]"]}]}], ","}], 
  TraditionalForm]], \
"DisplayFormula",ExpressionUUID->"79dab305-4167-426b-8273-74c2b88b654a"],

Cell["\<\
and the OGRe expression to calculate it (and show the result) is:\
\>", "Text",ExpressionUUID->"ac98871d-62f0-4814-b338-947032a101df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{"2", " ", 
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[117]:=",ExpressionUUID->"b647e08c-5d10-4cea-9ef6-8e4bb995e3c2"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "2"}], "0", "0", "0"}, {"0", "2", "0", "0"}, {
         "0", "0", "2", "0"}, {"0", "0", "0", "2"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"7f4d1c94-f0eb-423d-8562-ba3632e1daa0"]
}, Open  ]],

Cell["\<\
While in this example the indices seem redundant, they are necessary because \
in most non-trivial situations we would like to combine multiplication with \
other operations, such as addition or contraction, in which the order of \
indices matters. For example, consider:\
\>", "Text",ExpressionUUID->"115885c8-9244-45ce-bc38-356dfe1987c5"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[DottedSquare]", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   RowBox[{"2", 
    SubscriptBox["t\[Eta]", "\[Mu]\[Nu]"]}], "-", 
   RowBox[{"3", 
    SubscriptBox["xT", "\[Mu]\[Nu]"]}], "+", 
   RowBox[{"4", 
    SubscriptBox["yN", "\[Mu]\[Nu]"]}], "-", 
   RowBox[{"5", 
    SubscriptBox["zN", 
     RowBox[{
     "\[Nu]\[Mu]", 
      ","}]]}]}]}]], \
"DisplayFormula",ExpressionUUID->"5e23cc42-56b9-4153-aa13-d6507411057d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"2", " ", "t", " ", 
      RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], "-", 
     RowBox[{"3", " ", "x", " ", 
      RowBox[{"\"\<PerfectFluid\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], "+", 
     RowBox[{"4", " ", "y", " ", 
      RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], "-", 
     RowBox[{"5", " ", "z", " ", 
      RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Nu]\[Mu]\>\"", "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[118]:=",ExpressionUUID->"65a269af-5d2c-43d2-aea8-b697eb70840b"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{
            RowBox[{
              RowBox[{"-", "2"}], " ", "t"}], "-", 
            RowBox[{"3", " ", "x", " ", "\[Rho]"}]}], "0", "0", 
          RowBox[{"4", " ", "y"}]}, {"0", 
          RowBox[{
            RowBox[{"2", " ", "t"}], "-", 
            RowBox[{"3", " ", "p", " ", "x"}]}], "0", "0"}, {"0", "0", 
          RowBox[{
            RowBox[{"2", " ", "t"}], "-", 
            RowBox[{"3", " ", "p", " ", "x"}]}], "0"}, {
          RowBox[{
            RowBox[{"-", "5"}], " ", "z"}], "0", "0", 
          RowBox[{
            RowBox[{"2", " ", "t"}], "-", 
            RowBox[{"3", " ", "p", " ", "x"}]}]}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"c7257071-d293-4585-a3c2-4cfc22aa9286"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Taking traces and contracting tensors: theoretical review", \
"Subsection",ExpressionUUID->"38ab06ec-af2c-4ea9-bda6-600fcf6e7aa3"],

Cell[TextData[{
 "The most complicated tensor operation is ",
 StyleBox["contraction",
  FontWeight->"Bold"],
 ", a generalization of the ",
 "vector inner product",
 ". This is done by summing over one or more disjoint pairs of indices, with \
each pair containing exactly one upper index and one lower index. Raising and \
lowering indices is one example of contraction: the metric (or its inverse) \
is contracted with a tensor. Coordinate transformations are another example, \
where we contract the Jacobian (or its inverse) with a tensor."
}], "Text",ExpressionUUID->"a9108b24-f144-4ba5-9bde-f7a3cd0bc537"],

Cell[TextData[{
 "The simplest example of contraction is the ",
 StyleBox["vector ",
  FontWeight->"Bold"],
 StyleBox["inner product",
  FontWeight->"Bold"],
 ", which is defined as the contraction of a vector (one upper index) with a \
covector (one lower index):"
}], "Text",ExpressionUUID->"06d41db7-fdba-4a5f-aa88-6fb6c9d06d48"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["v", "\[Mu]"], 
   SubscriptBox["w", "\[Mu]"]}], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["g", "\[Mu]\[Nu]"], 
    SuperscriptBox["v", "\[Mu]"], 
    SuperscriptBox["w", "\[Nu]"]}], "=", 
   RowBox[{"g", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"v", ",", "w"}], ")"}], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"31c2604b-38a6-4e38-8a7c-49c66e52a460"],

Cell[TextData[{
 "The middle part of this equality comes from the fact that, as explained \
above, when we lower an index on ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["w", "\[Nu]"], TraditionalForm]],ExpressionUUID->
  "a5afb7fe-02fd-4256-9130-1199b56138ad"],
 ", we use the metric:"
}], "Text",ExpressionUUID->"ebc6378e-b332-460f-b553-473d92330810"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["w", "\[Mu]"], "=", 
  RowBox[{
   SubscriptBox["g", "\[Mu]\[Nu]"], 
   RowBox[{
    SuperscriptBox["w", "\[Nu]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"1da4029d-8565-412c-b84d-658ffa8c5b5e"],

Cell[TextData[{
 "This, in turn, justifies the notation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"g", "(", 
    RowBox[{"v", ",", "w"}], ")"}], TraditionalForm]],ExpressionUUID->
  "c46075c6-c138-4657-8593-fde60feafdc9"],
 " on the right-hand side, as this is, in fact, an inner product of two \
vectors using the metric ",
 Cell[BoxData[
  FormBox["g", TraditionalForm]],ExpressionUUID->
  "18241f77-e843-4a3f-a07a-cb72450d39f4"],
 " (in index-free notation)."
}], "Text",ExpressionUUID->"35ae4714-eb0c-4c03-975a-158e4ffb2702"],

Cell["\<\
Contraction of indices in higher-rank tensors is simply a generalization of \
the inner product, for example:\
\>", "Text",ExpressionUUID->"23171492-ab9e-43dd-808e-6fec631dde36"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Alpha]"], 
   SubscriptBox["B", "\[Alpha]\[Nu]"]}], "=", 
  RowBox[{
   SubscriptBox["g", "\[Alpha]\[Beta]"], 
   SuperscriptBox["A", "\[Mu]\[Alpha]"], 
   RowBox[{
    SubsuperscriptBox["B", 
     RowBox[{"  ", "\[Nu]"}], "\[Beta]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"2e21b53c-eac6-4422-94a9-9a49a8710b46"],

Cell["We can also contract more than one index:", \
"Text",ExpressionUUID->"f83e4bde-7540-4687-8898-6c0a170358eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   SubscriptBox["B", "\[Mu]\[Nu]"]}], "=", 
  RowBox[{
   SubscriptBox["g", "\[Mu]\[Alpha]"], 
   SubscriptBox["g", "\[Nu]\[Beta]"], 
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   RowBox[{
    SuperscriptBox["B", "\[Alpha]\[Beta]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"0dddae31-30d0-417d-ba4e-eabee6535dd1"],

Cell[TextData[{
 "This simply amount to the fact that lowering both indices of ",
 Cell[BoxData[
  SuperscriptBox["B", "\[Alpha]\[Beta]"]], "InlineFormula",
  CellChangeTimes->{{3.804901266173482*^9, 3.8049012685536175`*^9}, {
   3.8049014071557817`*^9, 3.804901574871687*^9}},ExpressionUUID->
  "85a87561-b91e-46d2-87fe-1c7ff70592dd"],
 " involves contracting each index with the metric. We can even contract two \
indices ",
 StyleBox["of the same tensor",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"9cf0c48d-4541-4ccd-924b-5eec6ffb0eb9"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["A", 
   RowBox[{"  ", "\[Mu]"}], "\[Mu]"], "=", 
  RowBox[{
   SubscriptBox["g", "\[Mu]\[Nu]"], 
   RowBox[{
    SuperscriptBox["A", "\[Mu]\[Nu]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"2bf3eca0-f098-4d11-b0d7-d173422fc18f"],

Cell[TextData[{
 "This is also called ",
 StyleBox["taking the trace",
  FontWeight->"Bold"],
 ". Furthermore, it is also possible to contract pairs of indices from more \
than two tensors at the same time:"
}], "Text",ExpressionUUID->"a4542fb0-d7ab-4d01-8933-db2a3d76b313"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   SubscriptBox["B", "\[Nu]\[Rho]"], 
   SuperscriptBox["C", "\[Rho]\[Sigma]"]}], "=", 
  RowBox[{
   SubscriptBox["g", "\[Nu]\[Alpha]"], 
   SubscriptBox["g", "\[Rho]\[Beta]"], 
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   SuperscriptBox["B", "\[Alpha]\[Beta]"], 
   RowBox[{
    SuperscriptBox["C", "\[Rho]\[Sigma]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"58a4e834-87d2-494a-8dda-0eb673af24ec"],

Cell[TextData[{
 "However, such operations can always be broken down into individual \
contractions of pairs of tensors. For example, in this case, one could first \
contract ",
 Cell[BoxData[
  SubscriptBox["B", "\[Nu]\[Rho]"]], "InlineFormula",ExpressionUUID->
  "0bc4d4d4-6ddd-490e-a2cf-a51e1fdc05a4"],
 " with ",
 Cell[BoxData[
  SuperscriptBox["C", "\[Rho]\[Sigma]"]], "InlineFormula",ExpressionUUID->
  "4de3eaa8-1d73-4811-8a46-67e3874b6da8"],
 " and then contract the result with ",
 Cell[BoxData[
  StyleBox[
   SuperscriptBox["A", "\[Mu]\[Nu]"], "InlineFormula"]], "InlineFormula",
  CellChangeTimes->{{3.804901266173482*^9, 3.8049012685536175`*^9}, {
   3.8049014071557817`*^9, 3.804901574871687*^9}, {3.804901837875569*^9, 
   3.804901848841795*^9}, {3.8049018796433325`*^9, 3.8049019331900344`*^9}, {
   3.8049019663058043`*^9, 3.8049019834741335`*^9}, {3.8049021031745324`*^9, 
   3.8049021178526936`*^9}},ExpressionUUID->
  "4925a374-6c1b-4164-a0bd-be622428b448"],
 "- which is indeed how this kind of contraction will be performed in OGRe in \
practice:"
}], "Text",ExpressionUUID->"86b88fcf-3bde-4380-acda-9bfed8cf5ac8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   SubscriptBox["B", "\[Nu]\[Rho]"], 
   SuperscriptBox["C", "\[Rho]\[Sigma]"]}], "=", 
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["B", "\[Nu]\[Rho]"], 
      SuperscriptBox["C", "\[Rho]\[Sigma]"]}], ")"}], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"f9e81c71-df5e-4f53-8c8d-c9055c7d2193"],

Cell[TextData[{
 "In a contraction, there are two types of indices: ",
 StyleBox["contracted indices",
  FontWeight->"Bold"],
 ", which are summed upon, and ",
 StyleBox["free indices",
  FontWeight->"Bold"],
 ", which are not summed upon. The rank of the tensor that results from the \
contraction is the number of free indices. So for example, in the expression ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Alpha]"], 
   SubscriptBox["B", "\[Alpha]\[Nu]"]}]], "InlineFormula",
  CellChangeTimes->{{3.804901266173482*^9, 3.8049012685536175`*^9}, {
   3.8049014071557817`*^9, 3.804901495776366*^9}},ExpressionUUID->
  "2b3e6a8a-db16-4b22-8bf9-df633fea88f6"],
 " we have one contracted index, ",
 Cell[BoxData[
  FormBox["\[Alpha]", TraditionalForm]],ExpressionUUID->
  "2756781d-2439-46db-af35-56be836e33ed"],
 ", and two free indices, ",
 Cell[BoxData[
  FormBox["\[Mu]", TraditionalForm]],ExpressionUUID->
  "e7bf3988-8ac9-4d22-95a4-8d1a1caaa0f7"],
 " and ",
 Cell[BoxData[
  FormBox["\[Nu]", TraditionalForm]],ExpressionUUID->
  "20cf93d9-5f1b-49aa-ab28-53533def6c5e"],
 ". Therefore, the resulting tensor is of rank two: ",
 Cell[BoxData[
  RowBox[{
   SubsuperscriptBox["T", 
    RowBox[{"  ", "\[Nu]"}], "\[Mu]"], "=", 
   RowBox[{
    SuperscriptBox["A", "\[Mu]\[Alpha]"], 
    SubscriptBox["B", "\[Alpha]\[Nu]"]}]}]], "InlineFormula",
  CellChangeTimes->{{3.804901266173482*^9, 3.8049012685536175`*^9}, {
   3.8049014071557817`*^9, 3.804901495776366*^9}},ExpressionUUID->
  "c765c586-4124-40e2-af2b-3c14cea82862"],
 "."
}], "Text",ExpressionUUID->"ef4d6268-331a-4025-80d1-10241b539eda"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Taking traces and contracting tensors: OGRe syntax", \
"Subsection",ExpressionUUID->"5f48af7d-b719-4139-ab83-b993a64ae355"],

Cell[TextData[{
 "Contraction of tensors in OGRe is represented by an expression of the form ",
 StyleBox["\[OpenCurlyDoubleQuote]ID1\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]indices1\[CloseCurlyDoubleQuote]] . \
\[OpenCurlyDoubleQuote]ID2\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\
indices2\[CloseCurlyDoubleQuote]]", "Input"],
 ", where ",
 StyleBox["\[OpenCurlyDoubleQuote]ID1\[CloseCurlyDoubleQuote]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]ID2\[CloseCurlyDoubleQuote]", "Input"],
 " are the IDs of the tensor objects to be contracted, and ",
 StyleBox["\[OpenCurlyDoubleQuote]indices1\[CloseCurlyDoubleQuote]", "Input"],
 " and ",
 StyleBox["\[OpenCurlyDoubleQuote]indices2\[CloseCurlyDoubleQuote]", "Input"],
 " are ",
 "the index strings ",
 "for each tensor. Any ",
 StyleBox["matching indices",
  FontWeight->"Bold"],
 " in both index strings will be contracted. This means that, for example, ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["v", "\[Mu]"], 
   SubscriptBox["w", "\[Mu]"]}]], "InlineFormula",
  CellChangeTimes->{{3.804901157783846*^9, 3.8049011957195773`*^9}},
  ExpressionUUID->"27b84b79-48b3-4b7a-bbff-c0c213ab2a7a"],
 " is calculated using ",
 StyleBox["\[OpenCurlyDoubleQuote]v\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]\[Mu]\[CloseCurlyDoubleQuote]] . \
\[OpenCurlyDoubleQuote]w\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\[Mu]\
\[CloseCurlyDoubleQuote]]", "Input"],
 " and ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["A", "\[Mu]\[Nu]"], 
   SubscriptBox["B", "\[Nu]\[Rho]"], 
   SuperscriptBox["C", "\[Rho]\[Sigma]"]}]], "InlineFormula",
  CellChangeTimes->{{3.804901266173482*^9, 3.8049012685536175`*^9}, {
   3.8049014071557817`*^9, 3.804901574871687*^9}, {3.804901837875569*^9, 
   3.804901848841795*^9}, {3.8049018796433325`*^9, 3.8049019331900344`*^9}, {
   3.8049019663058043`*^9, 3.8049019834741335`*^9}},ExpressionUUID->
  "c0dffc10-479c-4721-ad0d-90dd5f581377"],
 " is calculated using ",
 StyleBox["\[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote][\
\[OpenCurlyDoubleQuote]\[Mu]\[Nu]\[CloseCurlyDoubleQuote]] . \
\[OpenCurlyDoubleQuote]B\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\[Nu]\
\[Rho]\[CloseCurlyDoubleQuote]] . \[OpenCurlyDoubleQuote]C\
\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\[Rho]\[Sigma]\
\[CloseCurlyDoubleQuote]]", "Input"],
 ". Note that the user doesn\[CloseCurlyQuote]t need to worry about the \
contracted indices being one upper and one lower, which is a common source of \
errors when contracting tensors by hand; the order of the indices, and \
whether the same index repeats twice, is all that matters."
}], "Text",ExpressionUUID->"611c4231-d82a-4291-aed2-a25844c0abd4"],

Cell[TextData[{
 "As a first example, let us create the stress-energy tensor for a perfect \
fluid with a 4-velocity ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SuperscriptBox["u", "\[Mu]"], "InlineFormula"], TraditionalForm]],
  ExpressionUUID->"0b5d3465-7a01-48cb-ba2e-eac7f85ea7f9"],
 ". This is defined as follows:"
}], "Text",ExpressionUUID->"5ef75d7b-7895-4e8a-8b55-b9880e74d18f"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["T", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"\[Rho]", "+", "p"}], ")"}], 
    SuperscriptBox["u", "\[Mu]"], 
    SuperscriptBox["u", "\[Nu]"]}], "+", 
   RowBox[{
    SuperscriptBox["pg", "\[Mu]\[Nu]"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"a8d0cf66-fa99-4514-ac03-87fd839c0ea8"],

Cell[TextData[{
 "Even though this does not involve any contractions, it still counts as a \
\[OpenCurlyDoubleQuote]trivial\[CloseCurlyDoubleQuote] contraction, since two \
tensors (the 4-velocities) are juxtaposed next to each other to create \
another tensor. This is also known as an ",
 StyleBox["outer product",
  FontWeight->"Bold"],
 ". Therefore, it uses the same dot product syntax as any other contraction, \
except that there are ",
 StyleBox["no matching indices",
  FontWeight->"Bold"],
 ". Note that this expression involves not just contraction (in the first \
term), but also multiplication by scalar (in both terms), and addition of the \
two terms together. Again, OGRe takes care of everything behind the scene, so \
this just works:"
}], "Text",ExpressionUUID->"cb6d3877-bd95-493e-8c25-9598c8c24194"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TCalc", "[", 
    RowBox[{"\"\<PerfectFluidFromVelocity\>\"", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"\[Rho]", "+", "p"}], ")"}], " ", 
       RowBox[{
        RowBox[{"\"\<4-Velocity\>\"", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
        RowBox[{"\"\<4-Velocity\>\"", "[", "\"\<\[Nu]\>\"", "]"}]}]}], "+", 
      RowBox[{"p", " ", 
       RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]}], 
     ",", "\"\<T\>\""}], "]"}]}]}]], "Input",
 CellLabel->
  "In[119]:=",ExpressionUUID->"78d180b3-98ca-4cbb-ade7-fac962955abb"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluidFromVelocity\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          FractionBox[
           RowBox[{
             RowBox[{"p", " ", 
               SuperscriptBox["v", "2"]}], "+", "\[Rho]"}], 
           RowBox[{"1", "-", 
             SuperscriptBox["v", "2"]}]], 
          FractionBox[
           RowBox[{"v", " ", 
             RowBox[{"(", 
               RowBox[{"p", "+", "\[Rho]"}], ")"}]}], 
           RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["v", "2"]}]], "0", "0"}, {
          FractionBox[
           RowBox[{"v", " ", 
             RowBox[{"(", 
               RowBox[{"p", "+", "\[Rho]"}], ")"}]}], 
           RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["v", "2"]}]], 
          FractionBox[
           RowBox[{"p", "+", 
             RowBox[{
               SuperscriptBox["v", "2"], " ", "\[Rho]"}]}], 
           RowBox[{"1", "-", 
             SuperscriptBox["v", "2"]}]], "0", "0"}, {"0", "0", "p", "0"}, {
         "0", "0", "0", "p"}}, RowSpacings -> 1, ColumnSpacings -> 1, 
        RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1c3f549c-0eb3-47b8-9233-2f233ec1cb12"]
}, Open  ]],

Cell[TextData[{
 "Indeed, for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", "0"}], TraditionalForm]],ExpressionUUID->
  "4591bbe5-d5fe-40a9-9ef6-f343d40fc716"],
 " we get the previously defined stress tensor:"
}], "Text",ExpressionUUID->"d397179a-7cf7-437a-8884-14dc55cac627"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"\"\<PerfectFluidFromVelocity\>\"", ",", 
   RowBox[{"ReplaceAll", "[", 
    RowBox[{"v", "\[Rule]", "0"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"4ff9f367-164f-40d4-84c5-c21bca734706"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluidFromVelocity\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"\[Rho]", "0", "0", "0"}, {"0", "p", "0", "0"}, {
         "0", "0", "p", "0"}, {"0", "0", "0", "p"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"5873fdf2-ac74-4ba4-bac4-99a45ffd6073"]
}, Open  ]],

Cell[TextData[{
 "Note that here, the second argument is a function to apply to the tensor \
elements. Typically this would be ",
 StyleBox["ReplaceAll[rules]", "Input"],
 " to apply the ",
 StyleBox["rules", "Input"],
 " to the elements, as we did here with the rule ",
 StyleBox["v\[Rule]0", "Input"],
 ". Another example of a potential use is ",
 StyleBox["Map[function]", "Input"],
 " to map a specific function to each element. This can be done with both ",
 StyleBox["TShow", "Input"],
 " and ",
 StyleBox["TList", "Input"],
 "."
}], "Text",ExpressionUUID->"fd22cab0-9557-41ef-a729-de6449ccd488"],

Cell["\<\
Multiplying a tensor by a scalar tensor (i.e. a tensor of rank 0) is also \
done using a \[OpenCurlyDoubleQuote]trivial\[CloseCurlyDoubleQuote] \
contraction with no contracted indices. For example:\
\>", "Text",ExpressionUUID->"47f92bc2-6c48-4be2-84d7-c30accd9c4c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<SpatialDistance\>\"", "[", "\"\<\>\"", "]"}], ".", 
     RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], "]"}], 
   ",", "\"\<Spherical\>\""}], "]"}]], "Input",
 CellLabel->
  "In[121]:=",ExpressionUUID->"89b66254-7e0c-4c8a-a33f-0d0f8dd679be"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "r"}], "0", "0", "0"}, {"0", "r", "0", "0"}, {"0", "0", 
          SuperscriptBox["r", "3"], "0"}, {"0", "0", "0", 
          RowBox[{
            SuperscriptBox["r", "3"], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}}, RowSpacings -> 
        1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"6a42476c-f1c5-4793-a2cb-df89bb7180be"]
}, Open  ]],

Cell[TextData[{
 "Note the empty index string ",
 StyleBox["[\[OpenCurlyDoubleQuote]\[CloseCurlyDoubleQuote]]", "Input"],
 ", which is mandatory in order for OGRe to recognize that the scalar is a \
tensor object. We can also multiply a scalar by another scalar:"
}], "Text",ExpressionUUID->"0e552bb6-9992-4c5c-8a68-d5cbc9fe5d1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{
   RowBox[{"TCalc", "[", 
    RowBox[{
     RowBox[{"\"\<SpatialDistance\>\"", "[", "\"\<\>\"", "]"}], ".", 
     RowBox[{"\"\<SpatialDistance\>\"", "[", "\"\<\>\"", "]"}]}], "]"}], ",", 
   "\"\<Spherical\>\""}], "]"}]], "Input",
 CellLabel->
  "In[122]:=",ExpressionUUID->"e55e7fe3-f419-4bc9-b929-78c0316a5b5c"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    SuperscriptBox["r", "2"]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"576d7964-8d2a-444e-a762-eb21902e18ae"]
}, Open  ]],

Cell["\<\
Now let us demonstrate some non-trivial contractions. First, we have the \
inner product of vectors - in this case, we get the norm (squared) of the \
4-velocity, since we are contracting it with itself:\
\>", "Text",ExpressionUUID->"c71294f0-13fe-4366-9c30-8cd6887e9be9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"\"\<4-Velocity\>\"", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{"\"\<4-Velocity\>\"", "[", "\"\<\[Mu]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"a0dc2c27-dae0-4948-b5ce-bb55ff177f67"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    RowBox[{"-", "1"}]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"54f1a86e-b0e4-43ab-9fb0-05005ddf8f5b"]
}, Open  ]],

Cell[TextData[{
 "We can also contract several tensors together, with ",
 StyleBox["two",
  FontWeight->"Bold"],
 " matching pairs of indices:"
}], "Text",ExpressionUUID->"743e3865-4bfe-495d-a6bb-d90591742a8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"\"\<4-Velocity\>\"", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{
    "\"\<PerfectFluidFromVelocity\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], ".", 
    RowBox[{"\"\<NonSymmetric\>\"", "[", "\"\<\[Nu]\[Rho]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[124]:=",ExpressionUUID->"f4073cb3-9649-4620-a79a-9cdedd6ec403"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{"0"}, {"0"}, {"0"}, {
           RowBox[{"-", 
             FractionBox["\[Rho]", 
              SqrtBox[
               RowBox[{"1", "-", 
                 SuperscriptBox["v", "2"]}]]]}]}}, RowSpacings -> 1, 
         ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"51296886-5b43-4f77-bc5a-0ea9674de9b3"]
}, Open  ]],

Cell["\<\
Finally, to take the trace of a tensor, we simply match pairs of indices in \
that tensor\[CloseCurlyQuote]s index string:\
\>", "Text",ExpressionUUID->"427fdd0a-58a2-42df-8b8a-b549582eacd1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{"\"\<Minkowski\>\"", "[", "\"\<\[Mu]\[Mu]\>\"", "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[125]:=",ExpressionUUID->"85ec31d5-7027-4784-b856-e1e69f5fca67"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", "4"},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"feb50d11-da5a-470f-b582-e8f2f1820a9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
   "\"\<PerfectFluidFromVelocity\>\"", "[", "\"\<\[Mu]\[Mu]\>\"", "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"6129acee-fbe9-4e1d-8a27-f2692f61e160"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    RowBox[{
      RowBox[{"3", " ", "p"}], "-", "\[Rho]"}]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"9e8eeeba-4a38-4c57-bc15-9a55b4b31c94"]
}, Open  ]],

Cell["\<\
Of course, this also works for tensors with more than two indices, as we will \
see below. Any combination of indices can be used, with no limit on the \
number of traces taken for each tensor.\
\>", "Text",ExpressionUUID->"8f5fbebc-71e5-4f04-8e0d-3d4113c9812c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Derivatives and curvature tensors", \
"Section",ExpressionUUID->"60616324-52e9-401e-a1e6-7bc695d54c7c"],

Cell[TextData[{
 "The ",
 StyleBox["partial derivative",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[PartialD]", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "bc6355b1-349d-4e07-b976-313075785ad1"],
 " is represented in OGRe using the symbol ",
 StyleBox["TPartialD", "Input"],
 ". It can be contracted with other tensors using the usual OGRe contraction \
notation - including an appropriate index string - to calculate gradients and \
divergences."
}], "Text",ExpressionUUID->"9c38e5f1-3f61-4e19-8a6d-96a60354811f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TPartialD"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"2e8385b1-57a0-436e-abca-adf455acc84c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TPartialD[\\\", StyleBox[\\\"index\\\", Bold, Rule[StripOnInput, False]], \
\\\"] represents the partial derivative when used in a tensor expression \
given to TCalc[].\\\"}]], TextCell[Row[List[\\\"TPartialD[\\\", \
Style[\\\"index\\\", Bold], \\\"] represents the partial derivative when used \
in a tensor expression given to TCalc[].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TPartialD\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TPartialD[\\\", StyleBox[\\\"index\\\", Bold, Rule[StripOnInput, False]], \
\\\"] represents the partial derivative when used in a tensor expression \
given to TCalc[].\\\"}]], TextCell[Row[List[\\\"TPartialD[\\\", \
Style[\\\"index\\\", Bold], \\\"] represents the partial derivative when used \
in a tensor expression given to TCalc[].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TPartialD[\", \
StyleBox[\"index\", Bold, Rule[StripOnInput, False]], \"] represents the \
partial derivative when used in a tensor expression given to TCalc[].\"}]], \
TextCell[Row[List[\"TPartialD[\", Style[\"index\", Bold], \"] represents the \
partial derivative when used in a tensor expression given to \
TCalc[].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "OGRe`TPartialD"|>, 
   False]]], "Output",
 CellLabel->"Out[127]=",ExpressionUUID->"19991406-5a08-4ac3-90f7-bbc35bc0538c"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["gradient",
  FontWeight->"Bold"],
 " of a tensor is the partial derivative ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[PartialD]", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "ab34a6e6-a73f-4ef7-b618-e5c8fd64aa9e"],
 " acting on the tensor with a free index, e.g. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], "\[Phi]"}], TraditionalForm]],
  ExpressionUUID->"5966d553-a945-41c9-ae74-ccaa2a23aaa8"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SuperscriptBox["v", "\[Nu]"]}], TraditionalForm]],ExpressionUUID->
  "5b88b0c0-7c25-42a1-a532-37a9687e5a0c"],
 ", or ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SuperscriptBox["T", "\[Nu]\[Lambda]"]}], TraditionalForm]],ExpressionUUID->
  "476411f7-7e34-4503-8075-5d0c52b7c570"],
 ", resulting in a tensor of ",
 StyleBox["one rank higher",
  FontWeight->"Bold"],
 ". For example, we can calculate the gradient ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], "K"}], TraditionalForm]],
  ExpressionUUID->"485bc019-45c0-4103-abaf-28f2ff3485b5"],
 " of the Kretschmann scalar as follows:"
}], "Text",ExpressionUUID->"63c2f7f8-05f1-44c6-8360-032c2e800d5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{"\"\<Kretschmann\>\"", "[", "\"\<\>\"", "]"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[128]:=",ExpressionUUID->"64fade24-b9f8-4c72-9d7b-21550c944976"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{"0"}, {
           RowBox[{"-", 
             FractionBox[
              RowBox[{"288", " ", 
                SuperscriptBox["M", "2"]}], 
              SuperscriptBox["r", "7"]]}]}, {"0"}, {"0"}}, RowSpacings -> 1, 
         ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"630fc8f1-8011-4783-8659-abc47d5bdc2e"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["divergence",
  FontWeight->"Bold"],
 " of a tensor is the contraction of the partial derivative ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[PartialD]", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "1b4408ba-72ee-4c0c-906a-13149375242d"],
 " with one of the tensor\[CloseCurlyQuote]s indices, e.g. ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SuperscriptBox["v", "\[Mu]"]}], TraditionalForm]],ExpressionUUID->
  "90faf1a1-4bdd-49a7-b3fa-a581d0392a24"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SuperscriptBox["T", "\[Mu]\[Nu]"]}], TraditionalForm]],ExpressionUUID->
  "42993676-f118-414e-9de5-12d3684ec9bc"],
 ", resulting in a tensor of ",
 StyleBox["one rank lower",
  FontWeight->"Bold"],
 ". For example, here is the divergence ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SuperscriptBox["x", "\[Mu]"]}], TraditionalForm]],ExpressionUUID->
  "5a8d4e18-cfa3-432c-823e-91a2f7bde9e3"],
 " of the spherical coordinate vector:"
}], "Text",ExpressionUUID->"9d36741a-d476-4237-b7ba-04a3edb168af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{"\"\<Spherical\>\"", "[", "\"\<\[Mu]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"e6602e85-ce8a-4d93-9581-20c4b5c7c530"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", "4"},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"3bc0e614-fb7d-4869-8f81-dccf91868a59"]
}, Open  ]],

Cell[TextData[{
 "As you can see, the syntax for both the gradient and divergence is the \
same; if the index specification of ",
 StyleBox["TPartialD[\[OpenCurlyDoubleQuote]\[Mu]\[CloseCurlyDoubleQuote]]", 
  "Input"],
 " matches one of the indices of the tensor to its right, then the divergence \
will be calculated, otherwise the gradient will be calculated."
}], "Text",ExpressionUUID->"c127fb7e-206b-40fc-b4c0-fee9dd8fe67e"],

Cell[TextData[{
 StyleBox["WARNING: When applying partial derivatives to tensors, the result \
generally does not transform like a tensor under a coordinate transformation.",
  FontWeight->"Bold"],
 " For this reason, in general relativity we normally use the ",
 StyleBox["covariant derivative",
  FontWeight->"Bold"],
 " instead of a partial derivative. However, there are three important \
exceptions, where partial derivatives must be used: in the covariant \
derivative itself, the ",
 StyleBox["Levi-Civita connection",
  FontWeight->"Bold"],
 ",",
 " and the ",
 StyleBox["Riemann tensor",
  FontWeight->"Bold"],
 ", all of which will be discussed below."
}], "Text",ExpressionUUID->"702cde85-7a82-4e65-8a15-0743f72e978a"],

Cell[TextData[{
 "Of these three special cases, the covariant derivative and the Riemann \
tensor turn out to nonetheless transform like tensors under coordinate \
transformations, due to cancellations. However, the Levi-Civita connection, \
whose components are called the ",
 StyleBox["Christoffel symbols",
  FontWeight->"Bold"],
 ", has a special transformation rule, which is used automatically by OGRe, \
as we will show."
}], "Text",ExpressionUUID->"e0f49cb2-eb41-4e7f-8adc-623e964d3556"],

Cell[TextData[{
 "In all other cases, if the user creates an arbitrary tensor using partial \
derivatives, the result will generally ",
 StyleBox["transform incorrectly",
  FontWeight->"Bold"],
 " under a coordinate transformation in OGRe. Therefore, it is highly \
recommended to avoid using partial derivatives with ",
 StyleBox["TCalc", "Input"],
 " unless you really know what you\[CloseCurlyQuote]re doing."
}], "Text",ExpressionUUID->"0c66b20d-9fc2-4591-9217-1ffa099747a2"],

Cell[CellGroupData[{

Cell["The Christoffel symbols", \
"Subsection",ExpressionUUID->"963caa17-cdf7-4b1b-8b5a-b4fb4ceb43b8"],

Cell[TextData[{
 "The ",
 StyleBox["Christoffel symbols",
  FontWeight->"Bold"],
 " are a very important tensor-like objects in differential geometry. They \
are the components of the ",
 StyleBox["Levi-Civita connection,",
  FontWeight->"Bold"],
 " which is the unique torsion-free connection that preserves the metric. The \
Christoffel symbols are defined as follows:"
}], "Text",ExpressionUUID->"02b85cae-f0e9-4863-8d61-bdd2f931d1b4"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\[CapitalGamma]", "\[Mu]\[Nu]", "\[Lambda]"},
   "Subsuperscript"], "=", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"g", "\[Lambda]\[Sigma]"},
    "Superscript"], " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[PartialD]", "\[Mu]"], 
       SubscriptBox["g", "\[Nu]\[Sigma]"]}], "+", 
      RowBox[{
       SubscriptBox["\[PartialD]", "\[Nu]"], 
       SubscriptBox["g", "\[Sigma]\[Mu]"]}], "-", 
      RowBox[{
       SubscriptBox["\[PartialD]", "\[Sigma]"], 
       SubscriptBox["g", "\[Mu]\[Nu]"]}]}], ")"}], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"8f6d2602-30a3-44a8-a85a-b98b04ccf13f"],

Cell[TextData[{
 "Each of the terms inside the parentheses is a gradient of the metric, with \
different indices. For example, the first term ",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["\[PartialD]", "\[Mu]"], 
   SubscriptBox["g", "\[Nu]\[Sigma]"]}]], "InlineFormula",
  CellChangeTimes->{{3.7959944504981165`*^9, 3.7959944706363964`*^9}, {
    3.7959945227656126`*^9, 3.795994524300112*^9}, {3.7960408058457603`*^9, 
    3.796040812080829*^9}, 3.8052217314705353`*^9, {3.8052217702557335`*^9, 
    3.805221770637235*^9}},ExpressionUUID->
  "8adcc092-2406-41e3-8ce0-d32742caac20"],
 " is represented in OGRe as ",
 StyleBox["TPartialD[\[OpenCurlyDoubleQuote]\[Mu]\[CloseCurlyDoubleQuote]].\
\[OpenCurlyDoubleQuote]Metric\[CloseCurlyDoubleQuote][\[OpenCurlyDoubleQuote]\
", "Input"],
 StyleBox["\[Nu]\[Sigma]", "Input",
  IgnoreSpellCheck->True],
 StyleBox["\[CloseCurlyDoubleQuote]]", "Input"],
 " where ",
 StyleBox["\[OpenCurlyDoubleQuote]Metric\[CloseCurlyDoubleQuote]", "Input"],
 " is the tensor object representing the metric. Since contraction, addition, \
and multiplication by scalar can be combined arbitrarily when using ",
 StyleBox["TCalc", "Input"],
 ", we can calculate the Christoffel symbols in a straightforward way as \
follows:"
}], "Text",ExpressionUUID->"175be2c5-515b-476c-b784-71b8b6fe45e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TChangeDefaultIndices", "[", 
   RowBox[{
    RowBox[{"TCalc", "[", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{
        RowBox[{
        "\"\<Schwarzschild\>\"", "[", "\"\<\[Lambda]\[Sigma]\>\"", "]"}], ".", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<Schwarzschild\>\"", "[", "\"\<\[Nu]\[Sigma]\>\"", "]"}]}], 
          "+", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Nu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<Schwarzschild\>\"", "[", "\"\<\[Sigma]\[Mu]\>\"", "]"}]}], 
          "-", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Sigma]\>\"", "]"}], ".", 
           RowBox[{"\"\<Schwarzschild\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]
           }], ")"}]}]}], ",", "\"\<\[CapitalGamma]\>\""}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[130]:=",ExpressionUUID->"7d036736-bf5d-4de0-8c98-b71659463326"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{"r", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}], 
           SuperscriptBox["r", "3"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            RowBox[{"2", " ", "M", " ", "r"}], "-", 
            SuperscriptBox["r", "2"]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"2", " ", "M"}], "-", "r"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", "M"}], "-", "r"}], ")"}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"Cot", "[", "\[Theta]", "]"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"414d9742-d62b-43aa-8711-3d2a0ebc21ac"]
}, Open  ]],

Cell[TextData[{
 "However, there is a problem; as we mentioned above, ",
 StyleBox["the Christoffel symbols are not the components of a tensor",
  FontWeight->"Bold"],
 ", meaning that the Levi-Civita connection does not transform as a tensor \
does under a coordinate transformation. Indeed, by transforming the metric in \
the definition, one can show that"
}], "Text",ExpressionUUID->"6a6e0a53-dea5-4ce8-8840-99ecb0486cea"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\[CapitalGamma]", 
    RowBox[{
      SuperscriptBox["\[Mu]", "\[Prime]"], 
      SuperscriptBox["\[Nu]", "\[Prime]"]}], 
    SuperscriptBox["\[Lambda]", "\[Prime]"]},
   "Subsuperscript"], "=", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", 
       SuperscriptBox["\[Lambda]", "\[Prime]"]]}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "\[Lambda]"]}]], 
    FractionBox[
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "\[Mu]"]}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", 
       SuperscriptBox["\[Mu]", "\[Prime]"]]}]], 
    FractionBox[
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "\[Nu]"]}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", 
       SuperscriptBox["\[Nu]", "\[Prime]"]]}]], 
    TemplateBox[{"\[CapitalGamma]", "\[Mu]\[Nu]", "\[Lambda]"},
     "Subsuperscript"]}], "+", 
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", 
       SuperscriptBox["\[Lambda]", "\[Prime]"]]}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "\[Lambda]"]}]], 
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["\[PartialD]", "2"], 
       SuperscriptBox["x", "\[Lambda]"]}], 
      RowBox[{
       RowBox[{"\[PartialD]", 
        SuperscriptBox["x", 
         SuperscriptBox["\[Mu]", "\[Prime]"]]}], 
       RowBox[{"\[PartialD]", 
        SuperscriptBox["x", 
         SuperscriptBox["\[Nu]", "\[Prime]"]]}]}]], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"e9634564-a5ad-495a-8294-988c43879117"],

Cell["\<\
The first term is the familiar transformation rule for a tensor, with one \
factor of the Jacobian per index as usual. However, there is also an extra \
second term, meaning that the Christoffel symbols do not transform like a \
tensor.\
\>", "Text",ExpressionUUID->"7d1df974-005f-4c8e-b6e1-b3db77de3bdd"],

Cell["\<\
(Actually, you are also not supposed to raise or lower indices in the \
Christoffel symbols, but in practice, you can do that as long as you make it \
clear that it\[CloseCurlyQuote]s just an abuse of notation - you are only \
adding factors of the metric, not creating a new tensor representation with \
different transformation properties.)\
\>", "Text",ExpressionUUID->"d4e729f0-1460-4097-9950-9888add2a0b2"],

Cell[TextData[{
 "Due to the extra transformation term, the tensor object we calculated \
manually above using ",
 StyleBox["TCalc", "Input"],
 " ",
 StyleBox["must not be used",
  FontWeight->"Bold"],
 ". Instead, we should use the built-in module TCalcChristoffel, which not \
only performs the calculation automatically for us, but also marks the result \
as a special object with special transformation properties:"
}], "Text",ExpressionUUID->"b6e18bdf-ac47-437d-a985-10004b5ce801"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcChristoffel"}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"c7332172-ab07-4cd5-8c9d-3e73c9dda0dc"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcChristoffel[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Christoffel symbols (the coefficients of the \
Levi-Civita connection) from the metric \\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"Christoffel\\\\\\\". Note that the \
Christoffel symbols are not the components of a tensor, but this tensor \
object will know to transform according to the correct rules under change of \
coordinates.\\\"}]], TextCell[Row[List[\\\"TCalcChristoffel[\\\", \
Style[\\\"metricID\\\", Bold], \\\"] calculates the Christoffel symbols (the \
coefficients of the Levi-Civita connection) from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\
\\\\\". Note that the Christoffel symbols are not the components of a tensor, \
but this tensor object will know to transform according to the correct rules \
under change of coordinates.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcChristoffel", "[", "OGRe`Private`metricID_String", 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`christoffelID", ",", 
                    RowBox[{"OGRe`Private`inverseMetricID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}]}], "}"}], 
                    ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcChristoffel", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`inverseMetricID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Components\"", 
                    "]"}]}], ",", 
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], ",", 
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Metric\"", 
                    "]"}]}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    TemplateBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Symbol\"", "]"}], 
                    "\"\[Lambda]\[Sigma]\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`christoffelID", "=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Lambda]\[Mu]\[Nu]\"", "]"}], ",", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`inverseMetricID", "[", 
                    "\"\[Lambda]\[Sigma]\"", "]"}], ".", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TPartialD", "[", "\"\[Mu]\"", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`metricID", "[", "\"\[Nu]\[Sigma]\"",
                     "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"TPartialD", "[", "\"\[Nu]\"", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`metricID", "[", "\"\[Sigma]\[Mu]\"",
                     "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"TPartialD", "[", "\"\[Sigma]\"", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`metricID", "[", "\"\[Mu]\[Nu]\"", 
                    "]"}]}]}], ")"}]}]}], ",", "\"\[CapitalGamma]\""}], 
                    "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`christoffelID", ",", "\"Role\"", 
                    ",", "\"Christoffel\""}], "]"}], ";", 
                    
                    RowBox[{"Return", "[", "OGRe`Private`christoffelID", 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcChristoffel\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcChristoffel[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Christoffel symbols (the coefficients of the \
Levi-Civita connection) from the metric \\\", StyleBox[\\\"metricID\\\", \
Bold, Rule[StripOnInput, False]], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"Christoffel\\\\\\\". Note that the \
Christoffel symbols are not the components of a tensor, but this tensor \
object will know to transform according to the correct rules under change of \
coordinates.\\\"}]], TextCell[Row[List[\\\"TCalcChristoffel[\\\", \
Style[\\\"metricID\\\", Bold], \\\"] calculates the Christoffel symbols (the \
coefficients of the Levi-Civita connection) from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\
\\\\\". Note that the Christoffel symbols are not the components of a tensor, \
but this tensor object will know to transform according to the correct rules \
under change of coordinates.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcChristoffel[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"] calculates the \
Christoffel symbols (the coefficients of the Levi-Civita connection) from the \
metric \", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \" and \
stores the result in a new tensor object with ID \\\"\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"Christoffel\\\". \
Note that the Christoffel symbols are not the components of a tensor, but \
this tensor object will know to transform according to the correct rules \
under change of coordinates.\"}]], TextCell[Row[List[\"TCalcChristoffel[\", \
Style[\"metricID\", Bold], \"] calculates the Christoffel symbols (the \
coefficients of the Levi-Civita connection) from the metric \", \
Style[\"metricID\", Bold], \" and stores the result in a new tensor object \
with ID \\\"\", Style[\"metricID\", Bold], \"Christoffel\\\". Note that the \
Christoffel symbols are not the components of a tensor, but this tensor \
object will know to transform according to the correct rules under change of \
coordinates.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcChristoffel, {OGRe`TCalcChristoffel[
         Pattern[OGRe`Private`metricID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`christoffelID, OGRe`Private`inverseMetricID = 
          OGRe`Private`NewTempID[]}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[OGRe`TCalcChristoffel, "ErrorNotMetric"]]; Abort[]; 
           Null]; OGRe`Private`SetTensorID[
          OGRe`Private`inverseMetricID, <|
           "Components" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["Components"], 
            "DefaultCoords" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
            "DefaultIndices" -> {1, 1}, "Metric" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["Metric"], "Role" -> 
            "Temporary", "Symbol" -> Superscript[
              OGRe`Private`TensorData[OGRe`Private`metricID]["Symbol"], 
              "\[Lambda]\[Sigma]"]|>]; OGRe`Private`christoffelID = OGRe`TCalc[
            (OGRe`Private`metricID <> "Christoffel")[
            "\[Lambda]\[Mu]\[Nu]"], (1/2) Dot[
              OGRe`Private`inverseMetricID["\[Lambda]\[Sigma]"], Dot[
                OGRe`TPartialD["\[Mu]"], 
                OGRe`Private`metricID["\[Nu]\[Sigma]"]] + Dot[
                OGRe`TPartialD["\[Nu]"], 
                OGRe`Private`metricID["\[Sigma]\[Mu]"]] - Dot[
               OGRe`TPartialD["\[Sigma]"], 
               OGRe`Private`metricID["\[Mu]\[Nu]"]]], "\[CapitalGamma]"]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`christoffelID, "Role", "Christoffel"]; 
         Return[OGRe`Private`christoffelID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcChristoffel"|>, False]]], "Output",
 CellLabel->"Out[131]=",ExpressionUUID->"7ca623ac-1b58-4b98-9eee-9b10be64407c"]
}, Open  ]],

Cell[TextData[{
 "Let us, then, calculate the Christoffel symbols for the Schwarzschild \
metric properly, using ",
 StyleBox["TCalcChristoffel", "Input"],
 ":"
}], "Text",ExpressionUUID->"4f0ca65d-a91a-4094-bdac-baa83d815c3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcChristoffel", "[", "\"\<Schwarzschild\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"c79b42c0-c430-4f24-8d49-8df058729312"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{"r", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}], 
           SuperscriptBox["r", "3"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            RowBox[{"2", " ", "M", " ", "r"}], "-", 
            SuperscriptBox["r", "2"]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"2", " ", "M"}], "-", "r"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", "M"}], "-", "r"}], ")"}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"Cot", "[", "\[Theta]", "]"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"ac48dfc0-e8c1-42e7-94df-d10af23222a2"]
}, Open  ]],

Cell[TextData[{
 "These are the same components we got before, but now they will transform \
properly. Note that the name of the tensor object created by ",
 StyleBox["TCalcChristoffel", "Input"],
 " is always the name of metric with the word ",
 StyleBox["Christoffel", "Input"],
 " appended to it (no spaces)."
}], "Text",ExpressionUUID->"262173d7-9c35-4ffe-b698-b44505055870"],

Cell["\<\
For maximal clarity, let us demonstrate the discrepancy in the coordinate \
transformation with a simple test metric:\
\>", "Text",ExpressionUUID->"87533f60-2c5a-4462-adba-e461783f1ae1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewMetric", "[", 
   RowBox[{"\"\<SimpleMetric\>\"", ",", "\"\<Cartesian\>\"", ",", 
    RowBox[{"DiagonalMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "x"}], ",", "1", ",", "1", ",", "1"}], "}"}], "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"6c68a307-3edd-4e16-aab3-c719fe4f3e41"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"SimpleMetric\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "x"}], "0", "0", "0"}, {"0", "1", "0", "0"}, {
         "0", "0", "1", "0"}, {"0", "0", "0", "1"}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"ff25ee41-595d-4bf1-8b30-55e89ffa34d5"]
}, Open  ]],

Cell["\<\
We calculate its Christoffel symbols in two ways. First manually, as we did \
above for the Schwarzschild metric:\
\>", "Text",ExpressionUUID->"21331ff0-da2e-4c01-935b-3d1e845e2753"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TChangeDefaultIndices", "[", 
   RowBox[{
    RowBox[{"TCalc", "[", 
     RowBox[{"\"\<SimpleMetricManualChristoffel\>\"", ",", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{
        RowBox[{
        "\"\<SimpleMetric\>\"", "[", "\"\<\[Lambda]\[Sigma]\>\"", "]"}], ".", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Nu]\[Sigma]\>\"", "]"}]}], "+", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Nu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Sigma]\[Mu]\>\"", "]"}]}], "-", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Sigma]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]}], 
         ")"}]}]}], ",", "\"\<\[CapitalGamma]\>\""}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[134]:=",ExpressionUUID->"2f0f4692-bad4-43a4-bb3f-39d98033caae"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SimpleMetricManualChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"x\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"x\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"2", " ", "x"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"x\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "2"]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"0ad35bd7-312e-488f-8227-dfed0cccb24f"]
}, Open  ]],

Cell[TextData[{
 "Then, with the built-in module ",
 StyleBox["TCalcChristoffel", "Input"],
 ":"
}], "Text",ExpressionUUID->"265cdb3f-b9a8-4d0e-9750-853c2f0320e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcChristoffel", "[", "\"\<SimpleMetric\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[135]:=",ExpressionUUID->"28ddbc50-b29b-490b-a9f6-2be9f2231fb1"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SimpleMetricChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"x\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"x\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"2", " ", "x"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"x\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "2"]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"5a5802ff-681a-4c52-bd6f-d07dce7e8037"]
}, Open  ]],

Cell[TextData[{
 "The two results have the same components, as expected. But now, let us now \
transform them to spherical coordinates. First, we transform the tensor \
object obtained using ",
 StyleBox["TCalcChristoffel", "Input"],
 ":"
}], "Text",ExpressionUUID->"10353b33-ce03-499f-bbd3-a2545352ae49"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<SimpleMetricChristoffel\>\"", ",", "\"\<Spherical\>\""}], 
  "]"}]], "Input",
 CellLabel->
  "In[136]:=",ExpressionUUID->"3d1a52ee-6fe5-43f8-bffd-ae2bc19c153c"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SimpleMetricChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"Cot", "[", "\[Theta]", "]"}], "2"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"Tan", "[", "\[Phi]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", "r"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", "r"}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            RowBox[{"Cos", "[", "\[Phi]", "]"}]}], 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{
             RowBox[{"Csc", "[", "\[Theta]", "]"}], " ", 
             RowBox[{"Sin", "[", "\[Phi]", "]"}]}], 
            RowBox[{"2", " ", "r"}]]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"Cot", "[", "\[Theta]", "]"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"079026a3-0e4c-4a2c-be9d-e27a9f75638e"]
}, Open  ]],

Cell[TextData[{
 "This is the ",
 StyleBox["correct",
  FontWeight->"Bold"],
 " representation of the Christoffel symbols in spherical coordinates, as the \
extra term in the transformation was taken into account. However, if we \
transform the Christoffel symbols we obtained manually using ",
 StyleBox["TCalc", "Input"],
 ", we get:"
}], "Text",ExpressionUUID->"72c22c25-67dd-4627-b8f5-11e4c55d6b46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<SimpleMetricManualChristoffel\>\"", ",", "\"\<Spherical\>\""}],
   "]"}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"511f98b9-d7b6-4790-bdb0-c308b05b29ae"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SimpleMetricManualChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"Cot", "[", "\[Theta]", "]"}], "2"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"Tan", "[", "\[Phi]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            RowBox[{"Cos", "[", "\[Phi]", "]"}]}], 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{
             RowBox[{"Csc", "[", "\[Theta]", "]"}], " ", 
             RowBox[{"Sin", "[", "\[Phi]", "]"}]}], 
            RowBox[{"2", " ", "r"}]]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"0ab26098-af42-46cd-b0f3-1ad7283c8509"]
}, Open  ]],

Cell[TextData[{
 "This is ",
 StyleBox["not",
  FontWeight->"Bold"],
 " the correct result, since the transformation did not take into account the \
extra term. To verify that the former result is indeed the correct one, let \
us change the default coordinate system of ",
 StyleBox["SimpleMetric", "Input"],
 " to spherical:"
}], "Text",ExpressionUUID->"a92fc919-a316-4b86-83c2-4c62b5ba2d6d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TChangeDefaultCoords", "[", 
   RowBox[{"\"\<SimpleMetric\>\"", ",", "\"\<Spherical\>\""}], "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[138]:=",ExpressionUUID->"ba5a44f0-c9c8-4a94-bd92-1b3af7a52e60"],

Cell[TextData[{
 "Now, when we calculate the Christoffel symbols manually from this metric, \
we will get their correct representation in spherical coordinates. This is \
because ",
 StyleBox["TCalc", "Input"],
 " always performs the calculations internally in the default coordinates of \
the first tensor, so the result was calculated ",
 StyleBox["from scratch",
  FontWeight->"Bold"],
 " in spherical coordinates, instead of being calculated first in Cartesian \
coordinates and then transformed:"
}], "Text",ExpressionUUID->"ec4b13e0-bbdb-48f7-bd94-c84a96fea225"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TChangeDefaultIndices", "[", 
   RowBox[{
    RowBox[{"TCalc", "[", 
     RowBox[{"\"\<SimpleMetricManualChristoffelSpherical\>\"", ",", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{
        RowBox[{
        "\"\<SimpleMetric\>\"", "[", "\"\<\[Lambda]\[Sigma]\>\"", "]"}], ".", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Nu]\[Sigma]\>\"", "]"}]}], "+", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Nu]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Sigma]\[Mu]\>\"", "]"}]}], "-", 
          RowBox[{
           RowBox[{"TPartialD", "[", "\"\<\[Sigma]\>\"", "]"}], ".", 
           RowBox[{
           "\"\<SimpleMetric\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]}], 
         ")"}]}]}], ",", "\"\<\[CapitalGamma]\>\""}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"cc5b3d90-3339-4a96-9fc2-88538385fe02"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SimpleMetricManualChristoffelSpherical\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"Cot", "[", "\[Theta]", "]"}], "2"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"Tan", "[", "\[Phi]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"Cos", "[", "\[Phi]", "]"}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", "r"}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", "r"}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            RowBox[{"Cos", "[", "\[Phi]", "]"}]}], 
           RowBox[{"2", " ", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{
             RowBox[{"Csc", "[", "\[Theta]", "]"}], " ", 
             RowBox[{"Sin", "[", "\[Phi]", "]"}]}], 
            RowBox[{"2", " ", "r"}]]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"Cot", "[", "\[Theta]", "]"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"0ac13299-273b-47c6-b371-c15889b2fb3e"]
}, Open  ]],

Cell[TextData[{
 "Indeed, this is the exact same result we got when we transformed ",
 StyleBox["SimpleMetricChristoffel", "Input"],
 " to spherical coordinates. We have learned an important lesson: since the \
Christoffel symbols do not transform like a tensor, we should always use the \
built-in module TCalcChristoffel to calculate them, which ensures that they \
transform properly. (Of course, this method is also much more convenient than \
writing the explicit definition...)"
}], "Text",ExpressionUUID->"f1c705f0-9ebc-4420-90fc-55538060e084"],

Cell[TextData[{
 "For future use, let us define the ",
 StyleBox["Friedmann\[Dash]Lemaitre\[Dash]Robertson\[Dash]Walker (FLRW) \
metric",
  FontWeight->"Bold"],
 ", which describes an expanding universe:"
}], "Text",ExpressionUUID->"d0dd8707-8e16-4ba8-9442-ba1d86643541"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"TSetReservedSymbols", "[", 
   RowBox[{"{", 
    RowBox[{"a", ",", "k"}], "}"}], "]"}], ";"}], "\n", 
 RowBox[{"TShow", "@", 
  RowBox[{"TNewMetric", "[", 
   RowBox[{"\"\<FLRW\>\"", ",", "\"\<Spherical\>\"", ",", 
    RowBox[{"DiagonalMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"a", "[", "t", "]"}], "2"], 
        RowBox[{"1", "-", 
         RowBox[{"k", " ", 
          SuperscriptBox["r", "2"]}]}]], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"a", "[", "t", "]"}], "2"], " ", 
        SuperscriptBox["r", "2"]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"a", "[", "t", "]"}], "2"], " ", 
        SuperscriptBox["r", "2"], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], "}"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[140]:=",ExpressionUUID->"4b9ab6f9-d3c6-4069-8ace-90726c4288b0"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"FLRW\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", 
          FractionBox[
           SuperscriptBox["a", "2"], 
           RowBox[{"1", "-", 
             RowBox[{"k", " ", 
               SuperscriptBox["r", "2"]}]}]], "0", "0"}, {"0", "0", 
          RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"]}], "0"}, {"0", "0", "0", 
          RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}}, RowSpacings -> 
        1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"e8d8c033-d88b-4afc-8e57-05d53eff3d26"]
}, Open  ]],

Cell["This metric has the line element:", \
"Text",ExpressionUUID->"cb78e8cc-0e86-4057-b344-d45112dda070"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TLineElement", "[", "\"\<FLRW\>\"", "]"}]], "Input",
 CellLabel->
  "In[142]:=",ExpressionUUID->"ba107629-8871-418f-8554-817224ec4cce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["\[DoubleStruckD]t", "2"]}], "+", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"a", "[", "t", "]"}], "2"], " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      SuperscriptBox["\[DoubleStruckD]r", "2"], 
      RowBox[{"1", "-", 
       RowBox[{"k", " ", 
        SuperscriptBox["r", "2"]}]}]], "+", 
     RowBox[{
      SuperscriptBox["r", "2"], " ", 
      SuperscriptBox["\[DoubleStruckD]\[Theta]", "2"]}], "+", 
     RowBox[{
      SuperscriptBox["r", "2"], " ", 
      SuperscriptBox["\[DoubleStruckD]\[Phi]", "2"], " ", 
      SuperscriptBox[
       RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}]], "Output",
 CellLabel->"Out[142]=",ExpressionUUID->"383ab37c-89c8-4a29-88e8-d4fc049d45cf"]
}, Open  ]],

Cell["and the volume element squared:", \
"Text",ExpressionUUID->"25a18283-8d16-4942-993e-72b1d9b48878"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TVolumeElementSquared", "[", "\"\<FLRW\>\"", "]"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"55396f59-51b5-42d5-962b-d00f6a221d12"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["r", "4"], " ", 
   SuperscriptBox[
    RowBox[{"a", "[", "t", "]"}], "6"], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], 
  RowBox[{
   RowBox[{"-", "1"}], "+", 
   RowBox[{"k", " ", 
    SuperscriptBox["r", "2"]}]}]]], "Output",
 CellLabel->"Out[143]=",ExpressionUUID->"c000c8cd-a58b-491f-b498-8e6387fc21f7"]
}, Open  ]],

Cell[TextData[{
 "Here, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", 
    RowBox[{"(", "t", ")"}]}], TraditionalForm]],ExpressionUUID->
  "0f38cab1-f965-4ea4-90a5-9d6f4934f3bd"],
 " is the ",
 StyleBox["scale factor",
  FontWeight->"Bold"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "9bfa0017-f21f-4674-9db9-238bcf43e45a"],
 " is the curvature of the spatial surfaces, with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "=", 
     RowBox[{"+", "1"}]}], ",", "0", ",", 
    RowBox[{"-", "1"}]}], TraditionalForm]],ExpressionUUID->
  "d40a573f-32cb-41db-b4c6-cd5bc7810505"],
 " corresponding to positively curved, flat, or negatively curved \
respectively. Its Christoffel symbols can be easily calculated using \
TCalcChristoffel:"
}], "Text",ExpressionUUID->"ea0e15c3-cd66-485b-9ff8-be83f8851e70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcChristoffel", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[144]:=",ExpressionUUID->"5052eaf1-e609-4514-93e2-c513e2b1501b"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"a", " ", 
            TemplateBox[{"Inactive", "a", "t"},
             "InactiveD"]}], 
           RowBox[{"1", "-", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"a", " ", 
           SuperscriptBox["r", "2"], " ", 
           TemplateBox[{"Inactive", "a", "t"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"a", " ", 
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           TemplateBox[{"Inactive", "a", "t"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           TemplateBox[{"Inactive", "a", "t"},
            "InactiveD"], "a"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"k", " ", "r"}], 
           RowBox[{"1", "-", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"r", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             RowBox[{"k", " ", 
              SuperscriptBox["r", "2"]}]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"r", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             RowBox[{"k", " ", 
              SuperscriptBox["r", "2"]}]}], ")"}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["1", "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}]}], " ", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"\[CapitalGamma]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"Cot", "[", "\[Theta]", "]"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"6cae0dea-c62f-4a06-bfd0-3ffa0727b206"]
}, Open  ]],

Cell[TextData[{
 "Notice how the derivatives of the function ",
 StyleBox["a", "Input"],
 " are shown by ",
 StyleBox["TList", "Input"],
 " in the notation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "t"], "a"}], TraditionalForm]],ExpressionUUID->
  "a2b0072a-401a-4916-96fc-a5f6a00c5508"],
 " instead of ",
 StyleBox["a\[CloseCurlyQuote]", "Code",
  IgnoreSpellCheck->True],
 StyleBox["[t]", "Code"],
 ". This may not seem like much of an improvement in this case, but in the \
case of partial derivatives of functions of many arguments, it can greatly \
improve readability. Here is a simple example:"
}], "Text",ExpressionUUID->"61fb2dbd-e1d1-4b5a-9372-cb99e80294f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TNewTensor", "[", 
   RowBox[{
   "\"\<PartialDerivatives\>\"", ",", "\"\<FLRW\>\"", ",", 
    "\"\<Cartesian\>\"", ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "x"}], "]"}], ",", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "x", ",", "y"}], 
       "]"}], ",", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "x", ",", "y", ",", 
        "z"}], "]"}], ",", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", "x", ",", "y", ",", 
        RowBox[{"{", 
         RowBox[{"z", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[145]:=",ExpressionUUID->"cb4bda7c-ee36-4db1-a957-8f60f7261e8d"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PartialDerivatives\"", "\":   \"", 
    TemplateBox[{"\"\[DottedSquare]\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{
           TemplateBox[{"Inactive", "f", "x"}, "InactiveD"]}, {
           TemplateBox[{"Inactive", "f", "x", "y"}, "InactiveD"]}, {
           TemplateBox[{"Inactive", "f", "x", "y", "z"}, "InactiveD"]}, {
           TemplateBox[{"Inactive", "f", "x", "y", 
             SuperscriptBox["z", "2"]}, "InactiveD"]}}, RowSpacings -> 1, 
         ColumnAlignments -> Center, ColumnAlignments -> Left], Column], 
       "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"352c6dab-b660-48c2-a1d9-eef032a2c74c"]
}, Open  ]],

Cell["Compare this with the raw components:", \
"Text",ExpressionUUID->"a552f35f-42eb-41e6-a621-51981e0d2d93"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", "\"\<PartialDerivatives\>\"", "]"}]], "Input",
 CellLabel->
  "In[146]:=",ExpressionUUID->"1b911b38-1f2f-4ac0-b2d2-af784f646c9e"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {1} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 146, 11, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[146]:=",ExpressionUUID->"b43d72f4-8062-4da3-a7d2-9e141e1ba28b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["f", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"1", ",", "0", ",", "0"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
   RowBox[{
    SuperscriptBox["f", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"1", ",", "1", ",", "0"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
   RowBox[{
    SuperscriptBox["f", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"1", ",", "1", ",", "1"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}], ",", 
   RowBox[{
    SuperscriptBox["f", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"1", ",", "1", ",", "2"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"x", ",", "y", ",", "z"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[146]=",ExpressionUUID->"41ed3e8e-edad-449d-8485-24f35f8be99c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Riemann tensor", \
"Subsection",ExpressionUUID->"ec3c0bd8-4989-4d57-b7ab-bbf5361df0f2"],

Cell[TextData[{
 "The ",
 StyleBox["Riemann curvature tensor",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   TemplateBox[{"R", 
     RowBox[{" ", "\[Sigma]\[Mu]\[Nu]"}], "\[Rho]"},
    "Subsuperscript"], TraditionalForm]],ExpressionUUID->
  "3c56158a-e9b4-4bf6-9583-4851e1a3fcda"],
 " can be calculated from the Christoffel symbols using the definition:"
}], "Text",ExpressionUUID->"e4f930c3-4121-4fef-b52f-98d61491fe5a"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"R", 
    RowBox[{" ", "\[Sigma]\[Mu]\[Nu]"}], "\[Rho]"},
   "Subsuperscript"], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    TemplateBox[{"\[CapitalGamma]", "\[Nu]\[Sigma]", "\[Rho]"},
     "Subsuperscript"]}], "-", 
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Nu]"], 
    TemplateBox[{"\[CapitalGamma]", "\[Mu]\[Sigma]", "\[Rho]"},
     "Subsuperscript"]}], "+", 
   RowBox[{
    TemplateBox[{"\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Rho]"},
     "Subsuperscript"], " ", 
    TemplateBox[{"\[CapitalGamma]", "\[Nu]\[Sigma]", "\[Lambda]"},
     "Subsuperscript"]}], "-", 
   RowBox[{
    TemplateBox[{"\[CapitalGamma]", "\[Nu]\[Lambda]", "\[Rho]"},
     "Subsuperscript"], " ", 
    RowBox[{
     TemplateBox[{"\[CapitalGamma]", "\[Mu]\[Sigma]", "\[Lambda]"},
      "Subsuperscript"], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"d2cdc93d-4209-4ad3-9672-0130e8727ea8"],

Cell[TextData[{
 "Notice that even though it contains partial derivatives, it nonetheless \
transforms like a tensor under a change of coordinates, because the extra \
transformation terms exactly cancel each other. To calculate this tensor, we \
can simply write down the formula in ",
 StyleBox["TCalc", "Input"],
 " with the correct indices contracted. Note that this time we specified the \
LHS indices explicitly, since they are not in the same order as the RHS \
indices in our definition:"
}], "Text",ExpressionUUID->"d9a3a2dd-a391-4cd7-9780-6c08bcbe6930"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TChangeDefaultIndices", "[", 
   RowBox[{
    RowBox[{"TCalc", "[", 
     RowBox[{
      RowBox[{
      "\"\<SchwarzschildRiemann\>\"", "[", "\"\<\[Rho]\[Sigma]\[Mu]\[Nu]\>\"",
        "]"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Rho]\[Nu]\[Sigma]\>\"", "]"}]}], "-", 
       RowBox[{
        RowBox[{"TPartialD", "[", "\"\<\[Nu]\>\"", "]"}], ".", 
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Rho]\[Mu]\[Sigma]\>\"", "]"}]}], "+", 
       RowBox[{
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Rho]\[Mu]\[Lambda]\>\"", "]"}], ".", 
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Lambda]\[Nu]\[Sigma]\>\"", "]"}]}], "-", 
       RowBox[{
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Rho]\[Nu]\[Lambda]\>\"", "]"}], ".", 
        RowBox[{
        "\"\<SchwarzschildChristoffel\>\"", "[", 
         "\"\<\[Lambda]\[Mu]\[Sigma]\>\"", "]"}]}]}], ",", "\"\<R\>\""}], 
     "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[147]:=",ExpressionUUID->"a0283440-2696-47b2-9b4d-ad1ab6b9e97b"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildRiemann\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  "\"r\"", "\"r\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"t\"", 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"2", " ", "M"}], 
           RowBox[{
            SuperscriptBox["r", "2"], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Theta]\"", "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"t\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Theta]\"", "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
                TemplateBox[{"\"r\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox["M", "r"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Phi]\"", "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"t\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Phi]\"", "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
                TemplateBox[{"\"r\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"M", " ", 
             SuperscriptBox[
              RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], "r"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"2", " ", "M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}], 
           SuperscriptBox["r", "4"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"2", " ", "M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}]}], 
           SuperscriptBox["r", "4"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}]}], 
           SuperscriptBox["r", "4"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}], 
           SuperscriptBox["r", "4"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            SuperscriptBox["r", "2"], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}], " ", 
            SuperscriptBox["r", "2"]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], "\"\[Phi]\"", "\"\[Phi]\"", "\"\[Theta]\""}, 
                 "RowDefault"], 
                TemplateBox[{"\"\[Theta]\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"2", " ", "M", " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], "r"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False],
                   "\"\[Theta]\"", "\"\[Phi]\"", "\"\[Theta]\""}, 
                 "RowDefault"], 
                TemplateBox[{"\"\[Phi]\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"2", " ", "M"}], "r"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"fbcffcdc-bbd3-49e8-9f62-10d38ee1d3a6"]
}, Open  ]],

Cell["\<\
The Riemann tensor with all its indices down satisfies the following symmetry \
and antisymmetry relations:\
\>", "Text",ExpressionUUID->"626b7fd1-362d-4364-a809-e97f86162f79"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["R", "\[Rho]\[Sigma]\[Mu]\[Nu]"], "=", 
  RowBox[{
   RowBox[{"-", 
    SubscriptBox["R", "\[Sigma]\[Rho]\[Mu]\[Nu]"]}], "=", 
   RowBox[{
    RowBox[{"-", 
     SubscriptBox["R", "\[Rho]\[Sigma]\[Nu]\[Mu]"]}], "=", 
    RowBox[{
     SubscriptBox["R", "\[Mu]\[Nu]\[Rho]\[Sigma]"], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"eb6d0a85-3c71-4bce-bd2a-0f2c6300a385"],

Cell[TextData[{
 "We can verify this for the Schwarzschild Riemann tensor using ",
 StyleBox["TList", "Input"],
 ", as it automatically detects components that are the same up to sign:"
}], "Text",ExpressionUUID->"8047d2e1-d09a-40bf-864d-df238a656b1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<SchwarzschildRiemann\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"6464386c-c13f-4d53-99b8-c63220859e71"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildRiemann\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"t\"", "\"r\"", "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"r\"", "\"t\"", "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                
                TemplateBox[{"\"t\"", "\"r\"", "\"r\"", "\"t\""}, 
                 "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                
                TemplateBox[{"\"r\"", "\"t\"", "\"t\"", "\"r\""}, 
                 "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"2", " ", "M"}], 
            SuperscriptBox["r", "3"]]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"t\"", "\"\[Theta]\"", "\"t\"", "\"\[Theta]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Theta]\"", "\"t\"", "\"\[Theta]\"", "\"t\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}], 
           SuperscriptBox["r", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"t\"", "\"\[Theta]\"", "\"\[Theta]\"", "\"t\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Theta]\"", "\"t\"", "\"t\"", "\"\[Theta]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}]}], 
           SuperscriptBox["r", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"t\"", "\"\[Phi]\"", "\"t\"", "\"\[Phi]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Phi]\"", "\"t\"", "\"\[Phi]\"", "\"t\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], 
           SuperscriptBox["r", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"t\"", "\"\[Phi]\"", "\"\[Phi]\"", "\"t\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Phi]\"", "\"t\"", "\"t\"", "\"\[Phi]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], 
           SuperscriptBox["r", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"r\"", "\"\[Theta]\"", "\"r\"", "\"\[Theta]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Theta]\"", "\"r\"", "\"\[Theta]\"", "\"r\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            RowBox[{"2", " ", "M"}], "-", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"r\"", "\"\[Theta]\"", "\"\[Theta]\"", "\"r\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Theta]\"", "\"r\"", "\"r\"", "\"\[Theta]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox["M", 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", "M"}], "+", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"r\"", "\"\[Phi]\"", "\"r\"", "\"\[Phi]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Phi]\"", "\"r\"", "\"\[Phi]\"", "\"r\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                
                TemplateBox[{"\"r\"", "\"\[Phi]\"", "\"\[Phi]\"", "\"r\""}, 
                 "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], 
           RowBox[{
            RowBox[{"2", " ", "M"}], "-", "r"}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{
               "\"\[Theta]\"", "\"\[Phi]\"", "\"\[Theta]\"", "\"\[Phi]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{
               "\"\[Phi]\"", "\"\[Theta]\"", "\"\[Phi]\"", "\"\[Theta]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                
                TemplateBox[{
                 "\"\[Theta]\"", "\"\[Phi]\"", "\"\[Phi]\"", "\"\[Theta]\""}, 
                 "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                
                TemplateBox[{
                 "\"\[Phi]\"", "\"\[Theta]\"", "\"\[Theta]\"", "\"\[Phi]\""}, 
                 "RowDefault"], 
                TemplateBox[{
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"2", " ", "M", " ", "r", " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              
              TemplateBox[{"\"\[Phi]\"", "\"r\"", "\"r\"", "\"\[Phi]\""}, 
               "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"M", " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "2"}], " ", "M"}], "+", "r"}]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"8ad13ea6-ee37-4928-bf8e-442aed5aff89"]
}, Open  ]],

Cell[TextData[{
 "Don\[CloseCurlyQuote]t worry - you don\[CloseCurlyQuote]t need to write the \
explicit definition of the Riemann tensor every time we want to calculate it. \
Instead, OGRe offers the built-in module ",
 StyleBox["TCalcRiemannTensor", "Input"],
 ":"
}], "Text",ExpressionUUID->"b5813b05-68ae-48d0-a303-c817877bf40d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcRiemannTensor"}]], "Input",
 CellLabel->
  "In[149]:=",ExpressionUUID->"ef28a3ac-3173-4de3-b507-046d8a5b4d3d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRiemannTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Riemann tensor from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"Riemann\\\\\\\". If a tensor with \
ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" exists, it will be assumed to be the Christoffel \
symbols of the metric, and will be used in the calculation. Otherwise, \\\\\\\
\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" will be created using TCalcChristoffel[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRiemannTensor[\\\", Style[\\\"metricID\\\", Bold], \
\\\"] calculates the Riemann tensor from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"Riemann\\\\\\\
\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Christoffel\\\\\\\" exists, it will be assumed to be the Christoffel \
symbols of the metric, and will be used in the calculation. Otherwise, \\\\\\\
\"\\\", Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\\\\\" will be \
created using TCalcChristoffel[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcRiemannTensor", "[", "OGRe`Private`metricID_String",
                     "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`RiemannID", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcRiemannTensor", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcChristoffel", "[", "OGRe`Private`metricID", 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`RiemannID", "=", 
                    RowBox[{"TChangeDefaultIndices", "[", 
                    RowBox[{
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"OGRe`Private`metricID", "<>", "\"Riemann\""}], 
                    ")"}], "[", "\"\[Rho]\[Sigma]\[Mu]\[Nu]\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TPartialD", "[", "\"\[Mu]\"", "]"}], ".", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Rho]\[Nu]\[Sigma]\"", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{"TPartialD", "[", "\"\[Nu]\"", "]"}], ".", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Rho]\[Mu]\[Sigma]\"", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Rho]\[Mu]\[Lambda]\"", "]"}], ".", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Lambda]\[Nu]\[Sigma]\"", "]"}]}], "-", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Rho]\[Nu]\[Lambda]\"", "]"}], ".", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ")"}], "[", 
                    "\"\[Lambda]\[Mu]\[Sigma]\"", "]"}]}]}], ",", "\"R\""}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`RiemannID", ",", "\"Role\"", ",", 
                    "\"Riemann\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`RiemannID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcRiemannTensor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRiemannTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Riemann tensor from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"Riemann\\\\\\\". If a tensor with \
ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" exists, it will be assumed to be the Christoffel \
symbols of the metric, and will be used in the calculation. Otherwise, \\\\\\\
\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" will be created using TCalcChristoffel[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRiemannTensor[\\\", Style[\\\"metricID\\\", Bold], \
\\\"] calculates the Riemann tensor from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"Riemann\\\\\\\
\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Christoffel\\\\\\\" exists, it will be assumed to be the Christoffel \
symbols of the metric, and will be used in the calculation. Otherwise, \\\\\\\
\"\\\", Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\\\\\" will be \
created using TCalcChristoffel[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcRiemannTensor[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"] calculates the \
Riemann tensor from the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new tensor object \
with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"Riemann\\\". If a tensor with ID \\\"\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \"Christoffel\\\" exists, it will be assumed to \
be the Christoffel symbols of the metric, and will be used in the \
calculation. Otherwise, \\\"\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \"Christoffel\\\" will be created using \
TCalcChristoffel[].\"}]], TextCell[Row[List[\"TCalcRiemannTensor[\", \
Style[\"metricID\", Bold], \"] calculates the Riemann tensor from the metric \
\", Style[\"metricID\", Bold], \" and stores the result in a new tensor \
object with ID \\\"\", Style[\"metricID\", Bold], \"Riemann\\\". If a tensor \
with ID \\\"\", Style[\"metricID\", Bold], \"Christoffel\\\" exists, it will \
be assumed to be the Christoffel symbols of the metric, and will be used in \
the calculation. Otherwise, \\\"\", Style[\"metricID\", Bold], \
\"Christoffel\\\" will be created using TCalcChristoffel[].\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcRiemannTensor, {OGRe`TCalcRiemannTensor[
         Pattern[OGRe`Private`metricID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`RiemannID}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[OGRe`TCalcRiemannTensor, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "Christoffel"]],
            OGRe`TCalcChristoffel[OGRe`Private`metricID]; Null]; 
         OGRe`Private`RiemannID = OGRe`TChangeDefaultIndices[
            OGRe`TCalc[
             (OGRe`Private`metricID <> "Riemann")["\[Rho]\[Sigma]\[Mu]\[Nu]"],
              Dot[
               OGRe`TPartialD["\[Mu]"], 
               (OGRe`Private`metricID <> "Christoffel")[
               "\[Rho]\[Nu]\[Sigma]"]] - Dot[
              OGRe`TPartialD["\[Nu]"], 
              (OGRe`Private`metricID <> "Christoffel")[
              "\[Rho]\[Mu]\[Sigma]"]] + Dot[
               (OGRe`Private`metricID <> "Christoffel")[
               "\[Rho]\[Mu]\[Lambda]"], 
               (OGRe`Private`metricID <> "Christoffel")[
               "\[Lambda]\[Nu]\[Sigma]"]] - Dot[
              (OGRe`Private`metricID <> "Christoffel")[
              "\[Rho]\[Nu]\[Lambda]"], 
              (OGRe`Private`metricID <> "Christoffel")[
              "\[Lambda]\[Mu]\[Sigma]"]], "R"], {1, -1, -1, -1}]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`RiemannID, "Role", "Riemann"]; 
         Return[OGRe`Private`RiemannID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcRiemannTensor"|>, False]]], "Output",
 CellLabel->"Out[149]=",ExpressionUUID->"eac9e10d-ad53-4ff8-a42a-6e0461730ace"]
}, Open  ]],

Cell["For example, for the FLRW metric we get:", \
"Text",ExpressionUUID->"37532e25-e7ad-4387-933f-7fcffe7ce46e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcRiemannTensor", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[150]:=",ExpressionUUID->"eaab07fb-7aed-4054-a747-9fc39bc3ed0c"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWRiemann\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"a", " ", 
            TemplateBox[{"Inactive", "a", 
              SuperscriptBox["t", "2"]},
             "InactiveD"]}], 
           RowBox[{"1", "-", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"a", " ", 
            TemplateBox[{"Inactive", "a", 
              SuperscriptBox["t", "2"]},
             "InactiveD"]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Theta]\"", "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"t\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"a", " ", 
           SuperscriptBox["r", "2"], " ", 
           TemplateBox[{"Inactive", "a", 
             SuperscriptBox["t", "2"]},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"t\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Phi]\"", "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"t\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"a", " ", 
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           TemplateBox[{"Inactive", "a", 
             SuperscriptBox["t", "2"]},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"t\"", "\"t\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"t\"", "\"t\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  "\"t\"", "\"r\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"r\"", 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], "\"t\"", "\"\[Theta]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"\[Theta]\"", 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False],
                   "\"t\"", "\"\[Phi]\"", "\"t\""}, "RowDefault"], 
                TemplateBox[{"\"\[Phi]\"", 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           TemplateBox[{"Inactive", "a", 
             SuperscriptBox["t", "2"]},
            "InactiveD"], "a"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Theta]\"", "\"\[Phi]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Theta]\"", "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
                TemplateBox[{"\"r\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False],
                   "\"\[Theta]\"", "\"\[Theta]\"", "\"\[Phi]\""}, 
                 "RowDefault"], 
                TemplateBox[{"\"\[Phi]\"", 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                "\"\[Phi]\"", "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"r\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"\[Phi]\"", "\"\[Theta]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False], 
                  "\"\[Phi]\"", "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
                TemplateBox[{"\"r\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
                 "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}], 
            RowBox[{"-", 
              TemplateBox[{"\"R\"", 
                TemplateBox[{
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False], "\"\[Phi]\"", "\"\[Phi]\"", "\"\[Theta]\""}, 
                 "RowDefault"], 
                TemplateBox[{"\"\[Theta]\"", 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                  StyleBox[
                  "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                   False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
               SubsuperscriptBox]}]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"r\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"r\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"k", "+", 
            SuperscriptBox[
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"], "2"]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False],
                 "\"r\"", "\"\[Theta]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox], 
            TemplateBox[{"\"R\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                "\"r\"", "\"\[Phi]\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{"\"\[Phi]\"", 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"k", "+", 
            SuperscriptBox[
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"], "2"]}], 
           RowBox[{"1", "-", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"3db3e9ee-5de9-4b12-961b-150ad0a317f0"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox["TCalcRiemannTensor", "Input"],
 " also has the advantage that it takes a metric as an input, and will \
automatically calculate the Christoffel symbols of the metric using ",
 StyleBox["TCalcChristoffel", "Input"],
 " if they have not already been calculated. The same principle also applies \
to the other built-in modules for calculating curvature tensors, which we \
will present below; they always take a metric as input, and will calculate \
any intermediate tensors in their definitions automatically as needed."
}], "Text",ExpressionUUID->"a1352c36-66a2-4583-bfb7-e3d057a25819"],

Cell[TextData[{
 "Finally, recall that above, we gave the ",
 StyleBox["Kretschmann scalar",
  FontWeight->"Bold"],
 " for the Schwarzschild metric as an example of a scalar. Now that we have \
the Riemann tensor, and the ability to contract tensors, we can actually \
calculate the Kretschmann scalar from scratch. The formula is:"
}], "Text",ExpressionUUID->"fe6f68db-cf7c-4bf5-8ad0-8b85139aee30"],

Cell[BoxData[
 RowBox[{
  RowBox[{"K", "=", 
   RowBox[{
    SubscriptBox["R", "\[Rho]\[Sigma]\[Mu]\[Nu]"], 
    SuperscriptBox["R", "\[Rho]\[Sigma]\[Mu]\[Nu]"]}]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"768114cb-eee2-462e-938b-\
3f45bec093fb"],

Cell["so it can be easily calculated in OGRe as follows:", \
"Text",ExpressionUUID->"bd482210-74d4-48c8-81b6-f0616a222c76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{"\"\<KretschmannFromScratch\>\"", ",", 
    RowBox[{
     RowBox[{
     "\"\<SchwarzschildRiemann\>\"", "[", "\"\<\[Rho]\[Sigma]\[Mu]\[Nu]\>\"", 
      "]"}], ".", 
     RowBox[{
     "\"\<SchwarzschildRiemann\>\"", "[", "\"\<\[Rho]\[Sigma]\[Mu]\[Nu]\>\"", 
      "]"}]}], ",", "\"\<K\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[151]:=",ExpressionUUID->"33a13179-f13e-4d4e-8d81-90ec5031d29a"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"KretschmannFromScratch\"", "\":   \"", 
    TemplateBox[{"\"K\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    FractionBox[
     RowBox[{"48", " ", 
       SuperscriptBox["M", "2"]}], 
     SuperscriptBox["r", "6"]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"e0b07c02-8906-4e33-a547-9353e1879f5a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Ricci tensor and scalar", \
"Subsection",ExpressionUUID->"0197a96e-b82d-4e16-84da-ab95aad7fd0c"],

Cell[TextData[{
 "The ",
 StyleBox["Ricci tensor",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["R", "\[Mu]\[Nu]"], TraditionalForm]],ExpressionUUID->
  "37505ace-4573-49a0-ab3f-83bebd9b7896"],
 " is the trace of the first and third indices of the Riemann tensor:"
}], "Text",ExpressionUUID->"aad49b2a-4e80-45f3-9add-74c6cb52c67e"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["R", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   TemplateBox[{"R", 
     RowBox[{" ", "\[Mu]\[Lambda]\[Nu]"}], "\[Lambda]"},
    "Subsuperscript"], 
   "."}]}]], \
"DisplayFormula",ExpressionUUID->"c4822698-663e-4f29-8cf3-3cc839d741d8"],

Cell[TextData[{
 "Therefore, we can calculate it by taking the trace, with the usual ",
 StyleBox["TCalc", "Input"],
 " syntax. For the Schwarzschild metric, the Ricci tensor vanishes:"
}], "Text",ExpressionUUID->"5e08ebf7-8131-41da-ba73-6abff6ba5d74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{
    "\"\<SchwarzschildRiemann\>\"", "[", 
     "\"\<\[Lambda]\[Mu]\[Lambda]\[Nu]\>\"", "]"}], ",", "\"\<R\>\""}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"f952fbc6-3347-4e3e-8e5e-071fa73c362b"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {"\<\"No non-zero elements.\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1e5babce-3321-438b-ab8e-0401efa4e54f"]
}, Open  ]],

Cell[TextData[{
 "We can also use the shorthand module ",
 StyleBox["TCalcRicciTensor", "Input"],
 ":"
}], "Text",ExpressionUUID->"de78cd3c-0e87-432c-81cd-ece45611817e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcRicciTensor"}]], "Input",
 CellLabel->
  "In[153]:=",ExpressionUUID->"db324f47-c124-4e56-815c-e7f63387f1ee"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRicciTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Ricci tensor from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\". If a tensor \
with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"Riemann\\\\\\\" exists, it will be assumed to be the Riemann \
tensor of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"Riemann\\\\\\\" will be created using TCalcRiemannTensor[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRicciTensor[\\\", Style[\\\"metricID\\\", Bold], \
\\\"] calculates the Ricci tensor from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\
\\\\\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Riemann\\\\\\\" exists, it will be assumed to be the Riemann tensor of \
the metric, and will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"Riemann\\\\\\\" will be created using \
TCalcRiemannTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcRicciTensor", "[", "OGRe`Private`metricID_String", 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`RicciTensorID", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcRicciTensor", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    RowBox[{"OGRe`Private`metricID", "<>", "\"Riemann\""}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcRiemannTensor", "[", 
                    "OGRe`Private`metricID", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`RicciTensorID", "=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}], ")"}], "[", "\"\[Mu]\[Nu]\"", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"OGRe`Private`metricID", "<>", "\"Riemann\""}], 
                    ")"}], "[", "\"\[Lambda]\[Mu]\[Lambda]\[Nu]\"", "]"}], 
                    ",", "\"R\""}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`RicciTensorID", ",", "\"Role\"", 
                    ",", "\"Ricci Tensor\""}], "]"}], ";", 
                    
                    RowBox[{"Return", "[", "OGRe`Private`RicciTensorID", 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcRicciTensor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRicciTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Ricci tensor from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\". If a tensor \
with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"Riemann\\\\\\\" exists, it will be assumed to be the Riemann \
tensor of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"Riemann\\\\\\\" will be created using TCalcRiemannTensor[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRicciTensor[\\\", Style[\\\"metricID\\\", Bold], \
\\\"] calculates the Ricci tensor from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\
\\\\\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Riemann\\\\\\\" exists, it will be assumed to be the Riemann tensor of \
the metric, and will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"Riemann\\\\\\\" will be created using \
TCalcRiemannTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcRicciTensor[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"] calculates the \
Ricci tensor from the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new tensor object \
with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"RicciTensor\\\". If a tensor with ID \\\"\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \"Riemann\\\" exists, it will be assumed to be \
the Riemann tensor of the metric, and will be used in the calculation. \
Otherwise, \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"Riemann\\\" will be created using TCalcRiemannTensor[].\"}]], \
TextCell[Row[List[\"TCalcRicciTensor[\", Style[\"metricID\", Bold], \"] \
calculates the Ricci tensor from the metric \", Style[\"metricID\", Bold], \" \
and stores the result in a new tensor object with ID \\\"\", Style[\"metricID\
\", Bold], \"RicciTensor\\\". If a tensor with ID \\\"\", Style[\"metricID\", \
Bold], \"Riemann\\\" exists, it will be assumed to be the Riemann tensor of \
the metric, and will be used in the calculation. Otherwise, \\\"\", \
Style[\"metricID\", Bold], \"Riemann\\\" will be created using \
TCalcRiemannTensor[].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcRicciTensor, {OGRe`TCalcRicciTensor[
         Pattern[OGRe`Private`metricID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`RicciTensorID}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[OGRe`TCalcRicciTensor, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "Riemann"]], 
           OGRe`TCalcRiemannTensor[OGRe`Private`metricID]; Null]; 
         OGRe`Private`RicciTensorID = OGRe`TCalc[
            (OGRe`Private`metricID <> "RicciTensor")["\[Mu]\[Nu]"], 
            (OGRe`Private`metricID <> "Riemann")[
            "\[Lambda]\[Mu]\[Lambda]\[Nu]"], "R"]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`RicciTensorID, "Role", "Ricci Tensor"]; 
         Return[OGRe`Private`RicciTensorID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcRicciTensor"|>, False]]], "Output",
 CellLabel->"Out[153]=",ExpressionUUID->"c4df9ad9-bde7-4261-a9ca-86c18952f3ac"]
}, Open  ]],

Cell["Here is the Ricci tensor for the FLRW metric:", \
"Text",ExpressionUUID->"34ba25e4-150d-4d07-a481-eaf088fee728"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcRicciTensor", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[154]:=",ExpressionUUID->"71fa9fbd-91b3-4e86-8016-0f0bf565541a"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWRicciTensor\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"3", " ", 
             TemplateBox[{"Inactive", "a", 
               SuperscriptBox["t", "2"]},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            RowBox[{"2", " ", 
             RowBox[{"(", 
              RowBox[{"k", "+", 
               SuperscriptBox[
                TemplateBox[{"Inactive", "a", "t"},
                 "InactiveD"], "2"]}], ")"}]}], "+", 
            RowBox[{"a", " ", 
             TemplateBox[{"Inactive", "a", 
               SuperscriptBox["t", "2"]},
              "InactiveD"]}]}], 
           RowBox[{"1", "-", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", 
              RowBox[{"(", 
               RowBox[{"k", "+", 
                SuperscriptBox[
                 TemplateBox[{"Inactive", "a", "t"},
                  "InactiveD"], "2"]}], ")"}]}], "+", 
             RowBox[{"a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           SuperscriptBox["r", "2"], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", " ", 
              RowBox[{"(", 
               RowBox[{"k", "+", 
                SuperscriptBox[
                 TemplateBox[{"Inactive", "a", "t"},
                  "InactiveD"], "2"]}], ")"}]}], "+", 
             RowBox[{"a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"d69e9450-5278-4901-bf91-e5a6de90bc2e"]
}, Open  ]],

Cell[TextData[{
 "The ",
 StyleBox["Ricci scalar",
  FontWeight->"Bold"],
 " is the trace of the Ricci tensor:"
}], "Text",ExpressionUUID->"f047445b-a632-42c0-b0fa-8bae00eeefbe"],

Cell[BoxData[
 RowBox[{"R", "=", 
  RowBox[{
   TemplateBox[{"R", 
     RowBox[{" ", "\[Lambda]"}], "\[Lambda]"},
    "Subsuperscript"], "=", 
   RowBox[{
    SuperscriptBox["g", "\[Mu]\[Nu]"], " ", 
    RowBox[{
     SubscriptBox["R", "\[Mu]\[Nu]"], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"6ceeb138-1e3c-4fe1-a0e8-1cce9fc9b8b3"],

Cell["\<\
We can calculate it from the Ricci tensor by taking the trace:\
\>", "Text",ExpressionUUID->"1dface47-7e01-4039-ac73-86159bb6fdac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"\"\<FLRWRicciTensor\>\"", "[", "\"\<\[Mu]\[Mu]\>\"", "]"}], ",", 
    "\"\<R\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[155]:=",ExpressionUUID->"e46f4d90-ff44-425d-84eb-482330a3a057"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"Result\"", "\":   \"", 
    TemplateBox[{"\"R\"", 
      TemplateBox[{}, "RowDefault"], 
      TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    FractionBox[
     RowBox[{"6", " ", 
       RowBox[{"(", 
         RowBox[{"k", "+", 
           SuperscriptBox[
            TemplateBox[{"Inactive", "a", "t"}, "InactiveD"], "2"], "+", 
           RowBox[{"a", " ", 
             TemplateBox[{"Inactive", "a", 
               SuperscriptBox["t", "2"]}, "InactiveD"]}]}], ")"}]}], 
     SuperscriptBox["a", "2"]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"d4a9749c-d3cd-47af-a1ff-3f67edbfdec8"]
}, Open  ]],

Cell[TextData[{
 "Or, as usual, we can simply use the shorthand module ",
 StyleBox["TCalcRicciScalar", "Input"],
 " to calculate it directly from the metric:"
}], "Text",ExpressionUUID->"ac7c3ab6-67d9-418e-8bc2-1c431c185d76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcRicciScalar"}]], "Input",
 CellLabel->
  "In[156]:=",ExpressionUUID->"01b8a418-1303-494d-9cce-2271f4f58e24"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRicciScalar[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\" calculates the Ricci scalar from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"RicciScalar\\\\\\\". If a tensor \
with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"RicciTensor\\\\\\\" exists, it will be assumed to be the Ricci \
tensor of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"RicciTensor\\\\\\\" will be created using TCalcRicciTensor[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRicciScalar[\\\", Style[\\\"metricID\\\", Bold], \
\\\" calculates the Ricci scalar from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"RicciScalar\\\
\\\\\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"RicciTensor\\\\\\\" exists, it will be assumed to be the Ricci tensor of \
the metric, and will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcRicciScalar", "[", "OGRe`Private`metricID_String", 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`RicciScalarID", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcRicciScalar", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcRicciTensor", "[", "OGRe`Private`metricID", 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`RicciScalarID", "=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciScalar\""}], ")"}], "[", "\"\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}], ")"}], "[", "\"\[Mu]\[Mu]\"", "]"}], 
                    ",", "\"R\""}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`RicciScalarID", ",", "\"Role\"", 
                    ",", "\"Ricci Scalar\""}], "]"}], ";", 
                    
                    RowBox[{"Return", "[", "OGRe`Private`RicciScalarID", 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcRicciScalar\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcRicciScalar[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\" calculates the Ricci scalar from the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores \
the result in a new tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\
\\\", Bold, Rule[StripOnInput, False]], \\\"RicciScalar\\\\\\\". If a tensor \
with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"RicciTensor\\\\\\\" exists, it will be assumed to be the Ricci \
tensor of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"RicciTensor\\\\\\\" will be created using TCalcRicciTensor[].\\\"}]], \
TextCell[Row[List[\\\"TCalcRicciScalar[\\\", Style[\\\"metricID\\\", Bold], \
\\\" calculates the Ricci scalar from the metric \\\", \
Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new tensor \
object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \\\"RicciScalar\\\
\\\\\". If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"RicciTensor\\\\\\\" exists, it will be assumed to be the Ricci tensor of \
the metric, and will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcRicciScalar[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \" calculates the \
Ricci scalar from the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new tensor object \
with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"RicciScalar\\\". If a tensor with ID \\\"\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \"RicciTensor\\\" exists, it will be assumed to \
be the Ricci tensor of the metric, and will be used in the calculation. \
Otherwise, \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"RicciTensor\\\" will be created using TCalcRicciTensor[].\"}]], \
TextCell[Row[List[\"TCalcRicciScalar[\", Style[\"metricID\", Bold], \" \
calculates the Ricci scalar from the metric \", Style[\"metricID\", Bold], \" \
and stores the result in a new tensor object with ID \\\"\", Style[\"metricID\
\", Bold], \"RicciScalar\\\". If a tensor with ID \\\"\", Style[\"metricID\", \
Bold], \"RicciTensor\\\" exists, it will be assumed to be the Ricci tensor of \
the metric, and will be used in the calculation. Otherwise, \\\"\", \
Style[\"metricID\", Bold], \"RicciTensor\\\" will be created using \
TCalcRicciTensor[].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcRicciScalar, {OGRe`TCalcRicciScalar[
         Pattern[OGRe`Private`metricID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`RicciScalarID}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[OGRe`TCalcRicciScalar, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "RicciTensor"]],
            OGRe`TCalcRicciTensor[OGRe`Private`metricID]; Null]; 
         OGRe`Private`RicciScalarID = OGRe`TCalc[
            (OGRe`Private`metricID <> "RicciScalar")[""], 
            (OGRe`Private`metricID <> "RicciTensor")["\[Mu]\[Mu]"], "R"]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`RicciScalarID, "Role", "Ricci Scalar"]; 
         Return[OGRe`Private`RicciScalarID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcRicciScalar"|>, False]]], "Output",
 CellLabel->"Out[156]=",ExpressionUUID->"ea52efb8-f8f1-427d-aed2-b08387184566"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcRicciScalar", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[157]:=",ExpressionUUID->"ade61322-97ed-46dc-b1ed-64a6366a5dd9"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWRicciScalar\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"R\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"6", " ", 
            RowBox[{"(", 
             RowBox[{"k", "+", 
              SuperscriptBox[
               TemplateBox[{"Inactive", "a", "t"},
                "InactiveD"], "2"], "+", 
              RowBox[{"a", " ", 
               TemplateBox[{"Inactive", "a", 
                 SuperscriptBox["t", "2"]},
                "InactiveD"]}]}], ")"}]}], 
           SuperscriptBox["a", "2"]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"5f89d899-103b-4312-8fd5-cd99bb512a57"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Einstein tensor", \
"Subsection",ExpressionUUID->"07981920-09ee-41bd-9e4b-229a16a438a2"],

Cell[TextData[{
 "The ",
 StyleBox["Einstein tensor",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["G", "\[Mu]\[Nu]"], TraditionalForm]],ExpressionUUID->
  "8af53df0-b364-45de-80e3-6a128d15448d"],
 " is given by:"
}], "Text",ExpressionUUID->"ae8f34a6-75bd-4fc4-a32a-8ebfbf128a92"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["G", "\[Mu]\[Nu]"], "=", 
  RowBox[{
   SubscriptBox["R", "\[Mu]\[Nu]"], "-", 
   RowBox[{
    FractionBox["1", "2"], 
    SubscriptBox["g", "\[Mu]\[Nu]"], 
    RowBox[{
    "R", "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"cebffd5e-f1f6-4684-bcea-19e58d48ef0b"],

Cell["\<\
As with all other curvature tensors, we can calculate it by combining the \
previously calculated tensors with the usual syntax:\
\>", "Text",ExpressionUUID->"515cab62-2677-40c8-9883-74a6ec49c5b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\"\<FLRWRicciTensor\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], "-", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{
       RowBox[{"\"\<FLRW\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}], ".", 
       RowBox[{"\"\<FLRWRicciScalar\>\"", "[", "\"\<\>\"", "]"}]}]}]}], ",", 
    "\"\<G\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[158]:=",ExpressionUUID->"742a7d35-ba84-484a-83ad-02fbd0461180"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"3", " ", 
            RowBox[{"(", 
             RowBox[{"k", "+", 
              SuperscriptBox[
               TemplateBox[{"Inactive", "a", "t"},
                "InactiveD"], "2"]}], ")"}]}], 
           SuperscriptBox["a", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"k", "+", 
            SuperscriptBox[
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"], "2"], "+", 
            RowBox[{"2", " ", "a", " ", 
             TemplateBox[{"Inactive", "a", 
               SuperscriptBox["t", "2"]},
              "InactiveD"]}]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["r", "2"]}], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"], "+", 
             RowBox[{"2", " ", "a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["r", "2"]}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"], "+", 
             RowBox[{"2", " ", "a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"f0e5555e-e046-4ef6-b9cd-7d2edc5d214c"]
}, Open  ]],

Cell[TextData[{
 "Or we can use the built-in module ",
 StyleBox["TCalcEinsteinTensor", "Input"],
 ":"
}], "Text",ExpressionUUID->"b751c03f-eea0-465e-bf46-f2c5efd20e94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcEinsteinTensor"}]], "Input",
 CellLabel->
  "In[159]:=",ExpressionUUID->"10b0bc4c-11b6-4294-9268-456a4ea202cb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcEinsteinTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Einstein tensor from the metric \\\", StyleBox[\
\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores the \
result in a new tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\"Einstein\\\\\
\\\". If a tensor with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\" exists, it will be \
assumed to be the Ricci tensor of the metric, and will be used in the \
calculation. Otherwise, \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"}]], TextCell[Row[List[\\\"TCalcEinsteinTensor[\\\", \
Style[\\\"metricID\\\", Bold], \\\"] calculates the Einstein tensor from the \
metric \\\", Style[\\\"metricID\\\", Bold], \\\" and stores the result in a \
new tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Einstein\\\\\\\". If a tensor with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\\\\\" exists, it will be \
assumed to be the Ricci tensor of the metric, and will be used in the \
calculation. Otherwise, \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcEinsteinTensor", "[", 
                    "OGRe`Private`metricID_String", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "OGRe`Private`EinsteinID", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcEinsteinTensor", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcRicciTensor", "[", "OGRe`Private`metricID", 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`EinsteinID", "=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"OGRe`Private`metricID", "<>", "\"Einstein\""}], 
                    ")"}], "[", "\"\[Mu]\[Nu]\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}], ")"}], "[", "\"\[Mu]\[Nu]\"", "]"}], 
                    "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`metricID", "[", "\"\[Mu]\[Nu]\"", 
                    "]"}], ".", 
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"RicciTensor\""}], ")"}], "[", "\"\[Rho]\[Rho]\"", 
                    "]"}]}]}]}], ",", "\"G\""}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`EinsteinID", ",", "\"Role\"", ",", 
                    "\"Einstein\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`EinsteinID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcEinsteinTensor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcEinsteinTensor[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the Einstein tensor from the metric \\\", StyleBox[\
\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and stores the \
result in a new tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\"Einstein\\\\\
\\\". If a tensor with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\" exists, it will be \
assumed to be the Ricci tensor of the metric, and will be used in the \
calculation. Otherwise, \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"}]], TextCell[Row[List[\\\"TCalcEinsteinTensor[\\\", \
Style[\\\"metricID\\\", Bold], \\\"] calculates the Einstein tensor from the \
metric \\\", Style[\\\"metricID\\\", Bold], \\\" and stores the result in a \
new tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Einstein\\\\\\\". If a tensor with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"RicciTensor\\\\\\\" exists, it will be \
assumed to be the Ricci tensor of the metric, and will be used in the \
calculation. Otherwise, \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"RicciTensor\\\\\\\" will be created using \
TCalcRicciTensor[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcEinsteinTensor[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \"] calculates the \
Einstein tensor from the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new tensor object \
with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"Einstein\\\". If a tensor with ID \\\"\", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \"RicciTensor\\\" exists, it will be assumed to \
be the Ricci tensor of the metric, and will be used in the calculation. \
Otherwise, \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"RicciTensor\\\" will be created using TCalcRicciTensor[].\"}]], \
TextCell[Row[List[\"TCalcEinsteinTensor[\", Style[\"metricID\", Bold], \"] \
calculates the Einstein tensor from the metric \", Style[\"metricID\", Bold], \
\" and stores the result in a new tensor object with ID \\\"\", \
Style[\"metricID\", Bold], \"Einstein\\\". If a tensor with ID \\\"\", Style[\
\"metricID\", Bold], \"RicciTensor\\\" exists, it will be assumed to be the \
Ricci tensor of the metric, and will be used in the calculation. Otherwise, \
\\\"\", Style[\"metricID\", Bold], \"RicciTensor\\\" will be created using \
TCalcRicciTensor[].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcEinsteinTensor, {OGRe`TCalcEinsteinTensor[
         Pattern[OGRe`Private`metricID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`EinsteinID}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[
          OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= "Metric",
            Message[
             MessageName[OGRe`TCalcEinsteinTensor, "ErrorNotMetric"]]; 
           Abort[]; Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "RicciTensor"]],
            OGRe`TCalcRicciTensor[OGRe`Private`metricID]; Null]; 
         OGRe`Private`EinsteinID = OGRe`TCalc[
            (OGRe`Private`metricID <> "Einstein")[
            "\[Mu]\[Nu]"], (OGRe`Private`metricID <> "RicciTensor")[
             "\[Mu]\[Nu]"] - (1/2) Dot[
              OGRe`Private`metricID["\[Mu]\[Nu]"], 
              (OGRe`Private`metricID <> "RicciTensor")["\[Rho]\[Rho]"]], "G"]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`EinsteinID, "Role", "Einstein"]; 
         Return[OGRe`Private`EinsteinID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcEinsteinTensor"|>, False]]], "Output",
 CellLabel->"Out[159]=",ExpressionUUID->"ff490ce7-1735-4bf9-8d3e-6f7b89e2484a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcEinsteinTensor", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[160]:=",ExpressionUUID->"527b0471-9c94-4d64-b70d-f02b3953e6cf"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWEinstein\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"t\"", "\"t\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"3", " ", 
            RowBox[{"(", 
             RowBox[{"k", "+", 
              SuperscriptBox[
               TemplateBox[{"Inactive", "a", "t"},
                "InactiveD"], "2"]}], ")"}]}], 
           SuperscriptBox["a", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"r\"", "\"r\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"k", "+", 
            SuperscriptBox[
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"], "2"], "+", 
            RowBox[{"2", " ", "a", " ", 
             TemplateBox[{"Inactive", "a", 
               SuperscriptBox["t", "2"]},
              "InactiveD"]}]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"k", " ", 
             SuperscriptBox["r", "2"]}]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"\[Theta]\"", "\"\[Theta]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["r", "2"]}], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"], "+", 
             RowBox[{"2", " ", "a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"G\"", 
              TemplateBox[{"\"\[Phi]\"", "\"\[Phi]\""}, "RowDefault"], 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False], 
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox["r", "2"]}], " ", 
           SuperscriptBox[
            RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             SuperscriptBox[
              TemplateBox[{"Inactive", "a", "t"},
               "InactiveD"], "2"], "+", 
             RowBox[{"2", " ", "a", " ", 
              TemplateBox[{"Inactive", "a", 
                SuperscriptBox["t", "2"]},
               "InactiveD"]}]}], ")"}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"8e50c6f9-aaa3-41d7-ae28-3bf0953e8806"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Covariant derivatives", \
"Subsection",ExpressionUUID->"aa096cac-2e83-4f78-ae30-1a2b9b6413a6"],

Cell[TextData[{
 "The partial derivative has limited use in general relativity, as ",
 StyleBox["it does not transform like a tensor",
  FontWeight->"Bold"],
 ". Therefore, it is only used in special cases, such as calculating the \
Christoffel symbols and the Riemann tensor. The ",
 StyleBox["covariant derivative",
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Del]", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "d49acb2d-7812-40fe-b491-ebed6aa2ca06"],
 " is a generalization of the partial derivative, which does transform like a \
tensor (as long as it acts on a proper tensor). It is defined as follows:"
}], "Text",ExpressionUUID->"befe3591-408d-49df-b6cb-404699812f8a"],

Cell[TextData[{
 "On a scalar ",
 Cell[BoxData[
  FormBox["\[CapitalPhi]", TraditionalForm]],ExpressionUUID->
  "c44a50ad-2a16-4b09-9003-1a48da40ebab"],
 ", the covariant derivative acts as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Del]", "\[Mu]"], "\[CapitalPhi]"}], "\[Congruent]", 
    RowBox[{
     SubscriptBox["\[PartialD]", "\[Mu]"], "\[CapitalPhi]"}]}], 
   TraditionalForm]],ExpressionUUID->"79a74818-bf8e-43c8-9c81-e4b689552c12"],
 "."
}], "Item",ExpressionUUID->"32564a77-5708-46ea-bc39-c6f481e1ee87"],

Cell[TextData[{
 "On a vector ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["v", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "cd29e4f5-5a17-4726-9d16-b3baeeb598d5"],
 ", the covariant derivative acts as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Del]", "\[Mu]"], 
     SuperscriptBox["v", "\[Nu]"]}], "\[Congruent]", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[PartialD]", "\[Mu]"], 
      SuperscriptBox["v", "\[Nu]"]}], "+", 
     RowBox[{
      SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Nu]"], 
      SuperscriptBox["v", "\[Lambda]"]}]}]}], TraditionalForm]],
  ExpressionUUID->"4af9b5eb-bc7d-45f5-a73c-aa464916834a"],
 "."
}], "Item",ExpressionUUID->"69686359-526b-48e4-8da9-68c30d3f85a4"],

Cell[TextData[{
 "On a covector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["w", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "ee2f17cd-91e9-4297-a299-9257afb00eb3"],
 ", the covariant derivative acts as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Del]", "\[Mu]"], 
     SubscriptBox["w", "\[Nu]"]}], "\[Congruent]", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[PartialD]", "\[Mu]"], 
      SubscriptBox["w", "\[Nu]"]}], "-", 
     RowBox[{
      SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Nu]", "\[Lambda]"], 
      SubscriptBox["u", "\[Lambda]"]}]}]}], TraditionalForm]],ExpressionUUID->
  "2ba9bc0d-9a4d-4679-82ef-640ab7bdf23c"],
 "."
}], "Item",ExpressionUUID->"dce5fb06-861c-48d1-90a4-fef170dcc63c"],

Cell[TextData[{
 "More generally, on a rank ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"p", ",", "q"}], ")"}], TraditionalForm]],ExpressionUUID->
  "569cf82a-cb48-40c2-b676-1b55632b4d70"],
 " tensor with components ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["T", 
    RowBox[{
     SubscriptBox["\[Sigma]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Sigma]", "q"]}], 
    RowBox[{
     SubscriptBox["\[Nu]", "1"], 
     SubscriptBox["\[CenterEllipsis]\[Nu]", "p"]}]], TraditionalForm]],
  ExpressionUUID->"a56127be-f107-4935-9e0c-c2f18e61666f"],
 ", the covariant derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Del]", "\[Mu]"], 
    SubsuperscriptBox["T", 
     RowBox[{
      SubscriptBox["\[Sigma]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Sigma]", "q"]}], 
     RowBox[{
      SubscriptBox["\[Nu]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Nu]", "p"]}]]}], TraditionalForm]],
  ExpressionUUID->"16ceb7b7-9440-4e46-853c-a47c6c22f53b"],
 " is defined as follows:"
}], "Text",ExpressionUUID->"d61fb872-a0ed-42c6-b4f6-da5484e32698"],

Cell[TextData[{
 "The first term will be ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SubsuperscriptBox["T", 
     RowBox[{
      SubscriptBox["\[Sigma]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Sigma]", "q"]}], 
     RowBox[{
      SubscriptBox["\[Nu]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Nu]", "p"]}]]}], TraditionalForm]],
  ExpressionUUID->"46d1d934-cbe1-4150-893a-0c020c0d2149"],
 "."
}], "Item",ExpressionUUID->"842b0815-c7c2-4867-b500-5be7345aaad9"],

Cell[TextData[{
 "We ",
 StyleBox["add",
  FontWeight->"Bold"],
 " one term ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", 
     SubscriptBox["\[Nu]", "i"]], 
    SubsuperscriptBox["T", 
     RowBox[{
      SubscriptBox["\[Sigma]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Sigma]", "q"]}], 
     RowBox[{
      SubscriptBox["\[Nu]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Lambda]\[CenterEllipsis]\[Nu]", 
       "p"]}]]}], TraditionalForm]],ExpressionUUID->
  "025ef323-5d77-4025-bf48-b58bc93579cd"],
 " for each upper index ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Nu]", "i"], TraditionalForm]],ExpressionUUID->
  "a63848f5-e94b-40e6-abe4-502b7b5f3576"],
 "."
}], "Item",ExpressionUUID->"933e6791-9a5c-4959-a713-fe3fc8313751"],

Cell[TextData[{
 "We ",
 StyleBox["subtract",
  FontWeight->"Bold"],
 " one term ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[CapitalGamma]", 
     SubscriptBox["\[Mu]\[Sigma]", "i"], "\[Lambda]"], 
    SubsuperscriptBox["T", 
     RowBox[{
      SubscriptBox["\[Sigma]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Lambda]\[CenterEllipsis]\[Sigma]", 
       "q"]}], 
     RowBox[{
      SubscriptBox["\[Nu]", "1"], 
      SubscriptBox["\[CenterEllipsis]\[Nu]", "p"]}]]}], TraditionalForm]],
  ExpressionUUID->"43c7d06e-7d26-43f5-9d10-195214be731f"],
 " for each lower index ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Sigma]", "i"], TraditionalForm]],ExpressionUUID->
  "0e61bed5-46b0-4963-b392-536f3fc6c76e"],
 "."
}], "Item",ExpressionUUID->"53327665-e385-4a9a-b2b0-29b529253edf"],

Cell["\<\
Note that even though the covariant derivative is made from ingredients that \
do not transform like tensors - the partial derivative and the Christoffel \
symbols - the unwanted terms in the transformations of these ingredients \
cancel each other exactly, so that in the end, the entire sum does transform \
like a tensor.\
\>", "Text",ExpressionUUID->"014a1278-bbe4-43e2-a287-2fd145c524f4"],

Cell["\<\
As usual, we can, of course, write down the covariant derivative manually. \
For example, the covariant divergence of the metric is:\
\>", "Text",ExpressionUUID->"1598492f-482d-4cb4-b165-fef3fda5d00f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Del]", "\[Mu]"], 
   SubscriptBox["g", "\[Alpha]\[Beta]"]}], "=", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Mu]"], 
    SubscriptBox["g", "\[Alpha]\[Beta]"]}], "-", 
   RowBox[{
    SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Alpha]", "\[Lambda]"], 
    SubscriptBox["g", "\[Lambda]\[Beta]"]}], "-", 
   RowBox[{
    SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Beta]", "\[Lambda]"], 
    RowBox[{
     SubscriptBox["g", "\[Alpha]\[Lambda]"], 
     "."}]}]}]}]], \
"DisplayFormula",ExpressionUUID->"61954982-c06b-4de2-8c42-d36f7360781b"],

Cell[TextData[{
 "It should vanish, by definition, for any metric; this is what we meant when \
we said the Levi-Civita connection ",
 StyleBox["preserves",
  FontWeight->"Bold"],
 " the metric. Indeed, we have for the Schwarzschild metric:"
}], "Text",ExpressionUUID->"23199234-09aa-4eaf-a19d-514a70af195d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"TPartialD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
     RowBox[{"\"\<Schwarzschild\>\"", "[", "\"\<\[Alpha]\[Beta]\>\"", "]"}]}],
     "-", 
    RowBox[{
     RowBox[{
     "\"\<SchwarzschildChristoffel\>\"", "[", 
      "\"\<\[Lambda]\[Mu]\[Alpha]\>\"", "]"}], ".", 
     RowBox[{
     "\"\<Schwarzschild\>\"", "[", "\"\<\[Lambda]\[Beta]\>\"", "]"}]}], "-", 
    RowBox[{
     RowBox[{
     "\"\<SchwarzschildChristoffel\>\"", "[", "\"\<\[Lambda]\[Mu]\[Beta]\>\"",
       "]"}], ".", 
     RowBox[{
     "\"\<Schwarzschild\>\"", "[", "\"\<\[Alpha]\[Lambda]\>\"", "]"}]}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"cf4c8eec-e014-4a82-ad68-da80bba4ce4e"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {"\<\"No non-zero elements.\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"25b188c8-57c8-43a1-a9df-73a52e177d9c"]
}, Open  ]],

Cell[TextData[{
 "Much more conveniently, the covariant derivative is represented in OGRe as ",
 StyleBox["TCovariantD", "Input"],
 ". It will automatically add the correct terms, as detailed above, for each \
of the tensor\[CloseCurlyQuote]s indices. To use it, simply contract it with \
any tensor, just like ",
 StyleBox["TPartialD", "Input"],
 ":"
}], "Text",ExpressionUUID->"b47ba3cb-0796-4966-8d26-cbd812eacf66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCovariantD"}]], "Input",
 CellLabel->
  "In[162]:=",ExpressionUUID->"972d3340-b1a5-41b4-beb2-e09a65764ed7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCovariantD[\\\", StyleBox[\\\"index\\\", Bold, Rule[StripOnInput, False]], \
\\\"] represents the covariant derivative when used in a tensor expression \
given to TCalc[]. If a tensor with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" exists, where \\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is the metric associated with the tensor the \
derivative is acting upon, then it will be assumed to be the Levi-Civita \
connection of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"Christoffel\\\\\\\" will be created using TCalcChristoffel[].\\\"}]], \
TextCell[Row[List[\\\"TCovariantD[\\\", Style[\\\"index\\\", Bold], \\\"] \
represents the covariant derivative when used in a tensor expression given to \
TCalc[]. If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Christoffel\\\\\\\" exists, where \\\", Style[\\\"metricID\\\", Bold], \\\
\" is the metric associated with the tensor the derivative is acting upon, \
then it will be assumed to be the Levi-Civita connection of the metric, and \
will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\\\\\" will be created using \
TCalcChristoffel[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCovariantD\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCovariantD[\\\", StyleBox[\\\"index\\\", Bold, Rule[StripOnInput, False]], \
\\\"] represents the covariant derivative when used in a tensor expression \
given to TCalc[]. If a tensor with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"Christoffel\\\\\\\" exists, where \\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\" is the metric associated with the tensor the \
derivative is acting upon, then it will be assumed to be the Levi-Civita \
connection of the metric, and will be used in the calculation. Otherwise, \
\\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\
\"Christoffel\\\\\\\" will be created using TCalcChristoffel[].\\\"}]], \
TextCell[Row[List[\\\"TCovariantD[\\\", Style[\\\"index\\\", Bold], \\\"] \
represents the covariant derivative when used in a tensor expression given to \
TCalc[]. If a tensor with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Christoffel\\\\\\\" exists, where \\\", Style[\\\"metricID\\\", Bold], \\\
\" is the metric associated with the tensor the derivative is acting upon, \
then it will be assumed to be the Levi-Civita connection of the metric, and \
will be used in the calculation. Otherwise, \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"Christoffel\\\\\\\" will be created using \
TCalcChristoffel[].\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCovariantD[\", \
StyleBox[\"index\", Bold, Rule[StripOnInput, False]], \"] represents the \
covariant derivative when used in a tensor expression given to TCalc[]. If a \
tensor with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \"Christoffel\\\" exists, where \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" is the metric associated with the tensor the \
derivative is acting upon, then it will be assumed to be the Levi-Civita \
connection of the metric, and will be used in the calculation. Otherwise, \
\\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"Christoffel\\\" will be created using TCalcChristoffel[].\"}]], \
TextCell[Row[List[\"TCovariantD[\", Style[\"index\", Bold], \"] represents \
the covariant derivative when used in a tensor expression given to TCalc[]. \
If a tensor with ID \\\"\", Style[\"metricID\", Bold], \"Christoffel\\\" \
exists, where \", Style[\"metricID\", Bold], \" is the metric associated with \
the tensor the derivative is acting upon, then it will be assumed to be the \
Levi-Civita connection of the metric, and will be used in the calculation. \
Otherwise, \\\"\", Style[\"metricID\", Bold], \"Christoffel\\\" will be \
created using TCalcChristoffel[].\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TCovariantD"|>, False]]], "Output",
 CellLabel->"Out[162]=",ExpressionUUID->"347379e2-7a12-4224-b462-5e565b96d21e"]
}, Open  ]],

Cell["\<\
For example, we can check that the covariant derivative of the FLRW metric \
also vanishes:\
\>", "Text",ExpressionUUID->"84ba133f-652c-413e-b00d-ade3383a8024"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"TCovariantD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{"\"\<FLRW\>\"", "[", "\"\<\[Alpha]\[Beta]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"c06c4ec5-ca9d-44f9-978c-f66887febb89"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {"\<\"No non-zero elements.\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"98e7c7ef-fcce-4075-bc5e-19de3e670c43"]
}, Open  ]],

Cell["The covariant divergence of the Einstein tensor is:", \
"Text",ExpressionUUID->"0ce3c5e3-97b6-4d87-91da-56efcc70b7cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Del]", "\[Mu]"], 
   SuperscriptBox["G", "\[Mu]\[Nu]"]}], "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["\[PartialD]", "\[Mu]"], 
     SuperscriptBox["G", "\[Mu]\[Nu]"]}], "+", 
    RowBox[{
     SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Mu]"], 
     SuperscriptBox["G", "\[Lambda]\[Nu]"]}], "+", 
    RowBox[{
     SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Nu]"], 
     SuperscriptBox["G", "\[Mu]\[Lambda]"]}]}], "=", 
   "0."}]}]], \
"DisplayFormula",ExpressionUUID->"87404f12-72d0-4179-a3dc-87f2bc8bca6a"],

Cell[TextData[{
 "Note that it involves a contraction in the index \[Mu], which becomes a \
trace in the first Christoffel symbol. This expression vanishes because of \
the ",
 StyleBox["Bianchi identity",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"435248e0-13ba-4fdc-ba04-178235b49ddb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["\[Del]", "\[Mu]"], 
     SuperscriptBox["R", "\[Mu]\[Nu]"]}], "-", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      SuperscriptBox["\[Del]", "\[Nu]"], "R"}]}]}], "   ", "\[Rule]", "   ", 
   RowBox[{
    SubscriptBox["\[Del]", "\[Mu]"], 
    SuperscriptBox["G", "\[Mu]\[Nu]"]}]}], "=", 
  "0."}]], "DisplayFormula",ExpressionUUID->"c4a450d1-0fd4-48c3-b368-\
98cf2f1c113a"],

Cell["To calculate it in OGRe, we simply write:", \
"Text",ExpressionUUID->"30dee90b-0e5e-4e65-9435-6902d01aff0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{
    RowBox[{"TCovariantD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
    RowBox[{"\"\<FLRWEinstein\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[164]:=",ExpressionUUID->"833a299c-1a67-4663-b451-1299b4aeee9f"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"Result\"", "\":\""},
       "RowDefault"]},
     {"\<\"No non-zero elements.\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"e0a412d0-a432-4937-af62-6faa91ffcde5"]
}, Open  ]],

Cell[TextData[{
 "Finally, for a non-trivial result, let us recall that the stress-energy \
tensor should be ",
 StyleBox["conserved",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"296da8a4-25b5-4c97-96d4-0abc71e82c98"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[Del]", "\[Mu]"], 
   SuperscriptBox["T", "\[Mu]\[Nu]"]}], "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["\[PartialD]", "\[Mu]"], 
     SuperscriptBox["T", "\[Mu]\[Nu]"]}], "+", 
    RowBox[{
     SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Mu]"], 
     SuperscriptBox["T", "\[Lambda]\[Nu]"]}], "+", 
    RowBox[{
     SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Lambda]", "\[Nu]"], 
     SuperscriptBox["T", "\[Mu]\[Lambda]"]}]}], "=", 
   "0."}]}]], \
"DisplayFormula",ExpressionUUID->"c7201184-a711-4334-bb91-cf4edd7b730f"],

Cell[TextData[{
 "This follows from the fact that ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SubscriptBox["\[Del]", "\[Mu]"], 
    SuperscriptBox["G", "\[Mu]\[Nu]"]}], "=", "0"}]], "InlineFormula",
  CellChangeTimes->{{3.8207050870978355`*^9, 3.820705167702216*^9}, {
   3.820705248569887*^9, 3.820705313137235*^9}, {3.820705479431218*^9, 
   3.820705490327186*^9}},ExpressionUUID->
  "964a43e4-e85c-417f-b274-9ef1e5b4cc3a"],
 ", combined with the ",
 StyleBox["Einstein equation",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"8006048d-b5fa-43b2-8167-6d6c7113ae7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["G", "\[Mu]\[Nu]"], "=", 
   SubscriptBox["\[Kappa]T", "\[Mu]\[Nu]"]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"df6e53d3-9aa6-4567-94cc-\
64fa09cac98b"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Kappa]", "=", "1"}], TraditionalForm]],ExpressionUUID->
  "3f432065-7f10-4950-812e-5227592f1a9d"],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Kappa]", "=", 
    RowBox[{"8", "\[Pi]"}]}], TraditionalForm]],ExpressionUUID->
  "b64bd6f2-7aac-4ec9-8011-7841f1590e8d"],
 " depending on your preferred units. However, unlike ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SubscriptBox["\[Del]", "\[Mu]"], 
    SuperscriptBox["G", "\[Mu]\[Nu]"]}], "=", "0"}]], "InlineFormula",
  CellChangeTimes->{{3.8207050870978355`*^9, 3.820705167702216*^9}, {
   3.820705248569887*^9, 3.820705313137235*^9}, {3.820705479431218*^9, 
   3.820705490327186*^9}},ExpressionUUID->
  "841914b7-e292-4755-b6dd-c65ee32556c3"],
 ", the relation ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    SubscriptBox["\[Del]", "\[Mu]"], 
    SuperscriptBox["T", "\[Mu]\[Nu]"]}], "=", "0"}]], "InlineFormula",
  CellChangeTimes->{{3.8207050870978355`*^9, 3.820705167702216*^9}, {
    3.820705248569887*^9, 3.820705313137235*^9}, {3.820705479431218*^9, 
    3.820705490327186*^9}, 3.8212158919595957`*^9, {3.8212160691702027`*^9, 
    3.8212160895915027`*^9}},ExpressionUUID->
  "1ae34b0a-eabb-470c-abf6-3de78c39ff1a"],
 " is ",
 StyleBox["not",
  FontWeight->"Bold"],
 " an identity; it is an ",
 StyleBox["energy-momentum conservation equation",
  FontWeight->"Bold"],
 ". To derive the equation for the FLRW metric, let us first define the \
rest-frame fluid 4-velocity in this spacetime:"
}], "Text",ExpressionUUID->"d0938382-6ce4-4c9e-9981-5ae21b029166"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"TShow", "@", 
   RowBox[{"TNewTensor", "[", 
    RowBox[{
    "\"\<RestVelocity\>\"", ",", "\"\<FLRW\>\"", ",", "\"\<Spherical\>\"", 
     ",", 
     RowBox[{"{", "1", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", "\"\<u\>\""}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"eadd7e5b-b40e-42fe-884a-1aec719a32e2"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"RestVelocity\"", "\":   \"", 
    TemplateBox[{"\"u\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\""}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
     SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       TagBox[
        GridBox[{{"1"}, {"0"}, {"0"}, {"0"}}, ColumnAlignments -> Center, 
         RowSpacings -> 1, ColumnAlignments -> Left], Column], "\[NoBreak]", 
       ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"71733c8a-1929-4d71-a3f0-a37e9edadbab"]
}, Open  ]],

Cell[TextData[{
 "Using the 4-velocity and the metric, we redefine the perfect fluid stress \
tensor in the FLRW spacetime using the formula ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["T", "\[Mu]\[Nu]"], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[Rho]", "+", "p"}], ")"}], 
      SuperscriptBox["u", "\[Mu]"], 
      SuperscriptBox["u", "\[Nu]"]}], "+", 
     SuperscriptBox["pg", "\[Mu]\[Nu]"]}]}], TraditionalForm]],ExpressionUUID->
  "180ff7b9-3fd1-4034-b381-25c248fd2632"],
 ", and give ",
 Cell[BoxData[
  FormBox["\[Rho]", TraditionalForm]],ExpressionUUID->
  "340d0bed-895a-4b39-a31d-fb92fe85f813"],
 " and ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "847daafd-fc4f-4179-aa6d-6f9a97eccb96"],
 " spacetime dependence:"
}], "Text",ExpressionUUID->"9f7a0a86-177a-4209-91d6-890b92f308b7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"TCalc", "[", 
   RowBox[{"\"\<PerfectFluidFLRW\>\"", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Rho]", "[", 
         RowBox[{"t", ",", "r", ",", "\[Theta]", ",", "\[Phi]"}], "]"}], "+", 
        RowBox[{"p", "[", 
         RowBox[{"t", ",", "r", ",", "\[Theta]", ",", "\[Phi]"}], "]"}]}], 
       ")"}], " ", 
      RowBox[{
       RowBox[{"\"\<RestVelocity\>\"", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
       RowBox[{"\"\<RestVelocity\>\"", "[", "\"\<\[Nu]\>\"", "]"}]}]}], "+", 
     RowBox[{
      RowBox[{"p", "[", 
       RowBox[{"t", ",", "r", ",", "\[Theta]", ",", "\[Phi]"}], "]"}], " ", 
      RowBox[{"\"\<FLRW\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]}], ",", 
    "\"\<T\>\""}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TChangeDefaultIndices", "[", 
   RowBox[{"\"\<PerfectFluidFLRW\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], "]"}], ";", 
  RowBox[{"TShow", "[", "\"\<PerfectFluidFLRW\>\"", "]"}]}]}], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"600dcb66-bb54-4dbc-bf47-4884784c9dba"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"PerfectFluidFLRW\"", "\":   \"", 
    TemplateBox[{"\"T\"", 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"], 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"]}, 
     "Subsuperscript", SyntaxForm -> SubsuperscriptBox], "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{"\[Rho]", "0", "0", "0"}, {"0", 
          FractionBox[
           RowBox[{"p", " ", 
             RowBox[{"(", 
               RowBox[{"1", "-", 
                 RowBox[{"k", " ", 
                   SuperscriptBox["r", "2"]}]}], ")"}]}], 
           SuperscriptBox["a", "2"]], "0", "0"}, {"0", "0", 
          FractionBox["p", 
           RowBox[{
             SuperscriptBox["a", "2"], " ", 
             SuperscriptBox["r", "2"]}]], "0"}, {"0", "0", "0", 
          FractionBox[
           RowBox[{"p", " ", 
             SuperscriptBox[
              RowBox[{"Csc", "[", "\[Theta]", "]"}], "2"]}], 
           RowBox[{
             SuperscriptBox["a", "2"], " ", 
             SuperscriptBox["r", "2"]}]]}}, RowSpacings -> 1, ColumnSpacings -> 1\
, RowAlignments -> Baseline, ColumnAlignments -> Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"657104bc-895c-4a49-9a49-c45bef524ca1"]
}, Open  ]],

Cell["\<\
Finally, we take the covariant derivative of the stress tensor:\
\>", "Text",ExpressionUUID->"d29065b5-195f-46c0-b04f-02bb326bed40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalc", "[", 
   RowBox[{"\"\<FLRWConservation\>\"", ",", 
    RowBox[{
     RowBox[{"TCovariantD", "[", "\"\<\[Mu]\>\"", "]"}], ".", 
     RowBox[{"\"\<PerfectFluidFLRW\>\"", "[", "\"\<\[Mu]\[Nu]\>\"", "]"}]}]}],
    "]"}]}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"31559cf6-516d-4edc-9cdf-9594ed88d061"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWConservation\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            RowBox[{"3", " ", 
             RowBox[{"(", 
              RowBox[{"p", "+", "\[Rho]"}], ")"}], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"], "+", 
           TemplateBox[{"Inactive", "\[Rho]", "t"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"r\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"k", " ", 
               SuperscriptBox["r", "2"]}]}], ")"}], " ", 
            TemplateBox[{"Inactive", "p", "r"},
             "InactiveD"]}], 
           SuperscriptBox["a", "2"]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           TemplateBox[{"Inactive", "p", "\[Theta]"},
            "InactiveD"], 
           RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"]}]]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"\[Phi]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{
            SuperscriptBox[
             RowBox[{"Csc", "[", "\[Theta]", "]"}], "2"], " ", 
            TemplateBox[{"Inactive", "p", "\[Phi]"},
             "InactiveD"]}], 
           RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"]}]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"26dc4ae4-2c52-4037-bb12-80e27fe206b7"]
}, Open  ]],

Cell[TextData[{
 "From demanding that the ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "35e22ff0-1eb9-4da3-b1bb-eb8953cd97ba"],
 " component vanishes, we get the following equation:"
}], "Text",ExpressionUUID->"d6f5cb40-6123-438f-abdd-f518a0d545c2"],

Cell[BoxData[
 RowBox[{
  OverscriptBox["\[Rho]", "."], "=", 
  RowBox[{
   RowBox[{"-", "3"}], 
   RowBox[{"(", 
    RowBox[{"\[Rho]", "+", "p"}], ")"}], 
   RowBox[{
    FractionBox[
     OverscriptBox["a", "."], "a"], 
    "."}]}]}]], \
"DisplayFormula",ExpressionUUID->"464907f7-e498-4a3f-aec8-768ab79ad1ac"],

Cell[TextData[{
 "We see that in an expanding universe, energy is not conserved, but rather, \
the energy density changes with time in a way that depends on the scale \
factor. If the universe is not expanding, that is, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "."], "=", "0"}], TraditionalForm]],ExpressionUUID->
  "c2d5cea5-9cd5-46f9-95f6-464a6032d098"],
 ", then energy will be conserved."
}], "Text",ExpressionUUID->"99f3e29a-aec9-4aef-b794-4310abc43cc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Overwriting metrics", \
"Subsection",ExpressionUUID->"9a0ac185-5a20-456b-a22f-d0612ea32535"],

Cell[TextData[{
 "If overwriting tensors has been allowed using ",
 StyleBox["TSetAllowOverwrite", "Input"],
 ", and we overwrite a metric tensor, then all of the curvature tensors \
calculated from the metric being overwritten will be automatically ",
 StyleBox["deleted",
  FontWeight->"Bold"],
 ", since the curvature tensors of the new metric will generally be \
different. For example, let us overwrite the FLRW metric with a similar \
metric where ",
 StyleBox["k",
  FontSlant->"Italic"],
 " is equal to 0:"
}], "Text",ExpressionUUID->"52c4dade-3d5d-4173-bfe6-d13beaa2f09c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"currentOverwrite", "=", 
   RowBox[{"TSetAllowOverwrite", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TSetAllowOverwrite", "[", "True", "]"}], ";"}], "\n", 
 RowBox[{"TShow", "@", 
  RowBox[{"TNewMetric", "[", 
   RowBox[{"\"\<FLRW\>\"", ",", "\"\<Spherical\>\"", ",", 
    RowBox[{"DiagonalMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       SuperscriptBox[
        RowBox[{"a", "[", "t", "]"}], "2"], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"a", "[", "t", "]"}], "2"], " ", 
        SuperscriptBox["r", "2"]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"a", "[", "t", "]"}], "2"], " ", 
        SuperscriptBox["r", "2"], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], "}"}], "]"}]}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"034ee530-9ebd-4dcb-82de-c66dfc029fc6"],

Cell[BoxData[
 TemplateBox[{
  "TSetAllowOverwrite", "Notify", 
   "\"Overwriting tensors turned \
\\!\\(\\*RowBox[{\\\"\\\\\\\"on\\\\\\\"\\\"}]\\).\"", 2, 170, 12, 
   27069071951462284006, "Local", "OGRe`TSetAllowOverwrite"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[169]:=",ExpressionUUID->"d7576201-62cb-49ab-a245-b588571d43e2"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "WarningOverwrite", 
   "\"Overwriting the tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"FLRW\\\\\\\"\\\"}]\\)\\\".\"", 2, 171, 13, 
   27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[169]:=",ExpressionUUID->"6a21af91-54a4-4975-8739-510b231aff96"],

Cell[BoxData[
 TemplateBox[{
  "TNewMetric", "WarningOverwrite", 
   "\"All curvature tensors previously calculated from the metric being \
overwritten will be deleted.\"", 2, 171, 14, 27069071951462284006, "Local", 
   "OGRe`TNewMetric"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[169]:=",ExpressionUUID->"d3101152-6945-4cf8-8de1-388c5d50504a"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"FLRW\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "r", "\[Theta]", "\[Phi]"}, 
     "RowWithSeparators"], "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"-", "1"}], "0", "0", "0"}, {"0", 
          SuperscriptBox["a", "2"], "0", "0"}, {"0", "0", 
          RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"]}], "0"}, {"0", "0", "0", 
          RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"], " ", 
            SuperscriptBox[
             RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}}, RowSpacings -> 
        1, ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"92fa874c-e793-4fe7-88c0-512d4c8205e3"]
}, Open  ]],

Cell[TextData[{
 "If we now try to access, for example, ",
 StyleBox["\[OpenCurlyDoubleQuote]FLRWChristoffel\[CloseCurlyDoubleQuote]", 
  "Input"],
 ", we will discover that it has been deleted:"
}], "Text",ExpressionUUID->"4a45900c-f799-4ff2-b9bb-468d33f17f08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", "\"\<FLRWChristoffel\>\"", "]"}]], "Input",
 CellLabel->
  "In[172]:=",ExpressionUUID->"af2c7825-7892-4977-8676-dbe97c5d170a"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "ErrorDoesNotExist", 
   "\"The tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"FLRWChristoffel\\\\\\\"\\\"}]\\)\\\" does \
not exist.\"", 2, 172, 15, 27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[172]:=",ExpressionUUID->"6394f031-7213-4f23-bfe2-e1d7e397d0d8"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->"Out[172]=",ExpressionUUID->"98d057e3-dabd-4e58-af8b-d86b243521e3"]
}, Open  ]],

Cell["\<\
We must recalculate this curvature tensor, and all others, since they will be \
different from the ones we calculated from the previous metric.\
\>", "Text",ExpressionUUID->"69b12500-a6fa-4570-92b5-0c341fcf6f45"],

Cell[TextData[{
 "Finally, let us reset ",
 StyleBox["TSetAllowOverwrite", "Input"],
 " back to its previous setting:"
}], "Text",ExpressionUUID->"166c52db-3ce6-429c-bc3c-d6868e310362"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetAllowOverwrite", "[", "currentOverwrite", "]"}]], "Input",
 CellLabel->
  "In[173]:=",ExpressionUUID->"78071d22-f0c3-4f98-8b87-952c3818c3dd"],

Cell[BoxData[
 TemplateBox[{
  "TSetAllowOverwrite", "Notify", 
   "\"Overwriting tensors turned \
\\!\\(\\*RowBox[{\\\"\\\\\\\"on\\\\\\\"\\\"}]\\).\"", 2, 173, 16, 
   27069071951462284006, "Local", "OGRe`TSetAllowOverwrite"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[173]:=",ExpressionUUID->"bd9c41b7-93c5-4285-9613-f0819df132ba"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Curves and geodesics", \
"Section",ExpressionUUID->"4f2afbe4-d479-48f3-b5c6-d632794021de"],

Cell[CellGroupData[{

Cell["The Curve Lagrangian", \
"Subsection",ExpressionUUID->"532e4363-f161-4c5a-8be8-8938909f6b71"],

Cell[TextData[{
 "Consider a ",
 StyleBox["curve",
  FontWeight->"Bold"],
 ", which is a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "\[Mu]"], "(", "\[Lambda]", ")"}], TraditionalForm]],
  ExpressionUUID->"bd8ef0f9-ee47-4531-88a7-5f24a6fc7f78"],
 " on the manifold where \[Lambda] is called the ",
 StyleBox["curve parameter",
  FontWeight->"Bold"],
 ". The ",
 StyleBox["curve Lagrangian",
  FontWeight->"Bold"],
 " of a metric is defined as the norm-squared of the tangent to the curve:"
}], "Text",ExpressionUUID->"19b4f165-006c-4991-963f-8cc8e5408744"],

Cell[BoxData[
 RowBox[{
  RowBox[{"L", "=", 
   RowBox[{
    SubscriptBox["g", "\[Mu]\[Nu]"], 
    SuperscriptBox[
     OverscriptBox["x", "."], "\[Mu]"], 
    SuperscriptBox[
     OverscriptBox["x", "."], "\[Nu]"]}]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"74b017fd-6f95-4a22-b2f0-\
e74b24a004a3"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    OverscriptBox["x", "."], "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "54d633f8-880e-45e0-b13a-2fdb4ef94176"],
 " is the first derivative of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "\[Mu]"], TraditionalForm]],ExpressionUUID->
  "b22df341-6ec7-406c-878a-00f3d4ffb494"],
 " with respect to the curve parameter (in Newton dot notation). We can \
calculate it using the module ",
 StyleBox["TCalcLagrangian", "Input"],
 ":"
}], "Text",
 InitializationCell->
  True,ExpressionUUID->"b9146d02-1af1-4bb0-ae1b-31fbb30307e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcLagrangian"}]], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"90ed3579-bd08-4649-a7c2-59aa1487f5b3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcLagrangian[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the curve Lagrangian of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\", defined as \
the norm-squared of the tangent to the curve, and stores the result in a new \
tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"Lagrangian\\\\\\\".\\\\nTaking the square \
root of (the absolute value of) the Lagrangian yields the integrand of the \
curve length functional. Varying the Lagrangian using the Euler-Lagrange \
equations yields the geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcLagrangian[\\\", Style[\\\"metricID\\\", Bold], \\\
\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] calculates the curve \
Lagrangian of the metric \\\", Style[\\\"metricID\\\", Bold], \\\", defined \
as the norm-squared of the tangent to the curve, and stores the result in a \
new tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Lagrangian\\\\\\\".\\\\nTaking the square root of (the absolute value of) \
the Lagrangian yields the integrand of the curve length functional. Varying \
the Lagrangian using the Euler-Lagrange equations yields the geodesic \
equations.\\\\nThe result will be given in terms of the coordinate symbols as \
functions of the curve parameter and their derivatives with respect to the \
curve parameter. The curve parameter can be selected using \
TSetCurveParameter[].\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \\\" \
is not specified, the default coordinate system of the metric will be used.\\\
\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCalcLagrangian", "[", 
                    RowBox[{"OGRe`Private`metricID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`coordSymbols", ",", 
                    RowBox[{"OGRe`Private`newID", "=", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Lagrangian\""}]}], ",", 
                    RowBox[{"OGRe`Private`parameter", "=", 
                    RowBox[{"Symbol", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}], "]"}]}], ",", 
                    "OGRe`Private`tangentComponents", ",", 
                    "OGRe`Private`tangentID", ",", 
                    "OGRe`Private`tempMetricComponents", ",", 
                    "OGRe`Private`tempMetricID", ",", 
                    "OGRe`Private`useCoords"}], "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"TCalcLagrangian", "::", "ErrorNotMetric"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`coordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tempMetricID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tempMetricComponents", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"#1", "[", "OGRe`Private`parameter", "]"}]}], 
                    "&"}], ")"}], "/@", "OGRe`Private`coordSymbols"}]}]}], 
                    ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tempMetricID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`tempMetricComponents"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Symbol\"", 
                    "]"}]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`tangentID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tangentComponents", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    SuperscriptBox[
                    "#1", "\[Prime]", MultilineFunction -> None], "[", 
                    "OGRe`Private`parameter", "]"}]}], "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbols"}]}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tangentID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", "OGRe`Private`tangentComponents"}], 
                    "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Symbol\"", "]"}],
                     "."]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    RowBox[{
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Mu]\"", "]"}],
                     ".", 
                    
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Mu]\"", 
                    "]"}]}], ",", "\"L\""}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`newID", ",", "\"Metric\"", ",", 
                    "OGRe`Private`metricID"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`newID", ",", "\"Role\"", ",", 
                    "\"Lagrangian\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcLagrangian\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcLagrangian[\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, \
False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, \
False]], \\\"] calculates the curve Lagrangian of the metric \\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\", defined as \
the norm-squared of the tangent to the curve, and stores the result in a new \
tensor object with ID \\\\\\\"\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\"Lagrangian\\\\\\\".\\\\nTaking the square \
root of (the absolute value of) the Lagrangian yields the integrand of the \
curve length functional. Varying the Lagrangian using the Euler-Lagrange \
equations yields the geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcLagrangian[\\\", Style[\\\"metricID\\\", Bold], \\\
\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] calculates the curve \
Lagrangian of the metric \\\", Style[\\\"metricID\\\", Bold], \\\", defined \
as the norm-squared of the tangent to the curve, and stores the result in a \
new tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"Lagrangian\\\\\\\".\\\\nTaking the square root of (the absolute value of) \
the Lagrangian yields the integrand of the curve length functional. Varying \
the Lagrangian using the Euler-Lagrange equations yields the geodesic \
equations.\\\\nThe result will be given in terms of the coordinate symbols as \
functions of the curve parameter and their derivatives with respect to the \
curve parameter. The curve parameter can be selected using \
TSetCurveParameter[].\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \\\" \
is not specified, the default coordinate system of the metric will be used.\\\
\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcLagrangian[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] calculates \
the curve Lagrangian of the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \", defined as the norm-squared of the tangent to \
the curve, and stores the result in a new tensor object with ID \\\"\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \
\"Lagrangian\\\".\\nTaking the square root of (the absolute value of) the \
Lagrangian yields the integrand of the curve length functional. Varying the \
Lagrangian using the Euler-Lagrange equations yields the geodesic \
equations.\\nThe result will be given in terms of the coordinate symbols as \
functions of the curve parameter and their derivatives with respect to the \
curve parameter. The curve parameter can be selected using \
TSetCurveParameter[].\\nIf \", StyleBox[\"coordinatesID\", Bold, \
Rule[StripOnInput, False]], \" is not specified, the default coordinate \
system of the metric will be used.\"}]], TextCell[Row[List[\"TCalcLagrangian[\
\", Style[\"metricID\", Bold], \", \", Style[\"coordinatesID\", Bold], \"] \
calculates the curve Lagrangian of the metric \", Style[\"metricID\", Bold], \
\", defined as the norm-squared of the tangent to the curve, and stores the \
result in a new tensor object with ID \\\"\", Style[\"metricID\", Bold], \
\"Lagrangian\\\".\\nTaking the square root of (the absolute value of) the \
Lagrangian yields the integrand of the curve length functional. Varying the \
Lagrangian using the Euler-Lagrange equations yields the geodesic \
equations.\\nThe result will be given in terms of the coordinate symbols as \
functions of the curve parameter and their derivatives with respect to the \
curve parameter. The curve parameter can be selected using \
TSetCurveParameter[].\\nIf \", Style[\"coordinatesID\", Bold], \" is not \
specified, the default coordinate system of the metric will be used.\"]]]]\)",
     "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcLagrangian, {OGRe`TCalcLagrangian[
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`coordSymbols, OGRe`Private`newID = 
          OGRe`Private`metricID <> "Lagrangian", OGRe`Private`parameter = 
          Symbol[
            OGRe`Private`TensorData[Options]["CurveParameter"]], 
          OGRe`Private`tangentComponents, OGRe`Private`tangentID, 
          OGRe`Private`tempMetricComponents, OGRe`Private`tempMetricID, 
          OGRe`Private`useCoords}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[
          OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= "Metric",
            Message[
             MessageName[OGRe`TCalcLagrangian, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
          OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; 
         OGRe`Private`coordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`useCoords][
           "Components"][{{1}, OGRe`Private`useCoords}]; 
         OGRe`Private`tempMetricID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tempMetricComponents = ReplaceAll[
            OGRe`Private`TensorData[OGRe`Private`metricID][
            "Components"][{{-1, -1}, OGRe`Private`useCoords}], 
            Map[# -> #[OGRe`Private`parameter]& , OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tempMetricID, <|
           "Components" -> <|{{-1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tempMetricComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {-1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["Symbol"]|>]; 
         OGRe`Private`tangentID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tangentComponents = 
          ReplaceAll[OGRe`Private`coordSymbols, 
            
            Map[# -> Derivative[1][#][OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tangentID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tangentComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OverDot[
              OGRe`Private`TensorData[OGRe`Private`useCoords]["Symbol"]]|>]; 
         OGRe`TCalc[OGRe`Private`newID, 
           Dot[
            OGRe`Private`tangentID["\[Mu]"], 
            OGRe`Private`tangentID["\[Mu]"]], "L"]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Metric", OGRe`Private`metricID]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Role", "Lagrangian"]; 
         Return[OGRe`Private`newID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcLagrangian"|>, False]]], "Output",
 CellLabel->"Out[174]=",ExpressionUUID->"ab402773-b1cf-49bd-8576-18b4628c0af1"]
}, Open  ]],

Cell["For example:", \
"Text",ExpressionUUID->"f0ecdd4c-b5b5-422c-94d7-6f6e81988d83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcLagrangian", "[", "\"\<Minkowski\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"11aa2c51-ba65-4672-bfe6-4ddfdff78d9a"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"MinkowskiLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"L\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox[
             OverscriptBox["t", "."], "2"]}], "+", 
           SuperscriptBox[
            OverscriptBox["x", "."], "2"], "+", 
           SuperscriptBox[
            OverscriptBox["y", "."], "2"], "+", 
           SuperscriptBox[
            OverscriptBox["z", "."], "2"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"a4455092-b9ee-4a30-b982-282987e6be17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcLagrangian", "[", "\"\<Schwarzschild\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[176]:=",ExpressionUUID->"ed9250f6-ba65-4d01-9d0a-06ecb69ba780"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"L\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            SuperscriptBox[
             OverscriptBox["r", "."], "2"], 
            RowBox[{"1", "-", 
             FractionBox[
              RowBox[{"2", " ", "M"}], "r"]}]], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              FractionBox[
               RowBox[{"2", " ", "M"}], "r"]}], ")"}], " ", 
            SuperscriptBox[
             OverscriptBox["t", "."], "2"]}], "+", 
           RowBox[{
            SuperscriptBox["r", "2"], " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["\[Theta]", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["\[Phi]", "."], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"6c0229fe-7312-4132-aaa3-c636de47f147"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcLagrangian", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[177]:=",ExpressionUUID->"b2309b8e-99c3-4884-9b9a-20ec623459c9"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"L\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            SuperscriptBox[
             OverscriptBox["t", "."], "2"]}], "+", 
           RowBox[{
            SuperscriptBox["a", "2"], " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["r", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox["r", "2"], " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox[
                  OverscriptBox["\[Theta]", "."], "2"], "+", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["\[Phi]", "."], "2"], " ", 
                  SuperscriptBox[
                   RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}],
              ")"}]}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"47f5a66c-b625-469b-b4fc-c7c310b7a865"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcLagrangian", "[", "\"\<Alcubierre\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[178]:=",ExpressionUUID->"8090ef5e-4e83-4d4f-9b4b-a08c3c936d23"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"AlcubierreLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"L\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{
               SuperscriptBox["f", "2"], " ", 
               SuperscriptBox["v", "2"]}]}], ")"}], " ", 
            SuperscriptBox[
             OverscriptBox["t", "."], "2"]}], "+", 
           SuperscriptBox[
            OverscriptBox["x", "."], "2"], "+", 
           SuperscriptBox[
            OverscriptBox["y", "."], "2"], "-", 
           RowBox[{"2", " ", "f", " ", "v", " ", 
            OverscriptBox["t", "."], " ", 
            OverscriptBox["z", "."]}], "+", 
           SuperscriptBox[
            OverscriptBox["z", "."], "2"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"389f2f0c-cf42-4ab5-bfa6-46f4b14432eb"]
}, Open  ]],

Cell[TextData[{
 "Notice how ",
 StyleBox["TList", "Input"],
 " (and ",
 StyleBox["TShow", "Input"],
 ") use Newton dot notation for the derivatives of the coordinate functions, \
for improved readability. To get the full expressions with the explicit \
derivatives, we can use ",
 StyleBox["TGetComponents", "Input"],
 ". For example:"
}], "Text",ExpressionUUID->"cf627211-d50a-4287-a311-6ac25fdc9b02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", "\"\<MinkowskiLagrangian\>\"", "]"}]], "Input",
 CellLabel->
  "In[179]:=",ExpressionUUID->"5bbca9e9-4d50-41dc-9368-106bc536b5d0"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 179, 17, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[179]:=",ExpressionUUID->"5e85ed69-1f6e-4b90-b972-b78b71e9d453"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["t", "\[Prime]",
       MultilineFunction->None], "[", "\[Lambda]", "]"}], "2"]}], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["x", "\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}], "2"], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}], "2"], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["z", "\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}], "2"]}], 
  "}"}]], "Output",
 CellLabel->"Out[179]=",ExpressionUUID->"dab21d92-87b0-4296-b156-a6e4b3e08eed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Geodesic equations from the Lagrangian", \
"Subsection",ExpressionUUID->"99b8af94-aef9-4e9f-a49c-6c04ac5ae5af"],

Cell["\<\
By applying the Euler-Lagrange equations to the curve Lagrangian:\
\>", "Text",ExpressionUUID->"bb723bba-b61b-4e2c-8464-991328f23b70"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["d", "d\[Lambda]"], 
     RowBox[{"(", 
      FractionBox[
       RowBox[{"\[PartialD]", "L"}], 
       RowBox[{"\[PartialD]", 
        SuperscriptBox[
         OverscriptBox["x", "."], "\[Mu]"]}]], ")"}]}], "-", 
    FractionBox[
     RowBox[{"\[PartialD]", "L"}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox["x", "\[Mu]"]}]]}], "=", "0"}], 
  ","}]], "DisplayFormula",ExpressionUUID->"67e92c17-1943-4580-a0c5-\
0401763f330f"],

Cell[TextData[{
 "we can obtain the geodesic equations for our spacetime. This is done using \
the module ",
 StyleBox["TCalcGeodesicFromLagrangian", "Input"],
 ":"
}], "Text",ExpressionUUID->"972eec81-5214-443b-a4dd-0c4ee0e24289"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcGeodesicFromLagrangian"}]], "Input",
 CellLabel->
  "In[180]:=",ExpressionUUID->"61cadb05-43e9-4f33-a0c9-6a90c06275cf"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicFromLagrangian[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the curve Lagrangian of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromLagrangian\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nDerivatives with respect to \
the curve parameter in the Euler-Lagrange equation will be left unevaluated \
using Inactive[], which can sometimes help solve the geodesic equations by \
inspection. Use Activate[] to evaluate the derivatives.\\\\nThe result will \
be given in terms of the coordinate symbols as functions of the curve \
parameter and their derivatives with respect to the curve parameter. The \
curve parameter can be selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcGeodesicFromLagrangian[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] calculates the geodesic equations obtained for each of the \
coordinates in \\\", Style[\\\"coordinatesID\\\", Bold], \\\" using the curve \
Lagrangian of the metric \\\", Style[\\\"metricID\\\", Bold], \\\" and stores \
the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"GeodesicFromLagrangian\\\\\\\". Equating \
the components to zero will yield the full system of geodesic \
equations.\\\\nDerivatives with respect to the curve parameter in the \
Euler-Lagrange equation will be left unevaluated using Inactive[], which can \
sometimes help solve the geodesic equations by inspection. Use Activate[] to \
evaluate the derivatives.\\\\nThe result will be given in terms of the \
coordinate symbols as functions of the curve parameter and their derivatives \
with respect to the curve parameter. The curve parameter can be selected \
using TSetCurveParameter[].\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\" is not specified, the default coordinate system of the metric will be \
used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCalcGeodesicFromLagrangian", "[", 
                    RowBox[{"OGRe`Private`metricID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", ",", 
                    "OGRe`Private`EulerLagrangeComponents", ",", 
                    "OGRe`Private`LagrangianComponents", ",", 
                    RowBox[{"OGRe`Private`newID", "=", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"GeodesicFromLagrangian\""}]}], ",", 
                    RowBox[{"OGRe`Private`parameter", "=", 
                    RowBox[{"Symbol", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}], "]"}]}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TCalcGeodesicFromLagrangian", "::", 
                    "ErrorNotMetric"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Lagrangian\""}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"TCalcLagrangian", "[", 
                    
                    RowBox[{"OGRe`Private`metricID", ",", 
                    "OGRe`Private`useCoords"}], "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`LagrangianComponents", "=", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`metricID", "<>", "\"Lagrangian\""}],
                     ",", 
                    RowBox[{"{", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "]"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}]}], ";", 
                    RowBox[{"OGRe`Private`coordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`EulerLagrangeComponents", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`n", 
                    "\[RightDoubleBracket]"}], "[", "OGRe`Private`parameter", 
                    "]"}]}]], "OGRe`Private`LagrangianComponents"}], "-", 
                    TemplateBox[{"Inactive", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox["\[PartialD]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", "OGRe`Private`n", 
                    "\[RightDoubleBracket]"}], "\[Prime]", MultilineFunction -> 
                    None], "[", "OGRe`Private`parameter", "]"}]}]], 
                    "OGRe`Private`LagrangianComponents"}], ")"}], 
                    "OGRe`Private`parameter"}, "InactiveD"]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`n", ",", "1", ",", 
                    
                    RowBox[{"Length", "[", "OGRe`Private`coordSymbols", 
                    "]"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", 
                    
                    RowBox[{"OGRe`Private`TensorSimplify", "[", 
                    "OGRe`Private`EulerLagrangeComponents", "]"}]}], "]"}]}], 
                    ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`metricID"}], ",", 
                    
                    RowBox[{"\"Role\"", "\[Rule]", 
                    "\"GeodesicFromLagrangian\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", "\"0\""}]}], "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcGeodesicFromLagrangian\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicFromLagrangian[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the curve Lagrangian of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromLagrangian\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nDerivatives with respect to \
the curve parameter in the Euler-Lagrange equation will be left unevaluated \
using Inactive[], which can sometimes help solve the geodesic equations by \
inspection. Use Activate[] to evaluate the derivatives.\\\\nThe result will \
be given in terms of the coordinate symbols as functions of the curve \
parameter and their derivatives with respect to the curve parameter. The \
curve parameter can be selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcGeodesicFromLagrangian[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] calculates the geodesic equations obtained for each of the \
coordinates in \\\", Style[\\\"coordinatesID\\\", Bold], \\\" using the curve \
Lagrangian of the metric \\\", Style[\\\"metricID\\\", Bold], \\\" and stores \
the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"GeodesicFromLagrangian\\\\\\\". Equating \
the components to zero will yield the full system of geodesic \
equations.\\\\nDerivatives with respect to the curve parameter in the \
Euler-Lagrange equation will be left unevaluated using Inactive[], which can \
sometimes help solve the geodesic equations by inspection. Use Activate[] to \
evaluate the derivatives.\\\\nThe result will be given in terms of the \
coordinate symbols as functions of the curve parameter and their derivatives \
with respect to the curve parameter. The curve parameter can be selected \
using TSetCurveParameter[].\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \
\\\" is not specified, the default coordinate system of the metric will be \
used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcGeodesicFromLagrangian[\", \
StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] calculates \
the geodesic equations obtained for each of the coordinates in \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" using the \
curve Lagrangian of the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new rank-1 tensor \
object with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \"GeodesicFromLagrangian\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\nDerivatives with respect to \
the curve parameter in the Euler-Lagrange equation will be left unevaluated \
using Inactive[], which can sometimes help solve the geodesic equations by \
inspection. Use Activate[] to evaluate the derivatives.\\nThe result will be \
given in terms of the coordinate symbols as functions of the curve parameter \
and their derivatives with respect to the curve parameter. The curve \
parameter can be selected using TSetCurveParameter[].\\nIf \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" is not \
specified, the default coordinate system of the metric will be used.\"}]], \
TextCell[Row[List[\"TCalcGeodesicFromLagrangian[\", Style[\"metricID\", \
Bold], \", \", Style[\"coordinatesID\", Bold], \"] calculates the geodesic \
equations obtained for each of the coordinates in \", \
Style[\"coordinatesID\", Bold], \" using the curve Lagrangian of the metric \
\", Style[\"metricID\", Bold], \" and stores the result in a new rank-1 \
tensor object with ID \\\"\", Style[\"metricID\", Bold], \
\"GeodesicFromLagrangian\\\". Equating the components to zero will yield the \
full system of geodesic equations.\\nDerivatives with respect to the curve \
parameter in the Euler-Lagrange equation will be left unevaluated using \
Inactive[], which can sometimes help solve the geodesic equations by \
inspection. Use Activate[] to evaluate the derivatives.\\nThe result will be \
given in terms of the coordinate symbols as functions of the curve parameter \
and their derivatives with respect to the curve parameter. The curve \
parameter can be selected using TSetCurveParameter[].\\nIf \", \
Style[\"coordinatesID\", Bold], \" is not specified, the default coordinate \
system of the metric will be used.\"]]]]\)", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcGeodesicFromLagrangian, {
      OGRe`TCalcGeodesicFromLagrangian[
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`coordSymbols, 
          OGRe`Private`EulerLagrangeComponents, 
          OGRe`Private`LagrangianComponents, OGRe`Private`newID = 
          OGRe`Private`metricID <> "GeodesicFromLagrangian", 
          OGRe`Private`parameter = Symbol[
            OGRe`Private`TensorData[Options]["CurveParameter"]], 
          OGRe`Private`useCoords}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[OGRe`TCalcGeodesicFromLagrangian, "ErrorNotMetric"]]; 
           Abort[]; Null]; 
         If[OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "Lagrangian"]], 
           OGRe`TCalcLagrangian[
            OGRe`Private`metricID, OGRe`Private`useCoords]; Null]; 
         OGRe`Private`LagrangianComponents = Part[
             OGRe`Private`AddRepresentation[
             OGRe`Private`metricID <> "Lagrangian", {}, 
              OGRe`Private`useCoords], 1]/2; 
         OGRe`Private`coordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`useCoords][
           "Components"][{{1}, OGRe`Private`useCoords}]; 
         OGRe`Private`EulerLagrangeComponents = 
          Table[D[OGRe`Private`LagrangianComponents, 
              Part[OGRe`Private`coordSymbols, OGRe`Private`n][
              OGRe`Private`parameter]] - Inactive[D][
             D[OGRe`Private`LagrangianComponents, 
              Derivative[1][
               Part[OGRe`Private`coordSymbols, OGRe`Private`n]][
              OGRe`Private`parameter]], OGRe`Private`parameter], {
            OGRe`Private`n, 1, 
             Length[OGRe`Private`coordSymbols]}]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`newID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`TensorSimplify[
               OGRe`Private`EulerLagrangeComponents]|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`metricID, "Role" -> "GeodesicFromLagrangian", 
            "Symbol" -> "0"|>]; Return[OGRe`Private`newID]; Null]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "OGRe`TCalcGeodesicFromLagrangian"|>, False]]], "Output",
 CellLabel->"Out[180]=",ExpressionUUID->"4d92bbf6-9aad-48ec-90d2-f6e5f0dd80c0"]
}, Open  ]],

Cell["In the Minkowski metric, the geodesic equations are:", \
"Text",ExpressionUUID->"0538af8e-6930-4de5-9e71-b47afdd21da4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromLagrangian", "[", "\"\<Minkowski\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[181]:=",ExpressionUUID->"09912a02-7771-49a9-9d8c-b1211916c4ee"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"MinkowskiGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{"-", 
                 OverscriptBox["t", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             OverscriptBox["x", "."], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             OverscriptBox["y", "."], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             OverscriptBox["z", "."], "\[Lambda]"},
            "InactiveD"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"65a9d238-e418-45c5-8f1b-e1ecab3ae2cd"]
}, Open  ]],

Cell[TextData[{
 "Note that this module only calculates the left-hand side of the \
Euler-Lagrange equations; if we equate the result to zero, we will get the \
actual geodesics equations. This is hinted at visually by setting the \
resulting tensor\[CloseCurlyQuote]s symbol to 0, so that you actually see the \
equations when using ",
 StyleBox["TList", "Input"],
 ". It is trivial to see that the solution to these equations is simply a \
curve with a constant velocity; in a flat Minkowski spacetime, particles \
experience no gravitational force, and thus no acceleration (unless some \
other force acts on them, of course)."
}], "Text",ExpressionUUID->"326ce8ad-d596-4d78-8dbf-398a54f9be63"],

Cell[TextData[{
 "The derivatives with respect to the curve parameter \[Lambda] are kept \
unevaluated, using the Mathematica function ",
 StyleBox["Inactive", "Input"],
 ". This simplifies the equations, and can sometimes help solve them by \
inspection. If we want to activate the derivatives, we simply need to use ",
 StyleBox["Activate", "Input"],
 ". Recall that ",
 StyleBox["TList", "Input"],
 " and ",
 StyleBox["TShow", "Input"],
 " can apply a function to the tensor\[CloseCurlyQuote]s components before \
displaying them, so we just need to pass ",
 StyleBox["Activate", "Input"],
 " as the last argument:"
}], "Text",ExpressionUUID->"1c652e23-d605-495d-82b3-a8ce536db29a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<MinkowskiGeodesicFromLagrangian\>\"", ",", "Activate"}], 
  "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"49b5a5f6-3a06-46b8-aa9a-e02f857cfef2"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"MinkowskiGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          OverscriptBox["t", "\[DoubleDot]"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           OverscriptBox["x", "\[DoubleDot]"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           OverscriptBox["y", "\[DoubleDot]"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           OverscriptBox["z", "\[DoubleDot]"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"78202f23-97e7-407a-8c26-1ebc4af4e2ee"]
}, Open  ]],

Cell["Now the derivatives have been activated.", \
"Text",ExpressionUUID->"206b32eb-9aa4-42f8-9457-6d68f687764a"],

Cell[TextData[{
 "As with the Lagrangian itself, the geodesic equations are displayed in \
compact notation when using ",
 StyleBox["TList", "Input"],
 ". If we want the full expressions with the explicit derivatives, for \
example in order to pass them to ",
 StyleBox["DSolve", "Input"],
 " and actually solve the equations, we can use ",
 StyleBox["TGetComponents", "Input"],
 ":"
}], "Text",ExpressionUUID->"78cb5d86-a8a6-4744-8fb8-406fab778a0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", "\"\<MinkowskiGeodesicFromLagrangian\>\"", 
  "]"}]], "Input",
 CellLabel->
  "In[183]:=",ExpressionUUID->"018c2114-a41d-4d08-9abb-aef3ff61da4a"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {1} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 183, 18, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[183]:=",ExpressionUUID->"68d9f366-9ca5-4afc-9b51-dfa997ab52c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    TemplateBox[{"Inactive", 
      RowBox[{"(", 
        RowBox[{"-", 
          RowBox[{
            SuperscriptBox["t", "\[Prime]", MultilineFunction -> None], "[", 
            "\[Lambda]", "]"}]}], ")"}], "\[Lambda]"},
     "InactiveD"]}], ",", 
   RowBox[{"-", 
    TemplateBox[{"Inactive", 
      RowBox[{
        SuperscriptBox["x", "\[Prime]", MultilineFunction -> None], "[", 
        "\[Lambda]", "]"}], "\[Lambda]"},
     "InactiveD"]}], ",", 
   RowBox[{"-", 
    TemplateBox[{"Inactive", 
      RowBox[{
        SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], "[", 
        "\[Lambda]", "]"}], "\[Lambda]"},
     "InactiveD"]}], ",", 
   RowBox[{"-", 
    TemplateBox[{"Inactive", 
      RowBox[{
        SuperscriptBox["z", "\[Prime]", MultilineFunction -> None], "[", 
        "\[Lambda]", "]"}], "\[Lambda]"},
     "InactiveD"]}]}], "}"}]], "Output",
 CellLabel->"Out[183]=",ExpressionUUID->"f50d3537-0e7b-4bdb-904d-955f36fde522"]
}, Open  ]],

Cell[TextData[{
 "Again, if we wish the activate the derivatives, we need to use ",
 StyleBox["Activate", "Input"],
 ":"
}], "Text",ExpressionUUID->"8b8772b5-35fb-4ce2-b5f2-a57eb02c2062"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", 
  RowBox[{"\"\<MinkowskiGeodesicFromLagrangian\>\"", ",", "Activate"}], 
  "]"}]], "Input",
 CellLabel->
  "In[184]:=",ExpressionUUID->"49b92c04-0f0b-4c52-882f-680508017ba8"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {1} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 184, 19, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[184]:=",ExpressionUUID->"48d7ffb7-0389-4c25-b59e-e4b89b953609"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["t", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "\[Lambda]", "]"}], ",", 
   RowBox[{"-", 
    RowBox[{
     SuperscriptBox["x", "\[Prime]\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{
     SuperscriptBox["y", "\[Prime]\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}]}], ",", 
   RowBox[{"-", 
    RowBox[{
     SuperscriptBox["z", "\[Prime]\[Prime]",
      MultilineFunction->None], "[", "\[Lambda]", "]"}]}]}], "}"}]], "Output",
 CellLabel->"Out[184]=",ExpressionUUID->"0c658181-bb7b-4cf1-b2ed-093af955e931"]
}, Open  ]],

Cell["\<\
We can similarly find the geodesic equations of other metrics:\
\>", "Text",ExpressionUUID->"3a395992-7039-4d1a-9604-dd4ad3b6dbeb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromLagrangian", "[", "\"\<Schwarzschild\>\"", 
   "]"}]}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"88a38f4c-e309-48af-88ba-88e30afd7f9f"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    FractionBox[
                    RowBox[{"2", " ", "M"}], "r"]}], ")"}], " ", 
                 OverscriptBox["t", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"r\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"-", 
            FractionBox[
             RowBox[{"M", " ", 
              SuperscriptBox[
               OverscriptBox["r", "."], "2"]}], 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}], "2"]]}], 
           "-", 
           FractionBox[
            RowBox[{"M", " ", 
             SuperscriptBox[
              OverscriptBox["t", "."], "2"]}], 
            SuperscriptBox["r", "2"]], "+", 
           RowBox[{"r", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["\[Theta]", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["\[Phi]", "."], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}], "-", 
           TemplateBox[{"Inactive", 
             FractionBox[
              OverscriptBox["r", "."], 
              RowBox[{"1", "-", 
                FractionBox[
                 RowBox[{"2", " ", "M"}], "r"]}]], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{
            SuperscriptBox["r", "2"], " ", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            SuperscriptBox[
             OverscriptBox["\[Phi]", "."], "2"], " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 SuperscriptBox["r", "2"], " ", 
                 OverscriptBox["\[Theta]", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"\[Phi]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 SuperscriptBox["r", "2"], " ", 
                 OverscriptBox["\[Phi]", "."], " ", 
                 SuperscriptBox[
                  RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], ")"}], 
             "\[Lambda]"},
            "InactiveD"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"a143083b-2ede-47fe-a75e-815bcbd25d9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromLagrangian", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"b6096ef2-6c05-4088-993e-e2efa40d10cf"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["r", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox["r", "2"], " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox[
                  OverscriptBox["\[Theta]", "."], "2"], "+", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["\[Phi]", "."], "2"], " ", 
                  SuperscriptBox[
                   RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}],
              ")"}], " ", 
            TemplateBox[{"Inactive", "a", "t"},
             "InactiveD"]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{"-", 
                 OverscriptBox["t", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"r\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{
            SuperscriptBox["a", "2"], " ", "r", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["\[Theta]", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["\[Phi]", "."], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 SuperscriptBox["a", "2"], " ", 
                 OverscriptBox["r", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{
            SuperscriptBox["a", "2"], " ", 
            SuperscriptBox["r", "2"], " ", 
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            SuperscriptBox[
             OverscriptBox["\[Phi]", "."], "2"], " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 SuperscriptBox["a", "2"], " ", 
                 SuperscriptBox["r", "2"], " ", 
                 OverscriptBox["\[Theta]", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"\[Phi]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 SuperscriptBox["a", "2"], " ", 
                 SuperscriptBox["r", "2"], " ", 
                 OverscriptBox["\[Phi]", "."], " ", 
                 SuperscriptBox[
                  RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], ")"}], 
             "\[Lambda]"},
            "InactiveD"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"4300ad10-5939-4ae4-8677-b11607ede4f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromLagrangian", "[", "\"\<Alcubierre\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"d0b0386b-686a-4b1b-b787-7a1201a5aad5"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"AlcubierreGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", " ", "v", " ", 
               OverscriptBox["t", "."]}], "-", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"v", " ", 
               TemplateBox[{"Inactive", "f", "t"},
                "InactiveD"]}], "+", 
              RowBox[{"f", " ", 
               TemplateBox[{"Inactive", "v", "t"},
                "InactiveD"]}]}], ")"}]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{
                    SuperscriptBox["f", "2"], " ", 
                    SuperscriptBox["v", "2"]}]}], ")"}], " ", 
                   OverscriptBox["t", "."]}], "-", 
                 RowBox[{"f", " ", "v", " ", 
                   OverscriptBox["z", "."]}]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", " ", "v", " ", 
               OverscriptBox["t", "."]}], "-", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            TemplateBox[{"Inactive", "f", "x"},
             "InactiveD"]}], "-", 
           TemplateBox[{"Inactive", 
             OverscriptBox["x", "."], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", " ", "v", " ", 
               OverscriptBox["t", "."]}], "-", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            TemplateBox[{"Inactive", "f", "y"},
             "InactiveD"]}], "-", 
           TemplateBox[{"Inactive", 
             OverscriptBox["y", "."], "\[Lambda]"},
            "InactiveD"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", " ", "v", " ", 
               OverscriptBox["t", "."]}], "-", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            TemplateBox[{"Inactive", "f", "z"},
             "InactiveD"]}], "-", 
           TemplateBox[{"Inactive", 
             RowBox[{"(", 
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "f"}], " ", "v", " ", 
                   OverscriptBox["t", "."]}], "+", 
                 OverscriptBox["z", "."]}], ")"}], "\[Lambda]"},
            "InactiveD"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"4d767209-5695-46d0-9616-2e8bf963c8d7"]
}, Open  ]],

Cell["\<\
The last example, the geodesics equations of the Alcubierre metric, is a good \
example of how we can solve the geodesic equations by inspection. Indeed, it \
is easy to see that\
\>", "Text",ExpressionUUID->"45eb9cf2-4698-4b49-afc1-86795459febe"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   OverscriptBox["x", "."], "\[Mu]"], "=", 
  RowBox[{"(", 
   RowBox[{"1", ",", "0", ",", "0", ",", "vf"}], 
   ")"}]}]], \
"DisplayFormula",ExpressionUUID->"7a3c6796-62f0-4693-9ebc-9eb03e2d2d58"],

Cell[TextData[{
 "is a solution to this system of equations, since then we have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["x", "."], "=", 
    RowBox[{
     OverscriptBox["y", "."], "=", "0"}]}], TraditionalForm]],ExpressionUUID->
  "68c1e062-0fa7-44a6-920a-6f765fdfd581"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"f", " ", "v", " ", 
       OverscriptBox["t", "."]}], "-", 
      OverscriptBox["z", "."]}], ")"}], "=", "0"}], TraditionalForm]],
  ExpressionUUID->"40edb439-2892-4a99-b78f-0c4155821cb9"],
 ", and both terms in each equation vanish (the last term in the first \
equation will reduce to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Lambda]"], 
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "47288793-ccdd-4d10-ba1b-67fc324885da"],
 ", which is of course zero). We can check this solution by replacing the \
coordinate functions with their solutions; since we will be left with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Lambda]"], 
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "077753f9-bcfd-4052-8238-cffe777a4b92"],
 " in the first equation, we must also activate the derivative:"
}], "Text",ExpressionUUID->"cec9ba5b-cbfc-4f84-8b00-e7505245141b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "[", 
  RowBox[{"\"\<AlcubierreGeodesicFromLagrangian\>\"", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Activate", "@", 
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"t", "'"}], "[", "\[Lambda]", "]"}], "->", "1"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "'"}], "[", "\[Lambda]", "]"}], "->", "0"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"y", "'"}], "[", "\[Lambda]", "]"}], "->", "0"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"z", "'"}], "[", "\[Lambda]", "]"}], "->", 
           RowBox[{
            RowBox[{"v", "[", 
             RowBox[{"t", "[", "\[Lambda]", "]"}], "]"}], 
            RowBox[{"f", "[", 
             RowBox[{
              RowBox[{"t", "[", "\[Lambda]", "]"}], ",", 
              RowBox[{"x", "[", "\[Lambda]", "]"}], ",", 
              RowBox[{"y", "[", "\[Lambda]", "]"}], ",", 
              RowBox[{"z", "[", "\[Lambda]", "]"}]}], "]"}]}]}]}], "}"}]}], 
       "]"}]}], ")"}], "&"}]}], "]"}]], "Input",
 CellLabel->
  "In[188]:=",ExpressionUUID->"a7748c17-d514-4429-b41f-4cf1e1be8886"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"AlcubierreGeodesicFromLagrangian\"", "\":\""},
       "RowDefault"]},
     {"\<\"No non-zero elements.\"\>"}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"2f2cee12-fa8a-412f-9526-76ef89fb1826"]
}, Open  ]],

Cell[TextData[{
 "Notice how we had to write the coordinates explicitly as ",
 StyleBox["functions of the curve parameter",
  FontWeight->"Bold"],
 ", even when they are arguments of a function; for example, ",
 StyleBox["v[t]", "Input"],
 " became ",
 StyleBox["v[t[\[Lambda]]]", "Input"],
 ". This solution indicates that we are traveling with velocity ",
 StyleBox["v",
  FontSlant->"Italic"],
 " in the ",
 StyleBox["z",
  FontSlant->"Italic"],
 " direction; the warp bubble (inside which, as you recall, ",
 StyleBox["f",
  FontSlant->"Italic"],
 " = 1) moves whatever is inside it, such as a spaceship, through space at \
the velocity ",
 StyleBox["v",
  FontSlant->"Italic"],
 ", but there is no limit on ",
 StyleBox["v",
  FontSlant->"Italic"],
 " - it can even be faster than light!"
}], "Text",ExpressionUUID->"8ec9be7f-e100-48fc-954d-7d9241a56caf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Geodesic equations from the Christoffel symbols", \
"Subsection",ExpressionUUID->"586dd822-08e0-4cbe-a3b1-af3fe75f2966"],

Cell["\<\
Another way of obtaining the geodesic equations is using the covariant \
derivative, and thus the Christoffel symbols:\
\>", "Text",ExpressionUUID->"21ffb748-c023-4e9b-9679-805469ee6872"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox[
    OverscriptBox["x", "."], "\[Rho]"], 
   RowBox[{
    SubscriptBox["\[Del]", "\[Rho]"], 
    SuperscriptBox[
     OverscriptBox["x", "."], "\[Sigma]"]}]}], "=", 
  RowBox[{
   RowBox[{
    RowBox[{"0", "   ", "\[DoubleLongRightArrow]", "   ", 
     SuperscriptBox[
      OverscriptBox["x", "\[DoubleDot]"], "\[Sigma]"]}], "+", 
    RowBox[{
     SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Nu]", "\[Sigma]"], 
     SuperscriptBox[
      OverscriptBox["x", "."], "\[Mu]"], 
     SuperscriptBox[
      OverscriptBox["x", "."], "\[Nu]"]}]}], "=", "0."}]}]], "DisplayFormula",
 InitializationCell->
  True,ExpressionUUID->"fe1a17de-5ece-4294-a341-bc507f14799b"],

Cell[TextData[{
 "In OGRe, we can calculate the left-hand side of this equation using ",
 StyleBox["TCalcGeodesicFromChristoffel", "Input"],
 ":"
}], "Text",ExpressionUUID->"3d346991-071b-4563-a290-1ec986d0027a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcGeodesicFromChristoffel"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"9e700924-d079-4c22-8575-a43a44388a34"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicFromChristoffel[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the Christoffel symbols of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcGeodesicFromChristoffel[\\\", Style[\\\"metricID\\\
\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] calculates \
the geodesic equations obtained for each of the coordinates in \\\", Style[\\\
\"coordinatesID\\\", Bold], \\\" using the Christoffel symbols of the metric \
\\\", Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new \
rank-1 tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" is not specified, the default \
coordinate system of the metric will be used.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCalcGeodesicFromChristoffel", "[", 
                    RowBox[{"OGRe`Private`metricID_String", ",", 
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`accelComponents", ",", 
                    "OGRe`Private`accelID", ",", 
                    "OGRe`Private`christComponents", ",", 
                    "OGRe`Private`christID", ",", "OGRe`Private`coordSymbols",
                     ",", 
                    RowBox[{"OGRe`Private`newID", "=", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"GeodesicFromChristoffel\""}]}], ",", 
                    RowBox[{"OGRe`Private`parameter", "=", 
                    RowBox[{"Symbol", "[", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}], "]"}]}], ",", 
                    "OGRe`Private`tangentComponents", ",", 
                    "OGRe`Private`tangentID", ",", 
                    "OGRe`Private`tempMetricComponents", ",", 
                    "OGRe`Private`tempMetricID", ",", 
                    "OGRe`Private`useCoords"}], "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TCalcGeodesicFromChristoffel", "::", 
                    "ErrorNotMetric"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcChristoffel", "[", "OGRe`Private`metricID", 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`coordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tempMetricID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tempMetricComponents", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"#1", "[", "OGRe`Private`parameter", "]"}]}], 
                    "&"}], ")"}], "/@", "OGRe`Private`coordSymbols"}]}]}], 
                    ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tempMetricID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`tempMetricComponents"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Symbol\"", 
                    "]"}]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`tangentID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tangentComponents", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    SuperscriptBox[
                    "#1", "\[Prime]", MultilineFunction -> None], "[", 
                    "OGRe`Private`parameter", "]"}]}], "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbols"}]}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tangentID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", "OGRe`Private`tangentComponents"}], 
                    "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Symbol\"", "]"}],
                     "."]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`accelID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`accelComponents", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    SuperscriptBox[
                    "#1", "\[Prime]\[Prime]", MultilineFunction -> None], "[",
                     "OGRe`Private`parameter", "]"}]}], "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbols"}]}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`accelID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", "OGRe`Private`accelComponents"}], 
                    "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Symbol\"", "]"}],
                     "\"\[DoubleDot]\""]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`christID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`christComponents", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], "]"}], "[", "\"Components\"", "]"}], 
                    "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"#1", "[", "OGRe`Private`parameter", "]"}]}], 
                    "&"}], ")"}], "/@", "OGRe`Private`coordSymbols"}]}]}], 
                    ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`christID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`christComponents"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Christoffel\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "\"\[CapitalGamma]\""}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`accelID", "[", "\"\[Sigma]\"", 
                    "]"}], "+", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`christID", "[", 
                    "\"\[Sigma]\[Mu]\[Nu]\"", "]"}], ".", 
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Mu]\"", "]"}],
                     ".", 
                    
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Nu]\"", 
                    "]"}]}]}], ",", "\"0\""}], "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`RemoveTensorID", "[", 
                    "OGRe`Private`christID", "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`newID", ",", "\"Metric\"", ",", 
                    "OGRe`Private`metricID"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    RowBox[{"OGRe`Private`newID", ",", "\"Role\"", ",", 
                    "\"GeodesicFromChristoffel\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcGeodesicFromChristoffel\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicFromChristoffel[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the Christoffel symbols of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" is not \
specified, the default coordinate system of the metric will be used.\\\"}]], \
TextCell[Row[List[\\\"TCalcGeodesicFromChristoffel[\\\", Style[\\\"metricID\\\
\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", Bold], \\\"] calculates \
the geodesic equations obtained for each of the coordinates in \\\", Style[\\\
\"coordinatesID\\\", Bold], \\\" using the Christoffel symbols of the metric \
\\\", Style[\\\"metricID\\\", Bold], \\\" and stores the result in a new \
rank-1 tensor object with ID \\\\\\\"\\\", Style[\\\"metricID\\\", Bold], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\\\nIf \\\", \
Style[\\\"coordinatesID\\\", Bold], \\\" is not specified, the default \
coordinate system of the metric will be used.\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcGeodesicFromChristoffel[\",\
 StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] calculates \
the geodesic equations obtained for each of the coordinates in \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" using the \
Christoffel symbols of the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new rank-1 tensor \
object with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \"GeodesicFromChristoffel\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\nThe result will be given in \
terms of the coordinate symbols as functions of the curve parameter and their \
derivatives with respect to the curve parameter. The curve parameter can be \
selected using TSetCurveParameter[].\\nIf \", StyleBox[\"coordinatesID\", \
Bold, Rule[StripOnInput, False]], \" is not specified, the default coordinate \
system of the metric will be used.\"}]], \
TextCell[Row[List[\"TCalcGeodesicFromChristoffel[\", Style[\"metricID\", \
Bold], \", \", Style[\"coordinatesID\", Bold], \"] calculates the geodesic \
equations obtained for each of the coordinates in \", \
Style[\"coordinatesID\", Bold], \" using the Christoffel symbols of the \
metric \", Style[\"metricID\", Bold], \" and stores the result in a new \
rank-1 tensor object with ID \\\"\", Style[\"metricID\", Bold], \
\"GeodesicFromChristoffel\\\". Equating the components to zero will yield the \
full system of geodesic equations.\\nThe result will be given in terms of the \
coordinate symbols as functions of the curve parameter and their derivatives \
with respect to the curve parameter. The curve parameter can be selected \
using TSetCurveParameter[].\\nIf \", Style[\"coordinatesID\", Bold], \" is \
not specified, the default coordinate system of the metric will be \
used.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcGeodesicFromChristoffel, {
      OGRe`TCalcGeodesicFromChristoffel[
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`accelComponents, OGRe`Private`accelID, 
          OGRe`Private`christComponents, OGRe`Private`christID, 
          OGRe`Private`coordSymbols, OGRe`Private`newID = 
          OGRe`Private`metricID <> "GeodesicFromChristoffel", 
          OGRe`Private`parameter = Symbol[
            OGRe`Private`TensorData[Options]["CurveParameter"]], 
          OGRe`Private`tangentComponents, OGRe`Private`tangentID, 
          OGRe`Private`tempMetricComponents, OGRe`Private`tempMetricID, 
          OGRe`Private`useCoords}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[
             OGRe`TCalcGeodesicFromChristoffel, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
          OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "Christoffel"]],
            OGRe`TCalcChristoffel[OGRe`Private`metricID]; Null]; 
         OGRe`Private`AddRepresentation[
          OGRe`Private`metricID <> "Christoffel", {1, -1, -1}, 
           OGRe`Private`useCoords]; 
         OGRe`Private`coordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`useCoords][
           "Components"][{{1}, OGRe`Private`useCoords}]; 
         OGRe`Private`tempMetricID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tempMetricComponents = ReplaceAll[
            OGRe`Private`TensorData[OGRe`Private`metricID][
            "Components"][{{-1, -1}, OGRe`Private`useCoords}], 
            Map[# -> #[OGRe`Private`parameter]& , OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tempMetricID, <|
           "Components" -> <|{{-1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tempMetricComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {-1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["Symbol"]|>]; 
         OGRe`Private`tangentID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tangentComponents = 
          ReplaceAll[OGRe`Private`coordSymbols, 
            
            Map[# -> Derivative[1][#][OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tangentID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tangentComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OverDot[
              OGRe`Private`TensorData[OGRe`Private`useCoords]["Symbol"]]|>]; 
         OGRe`Private`accelID = OGRe`Private`NewTempID[]; 
         OGRe`Private`accelComponents = ReplaceAll[OGRe`Private`coordSymbols, 
            
            Map[# -> Derivative[2][#][OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`accelID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`accelComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            Overscript[
              OGRe`Private`TensorData[OGRe`Private`useCoords]["Symbol"], 
              "\[DoubleDot]"]|>]; 
         OGRe`Private`christID = OGRe`Private`NewTempID[]; 
         OGRe`Private`christComponents = ReplaceAll[
            OGRe`Private`TensorData[OGRe`Private`metricID <> "Christoffel"][
            "Components"][{{1, -1, -1}, OGRe`Private`useCoords}], 
            Map[# -> #[OGRe`Private`parameter]& , OGRe`Private`coordSymbols]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`christID, <|
           "Components" -> <|{{1, -1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`christComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1, -1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Christoffel", "Symbol" -> 
            "\[CapitalGamma]"|>]; 
         OGRe`TCalc[OGRe`Private`newID, OGRe`Private`accelID["\[Sigma]"] + Dot[
             OGRe`Private`christID["\[Sigma]\[Mu]\[Nu]"], 
             OGRe`Private`tangentID["\[Mu]"], 
             OGRe`Private`tangentID["\[Nu]"]], "0"]; 
         OGRe`Private`RemoveTensorID[OGRe`Private`christID]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Metric", OGRe`Private`metricID]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Role", "GeodesicFromChristoffel"]; 
         Return[OGRe`Private`newID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcGeodesicFromChristoffel"|>, False]]], "Output",
 CellLabel->"Out[189]=",ExpressionUUID->"d85d786d-1f2a-4263-bda3-388eff06c8ce"]
}, Open  ]],

Cell["For example:", \
"Text",ExpressionUUID->"488e64f6-01f9-493e-a5f6-0967d1700c91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromChristoffel", "[", "\"\<Minkowski\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[190]:=",ExpressionUUID->"eba717a5-0733-4f79-a575-a9757ee997be"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"MinkowskiGeodesicFromChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          OverscriptBox["t", "\[DoubleDot]"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          OverscriptBox["x", "\[DoubleDot]"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          OverscriptBox["y", "\[DoubleDot]"]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          OverscriptBox["z", "\[DoubleDot]"]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"306a626a-1d19-4572-8116-fe3d480b9f79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromChristoffel", "[", "\"\<Schwarzschild\>\"", 
   "]"}]}]], "Input",
 CellLabel->
  "In[191]:=",ExpressionUUID->"ade3d1e1-0fa1-4cfa-9751-c64f43736911"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildGeodesicFromChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", "M", " ", 
             OverscriptBox["r", "."], " ", 
             OverscriptBox["t", "."]}], 
            RowBox[{"r", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}]}]], "+", 
           OverscriptBox["t", "\[DoubleDot]"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"r\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            RowBox[{"M", " ", 
             SuperscriptBox[
              OverscriptBox["r", "."], "2"]}], 
            RowBox[{
             RowBox[{"2", " ", "M", " ", "r"}], "-", 
             SuperscriptBox["r", "2"]}]], "+", 
           FractionBox[
            RowBox[{"M", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "2"}], " ", "M"}], "+", "r"}], ")"}], " ", 
             SuperscriptBox[
              OverscriptBox["t", "."], "2"]}], 
            SuperscriptBox["r", "3"]], "+", 
           OverscriptBox["r", "\[DoubleDot]"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "M"}], "-", "r"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["\[Theta]", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["\[Phi]", "."], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", 
             OverscriptBox["r", "."], " ", 
             OverscriptBox["\[Theta]", "."]}], "r"], "+", 
           OverscriptBox["\[Theta]", "\[DoubleDot]"], "-", 
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            SuperscriptBox[
             OverscriptBox["\[Phi]", "."], "2"], " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"\[Phi]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           FractionBox[
            RowBox[{"2", " ", 
             RowBox[{"(", 
              RowBox[{
               OverscriptBox["r", "."], "+", 
               RowBox[{"r", " ", 
                RowBox[{"Cot", "[", "\[Theta]", "]"}], " ", 
                OverscriptBox["\[Theta]", "."]}]}], ")"}], " ", 
             OverscriptBox["\[Phi]", "."]}], "r"], "+", 
           OverscriptBox["\[Phi]", "\[DoubleDot]"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"11e4eaec-0d2a-45ca-9fa3-5a5503d6b0e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromChristoffel", "[", "\"\<FLRW\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[192]:=",ExpressionUUID->"0deb67a6-796b-49b6-8589-c8866838ed5e"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWGeodesicFromChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["t", "\[DoubleDot]"], "+", 
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["r", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox["r", "2"], " ", 
               RowBox[{"(", 
                RowBox[{
                 SuperscriptBox[
                  OverscriptBox["\[Theta]", "."], "2"], "+", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["\[Phi]", "."], "2"], " ", 
                  SuperscriptBox[
                   RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}]}],
              ")"}], " ", 
            TemplateBox[{"Inactive", "a", "t"},
             "InactiveD"]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"r\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"r\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["r", "\[DoubleDot]"], "-", 
           RowBox[{"r", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["\[Theta]", "."], "2"], "+", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["\[Phi]", "."], "2"], " ", 
               SuperscriptBox[
                RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}], ")"}]}], "+", 
           FractionBox[
            RowBox[{"2", " ", 
             OverscriptBox["r", "."], " ", 
             OverscriptBox["t", "."], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Theta]\"", ShowContents -> False, StripOnInput -> 
                 False]}, "RowDefault"], 
              TemplateBox[{"\"\[Theta]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["\[Theta]", "\[DoubleDot]"], "-", 
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
            SuperscriptBox[
             OverscriptBox["\[Phi]", "."], "2"], " ", 
            RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "+", 
           RowBox[{"2", " ", 
            OverscriptBox["\[Theta]", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               OverscriptBox["r", "."], "r"], "+", 
              FractionBox[
               RowBox[{
                OverscriptBox["t", "."], " ", 
                TemplateBox[{"Inactive", "a", "t"},
                 "InactiveD"]}], "a"]}], ")"}]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"\[Phi]\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"\[Phi]\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["\[Phi]", "\[DoubleDot]"], "+", 
           RowBox[{"2", " ", 
            OverscriptBox["\[Phi]", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              FractionBox[
               OverscriptBox["r", "."], "r"], "+", 
              RowBox[{
               RowBox[{"Cot", "[", "\[Theta]", "]"}], " ", 
               OverscriptBox["\[Theta]", "."]}], "+", 
              FractionBox[
               RowBox[{
                OverscriptBox["t", "."], " ", 
                TemplateBox[{"Inactive", "a", "t"},
                 "InactiveD"]}], "a"]}], ")"}]}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"dfc670f4-f707-4fec-9f92-20d5f530cba3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcGeodesicFromChristoffel", "[", "\"\<Alcubierre\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[193]:=",ExpressionUUID->"3afbdb0b-8c0f-4104-8eb4-54ab57014f77"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"AlcubierreGeodesicFromChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["t", "\[DoubleDot]"], "+", 
           RowBox[{"v", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f", " ", "v", " ", 
               OverscriptBox["t", "."]}], "-", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                OverscriptBox["x", "."]}], " ", 
               TemplateBox[{"Inactive", "f", "x"},
                "InactiveD"]}], "-", 
              RowBox[{
               OverscriptBox["y", "."], " ", 
               TemplateBox[{"Inactive", "f", "y"},
                "InactiveD"]}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"f", " ", "v", " ", 
                  OverscriptBox["t", "."]}], "-", 
                 OverscriptBox["z", "."]}], ")"}], " ", 
               TemplateBox[{"Inactive", "f", "z"},
                "InactiveD"]}]}], ")"}]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["x", "\[DoubleDot]"], "+", 
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "f"}], " ", "v", " ", 
               OverscriptBox["t", "."]}], "+", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            TemplateBox[{"Inactive", "f", "x"},
             "InactiveD"]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["y", "\[DoubleDot]"], "+", 
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "f"}], " ", "v", " ", 
               OverscriptBox["t", "."]}], "+", 
              OverscriptBox["z", "."]}], ")"}], " ", 
            TemplateBox[{"Inactive", "f", "y"},
             "InactiveD"]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["z", "\[DoubleDot]"], "-", 
           RowBox[{"v", " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               OverscriptBox["t", "."], " ", 
               TemplateBox[{"Inactive", "f", "t"},
                "InactiveD"]}], "+", 
              RowBox[{
               OverscriptBox["x", "."], " ", 
               TemplateBox[{"Inactive", "f", "x"},
                "InactiveD"]}], "+", 
              RowBox[{
               OverscriptBox["y", "."], " ", 
               TemplateBox[{"Inactive", "f", "y"},
                "InactiveD"]}]}], ")"}]}], "+", 
           RowBox[{
            SuperscriptBox["f", "3"], " ", 
            SuperscriptBox["v", "4"], " ", 
            SuperscriptBox[
             OverscriptBox["t", "."], "2"], " ", 
            TemplateBox[{"Inactive", "f", "z"},
             "InactiveD"]}], "-", 
           RowBox[{
            SuperscriptBox["f", "2"], " ", 
            SuperscriptBox["v", "3"], " ", 
            OverscriptBox["t", "."], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               OverscriptBox["x", "."], " ", 
               TemplateBox[{"Inactive", "f", "x"},
                "InactiveD"]}], "+", 
              RowBox[{
               OverscriptBox["y", "."], " ", 
               TemplateBox[{"Inactive", "f", "y"},
                "InactiveD"]}], "+", 
              RowBox[{"2", " ", 
               OverscriptBox["z", "."], " ", 
               TemplateBox[{"Inactive", "f", "z"},
                "InactiveD"]}]}], ")"}]}], "+", 
           RowBox[{"f", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               SuperscriptBox["v", "2"], " ", 
               OverscriptBox["z", "."], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  OverscriptBox["x", "."], " ", 
                  TemplateBox[{"Inactive", "f", "x"},
                   "InactiveD"]}], "+", 
                 RowBox[{
                  OverscriptBox["y", "."], " ", 
                  TemplateBox[{"Inactive", "f", "y"},
                   "InactiveD"]}], "+", 
                 RowBox[{
                  OverscriptBox["z", "."], " ", 
                  TemplateBox[{"Inactive", "f", "z"},
                   "InactiveD"]}]}], ")"}]}], "-", 
              RowBox[{
               SuperscriptBox[
                OverscriptBox["t", "."], "2"], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["v", "2"], " ", 
                  TemplateBox[{"Inactive", "f", "z"},
                   "InactiveD"]}], "+", 
                 TemplateBox[{"Inactive", "v", "t"},
                  "InactiveD"]}], ")"}]}]}], ")"}]}]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"7843ba92-d68a-4413-b9f7-9556e7471614"]
}, Open  ]],

Cell[TextData[{
 "Often, you will find that the Lagrangian method produces simpler equations, \
which can even be solved by inspection, as we did for the Alcubierre metric. \
This is due to the possibility of leaving the \[Lambda] derivative \
unevaluated. However, in other cases, the Christoffel method might produce \
simpler equations. The best thing to do is to try both methods and see which \
one produces simpler or nicer results for the specific metric in question. \
Note that the system of equations obtained using ",
 StyleBox["TCalcGeodesicFromLagrangian", "Input"],
 " will often be different from the one obtained using ",
 StyleBox["TCalcGeodesicFromChristoffel", "Input"],
 ", but both systems will always have the same solutions."
}], "Text",ExpressionUUID->"97c125ff-4f17-4ee4-9b23-bba9cb717b96"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing the curve parameter", \
"Subsection",ExpressionUUID->"2705af72-3268-40f8-b2db-6c60f97d63bc"],

Cell[TextData[{
 "By default, the curve parameter is \[Lambda]. However, sometimes we want to \
use another parameter - for example \[Tau], the proper time. To change the \
parameter, we use ",
 StyleBox["TSetCurveParameter", "Input"],
 ":"
}], "Text",ExpressionUUID->"803edea4-b257-46ae-97da-5bc74e8cba06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetCurveParameter"}]], "Input",
 CellLabel->
  "In[194]:=",ExpressionUUID->"71d72dc1-b44b-4365-bd5f-f9e2c3a1d81e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetCurveParameter[] shows the curve parameter used for calculating \
Lagrangians and geodesics.\\\\nTSetCurveParameter[\\\", \
StyleBox[\\\"parameter\\\", Bold, Rule[StripOnInput, False]], \\\"] changes \
the curve parameter. The new parameter will be cleared and protected, and the \
old parameter will be unprotected. Any tensors currently using the old \
parameter will be modified to use the new parameter. \\\", \
StyleBox[\\\"parameter\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
given either as a symbol name or a string representing a symbol \
name.\\\\nTSetCurveParameter[Automatic] resets the curve parameter to the \
default: \\\\[Lambda].\\\"}]], TextCell[Row[List[\\\"TSetCurveParameter[] \
shows the curve parameter used for calculating Lagrangians and \
geodesics.\\\\nTSetCurveParameter[\\\", Style[\\\"parameter\\\", Bold], \\\"] \
changes the curve parameter. The new parameter will be cleared and protected, \
and the old parameter will be unprotected. Any tensors currently using the \
old parameter will be modified to use the new parameter. \\\", \
Style[\\\"parameter\\\", Bold], \\\" can be given either as a symbol name or \
a string representing a symbol name.\\\\nTSetCurveParameter[Automatic] resets \
the curve parameter to the default: \\\\[Lambda].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetCurveParameter", "[", "]"}], ":=", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}], ",", 
                    RowBox[{"\"Global`\"", "\[Rule]", "\"\""}]}], "]"}]}]}, {
                   " "}, {
                    RowBox[{
                    RowBox[{"TSetCurveParameter", "[", "Automatic", "]"}], 
                    ":=", 
                    RowBox[{"TSetCurveParameter", "[", 
                    
                    RowBox[{
                    "Evaluate", "[", "OGRe`Private`DefaultCurveParameter", 
                    "]"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetCurveParameter", "[", 
                    "OGRe`Private`newParameter_String", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"OGRe`Private`oldParameter", "=", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Unprotect", "[", 
                    
                    RowBox[{"Evaluate", "[", "OGRe`Private`oldParameter", 
                    "]"}], "]"}], ";", 
                    RowBox[{"Unprotect", "[", 
                    
                    RowBox[{"Evaluate", "[", "OGRe`Private`newParameter", 
                    "]"}], "]"}], ";", 
                    RowBox[{"ClearAll", "[", 
                    
                    RowBox[{"Evaluate", "[", "OGRe`Private`newParameter", 
                    "]"}], "]"}], ";", 
                    RowBox[{"Protect", "[", 
                    
                    RowBox[{"Evaluate", "[", "OGRe`Private`newParameter", 
                    "]"}], "]"}], ";", 
                    
                    RowBox[{"Unprotect", "[", "OGRe`Private`TensorData", 
                    "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"CurveParameter\"", "]"}], "=", 
                    RowBox[{"\"Global`\"", "<>", 
                    RowBox[{"StringReplace", "[", 
                    RowBox[{"OGRe`Private`newParameter", ",", 
                    RowBox[{"\"Global`\"", "\[Rule]", "\"\""}]}], "]"}]}]}], 
                    ";", 
                    RowBox[{"Scan", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`ReplaceCurveParameter", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"Symbol", "[", "OGRe`Private`oldParameter", "]"}],
                     ",", 
                    
                    RowBox[{"Symbol", "[", "OGRe`Private`newParameter", 
                    "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Keys", "[", "OGRe`Private`TensorData", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newParameter", "]"}],
                     ";"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "TSetCurveParameter", "[", 
                    "OGRe`Private`parameter_Symbol", "]"}], ":=", 
                    RowBox[{"TSetCurveParameter", "[", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"ToString", "[", 
                    
                    RowBox[{"Unevaluated", "[", "OGRe`Private`parameter", 
                    "]"}], "]"}], "]"}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"HoldAll", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetCurveParameter\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetCurveParameter[] shows the curve parameter used for calculating \
Lagrangians and geodesics.\\\\nTSetCurveParameter[\\\", \
StyleBox[\\\"parameter\\\", Bold, Rule[StripOnInput, False]], \\\"] changes \
the curve parameter. The new parameter will be cleared and protected, and the \
old parameter will be unprotected. Any tensors currently using the old \
parameter will be modified to use the new parameter. \\\", \
StyleBox[\\\"parameter\\\", Bold, Rule[StripOnInput, False]], \\\" can be \
given either as a symbol name or a string representing a symbol \
name.\\\\nTSetCurveParameter[Automatic] resets the curve parameter to the \
default: \\\\[Lambda].\\\"}]], TextCell[Row[List[\\\"TSetCurveParameter[] \
shows the curve parameter used for calculating Lagrangians and \
geodesics.\\\\nTSetCurveParameter[\\\", Style[\\\"parameter\\\", Bold], \\\"] \
changes the curve parameter. The new parameter will be cleared and protected, \
and the old parameter will be unprotected. Any tensors currently using the \
old parameter will be modified to use the new parameter. \\\", \
Style[\\\"parameter\\\", Bold], \\\" can be given either as a symbol name or \
a string representing a symbol name.\\\\nTSetCurveParameter[Automatic] resets \
the curve parameter to the default: \\\\[Lambda].\\\"]]]]\\)\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetCurveParameter[] shows the \
curve parameter used for calculating Lagrangians and \
geodesics.\\nTSetCurveParameter[\", StyleBox[\"parameter\", Bold, \
Rule[StripOnInput, False]], \"] changes the curve parameter. The new \
parameter will be cleared and protected, and the old parameter will be \
unprotected. Any tensors currently using the old parameter will be modified \
to use the new parameter. \", StyleBox[\"parameter\", Bold, \
Rule[StripOnInput, False]], \" can be given either as a symbol name or a \
string representing a symbol name.\\nTSetCurveParameter[Automatic] resets the \
curve parameter to the default: \\[Lambda].\"}]], \
TextCell[Row[List[\"TSetCurveParameter[] shows the curve parameter used for \
calculating Lagrangians and geodesics.\\nTSetCurveParameter[\", \
Style[\"parameter\", Bold], \"] changes the curve parameter. The new \
parameter will be cleared and protected, and the old parameter will be \
unprotected. Any tensors currently using the old parameter will be modified \
to use the new parameter. \", Style[\"parameter\", Bold], \" can be given \
either as a symbol name or a string representing a symbol \
name.\\nTSetCurveParameter[Automatic] resets the curve parameter to the \
default: \\[Lambda].\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetCurveParameter, {
      OGRe`TSetCurveParameter[] :> StringReplace[
         OGRe`Private`TensorData[Options]["CurveParameter"], "Global`" -> ""],
        OGRe`TSetCurveParameter[Automatic] :> OGRe`TSetCurveParameter[
         Evaluate[OGRe`Private`DefaultCurveParameter]], 
       OGRe`TSetCurveParameter[
         Pattern[OGRe`Private`newParameter, 
          Blank[String]]] :> 
       Module[{OGRe`Private`oldParameter = 
          OGRe`Private`TensorData[Options]["CurveParameter"]}, Unprotect[
           Evaluate[OGRe`Private`oldParameter]]; Unprotect[
           Evaluate[OGRe`Private`newParameter]]; ClearAll[
           Evaluate[OGRe`Private`newParameter]]; Protect[
           Evaluate[OGRe`Private`newParameter]]; 
         Unprotect[OGRe`Private`TensorData]; 
         OGRe`Private`TensorData[Options]["CurveParameter"] = 
          "Global`" <> 
           StringReplace[OGRe`Private`newParameter, "Global`" -> ""]; 
         Scan[OGRe`Private`ReplaceCurveParameter[#, 
            Symbol[OGRe`Private`oldParameter], 
            Symbol[OGRe`Private`newParameter]]& , 
           Keys[OGRe`Private`TensorData]]; Protect[OGRe`Private`TensorData]; 
         Return[OGRe`Private`newParameter]; Null], OGRe`TSetCurveParameter[
         Pattern[OGRe`Private`parameter, 
          Blank[Symbol]]] :> OGRe`TSetCurveParameter[
         Evaluate[
          ToString[
           Unevaluated[OGRe`Private`parameter]]]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {HoldAll, Protected}, "FullName" -> 
    "OGRe`TSetCurveParameter"|>, False]]], "Output",
 CellLabel->"Out[194]=",ExpressionUUID->"8cb812b9-cb37-49bf-9817-9d9028fce377"]
}, Open  ]],

Cell["Let us change it to \[Tau]:", \
"Text",ExpressionUUID->"bc4fd2c0-28a2-48f7-84a1-e4377b420f65"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TSetCurveParameter", "[", "\[Tau]", "]"}], ";"}]], "Input",
 CellLabel->
  "In[195]:=",ExpressionUUID->"90f14d98-a10e-4c74-97b4-0748467d7d35"],

Cell[TextData[{
 "This changes the curve parameter ",
 StyleBox["retroactively",
  FontWeight->"Bold"],
 ", so that if we get the components of any Lagrangian or geodesic equation \
we previously calculated, the parameter will now be \[Tau] instead of \
\[Lambda]:"
}], "Text",ExpressionUUID->"461190f7-a966-4b7f-a2f8-a5cca381e91b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TGetComponents", "[", "\"\<MinkowskiLagrangian\>\"", "]"}]], "Input",
 CellLabel->
  "In[196]:=",ExpressionUUID->"41ab361c-7906-4241-9e1a-aa09028fc308"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 196, 20, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[196]:=",ExpressionUUID->"68556542-8237-41e5-897b-4ea08ae2f245"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["t", "\[Prime]",
       MultilineFunction->None], "[", "\[Tau]", "]"}], "2"]}], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["x", "\[Prime]",
      MultilineFunction->None], "[", "\[Tau]", "]"}], "2"], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "\[Tau]", "]"}], "2"], "+", 
   SuperscriptBox[
    RowBox[{
     SuperscriptBox["z", "\[Prime]",
      MultilineFunction->None], "[", "\[Tau]", "]"}], "2"]}], "}"}]], "Output",
 CellLabel->"Out[196]=",ExpressionUUID->"8331fcd1-bc4e-443d-b33a-de84fdbf1af7"]
}, Open  ]],

Cell[TextData[{
 "When exporting tensors using ",
 StyleBox["TExportAll", "Input"],
 ", the choice of curve parameter is exported as well, so that when you \
import the tensors later using ",
 StyleBox["TImportAll", "Input"],
 ", OGRe will automatically know which curve parameter was used when \
calculating the imported tensors."
}], "Text",ExpressionUUID->"c97c76fd-d75c-4500-adbd-ebff83c0c4a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Geodesics equations in terms of the time coordinate", \
"Subsection",ExpressionUUID->"f1632bbe-b8c1-4f84-8b4a-dca9007e3afc"],

Cell["\<\
If the metric is a spacetime metric, it is often convenient to obtain the \
geodesic equations in terms of the time parameter, instead of an affine curve \
parameter. It can be shown that the geodesic equations in terms of the time \
coordinate are given by\
\>", "Text",ExpressionUUID->"0fdb76dd-246d-41e5-95b1-d4cf00264528"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["d", "2"], 
      SuperscriptBox["x", "\[Sigma]"]}], 
     SuperscriptBox["dt", "2"]], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Nu]", "\[Sigma]"], "-", 
       RowBox[{
        SubsuperscriptBox["\[CapitalGamma]", "\[Mu]\[Nu]", "0"], 
        FractionBox[
         SuperscriptBox["dx", "\[Sigma]"], "dt"]}]}], ")"}], 
     FractionBox[
      SuperscriptBox["dx", "\[Mu]"], "dt"], 
     FractionBox[
      SuperscriptBox["dx", "\[Nu]"], "dt"]}]}], "=", "0"}], 
  ","}]], "DisplayFormula",
 InitializationCell->
  True,ExpressionUUID->"b1156430-bffd-4ea8-bc29-d209f8478bcf"],

Cell[TextData[{
 "where we are assuming the time coordinate is t and it is the first \
coordinate. These equations can be obtained using ",
 StyleBox["TCalcGeodesicWithTimeParameter", "Input"],
 ":"
}], "Text",ExpressionUUID->"7afe9ac7-ffa4-4eb5-a5f7-7ddbd3911ccd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcGeodesicWithTimeParameter"}]], "Input",
 CellLabel->
  "In[197]:=",ExpressionUUID->"f16f0cbe-7661-4dfe-b51a-a823ac04d2c8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicWithTimeParameter[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the Christoffel symbols of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the spatial coordinate symbols as functions of the time coordinate \
and their derivatives with respect to time. The first coordinate of \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" will \
be assumed to be the time coordinate, even if its symbol is not t.\\\\nIf \
\\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" \
is not specified, the default coordinate system of the metric will be used.\\\
\"}]], TextCell[Row[List[\\\"TCalcGeodesicWithTimeParameter[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] calculates the geodesic equations obtained for each of the \
coordinates in \\\", Style[\\\"coordinatesID\\\", Bold], \\\" using the \
Christoffel symbols of the metric \\\", Style[\\\"metricID\\\", Bold], \\\" \
and stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"GeodesicFromChristoffel\\\\\\\". Equating \
the components to zero will yield the full system of geodesic \
equations.\\\\nThe result will be given in terms of the spatial coordinate \
symbols as functions of the time coordinate and their derivatives with \
respect to time. The first coordinate of \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" will be assumed to be the time coordinate, even if its symbol is \
not t.\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \\\" is not \
specified, the default coordinate system of the metric will be \
used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCalcGeodesicWithTimeParameter", "[", 
                    RowBox[{"OGRe`Private`metricID_String", ",", 
                    
                    RowBox[{
                    "OGRe`Private`coordinatesID_String", ":", 
                    "\"_UseDefault_\""}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`accelComponents", ",", 
                    "OGRe`Private`accelID", ",", 
                    "OGRe`Private`christComponents", ",", 
                    "OGRe`Private`christID", ",", 
                    "OGRe`Private`christWith0Components", ",", 
                    "OGRe`Private`christWith0ID", ",", 
                    "OGRe`Private`coordSymbols", ",", 
                    "OGRe`Private`coordSymbolsWithoutTime", ",", 
                    RowBox[{"OGRe`Private`newID", "=", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"GeodesicWithTimeParameter\""}]}], ",", 
                    "OGRe`Private`parameter", ",", 
                    "OGRe`Private`tangentComponents", ",", 
                    "OGRe`Private`tangentID", ",", 
                    "OGRe`Private`tempMetricComponents", ",", 
                    "OGRe`Private`tempMetricID", ",", 
                    "OGRe`Private`useCoords"}], "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`metricID", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Role\"", "]"}], 
                    "=!=", "\"Metric\""}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    
                    RowBox[{"TCalcGeodesicWithTimeParameter", "::", 
                    "ErrorNotMetric"}], "MessageName"], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`coordinatesID", "===", 
                    "\"_UseDefault_\""}], ",", 
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"DefaultCoords\"", 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`CheckIfCoordinates", "[", 
                    "OGRe`Private`coordinatesID", "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`useCoords", "=", 
                    "OGRe`Private`coordinatesID"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"KeyExistsQ", "[", 
                    RowBox[{"OGRe`Private`TensorData", ",", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}]}], "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"TCalcChristoffel", "[", "OGRe`Private`metricID", 
                    "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`AddRepresentation", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`coordSymbols", "=", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`parameter", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ";", 
                    RowBox[{"OGRe`Private`coordSymbolsWithoutTime", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"2", ";;", "All"}], "\[RightDoubleBracket]"}]}], 
                    ";", 
                    RowBox[{"OGRe`Private`tempMetricID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tempMetricComponents", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Components\"", 
                    "]"}], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"#1", "[", "OGRe`Private`parameter", "]"}]}], 
                    "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbolsWithoutTime"}]}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tempMetricID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`tempMetricComponents"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`metricID", "]"}], "[", "\"Symbol\"", 
                    "]"}]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`tangentID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`tangentComponents", "=", 
                    RowBox[{"OGRe`Private`coordSymbols", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    SuperscriptBox[
                    "#1", "\[Prime]", MultilineFunction -> None], "[", 
                    "OGRe`Private`parameter", "]"}]}], "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbolsWithoutTime"}]}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`tangentComponents", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "=", "1"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`tangentID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", "OGRe`Private`tangentComponents"}], 
                    "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Symbol\"", "]"}],
                     "."]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`accelID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`accelComponents", "=", 
                    
                    RowBox[{"OGRe`Private`coordSymbols", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    SuperscriptBox[
                    "#1", "\[Prime]\[Prime]", MultilineFunction -> None], "[",
                     "OGRe`Private`parameter", "]"}]}], "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbolsWithoutTime"}]}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`accelComponents", 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "=", "0"}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`accelID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "OGRe`Private`useCoords"}], 
                    "}"}], "\[Rule]", "OGRe`Private`accelComponents"}], 
                    "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`useCoords", "]"}], "[", "\"Symbol\"", "]"}],
                     "\"\[DoubleDot]\""]}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`christID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`christComponents", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    
                    RowBox[{"OGRe`Private`metricID", "<>", 
                    "\"Christoffel\""}], "]"}], "[", "\"Components\"", "]"}], 
                    "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"#1", "[", "OGRe`Private`parameter", "]"}]}], 
                    "&"}], ")"}], "/@", 
                    "OGRe`Private`coordSymbolsWithoutTime"}]}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`christID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`christComponents"}], "]"}]}], ",", 
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Christoffel\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "\"\[CapitalGamma]\""}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"OGRe`Private`christWith0ID", "=", 
                    RowBox[{"OGRe`Private`NewTempID", "[", "]"}]}], ";", 
                    RowBox[{"OGRe`Private`christWith0Components", "=", 
                    
                    RowBox[{"OGRe`Private`christComponents", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "All", ",", "All"}], 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"OGRe`Private`SetTensorID", "[", 
                    RowBox[{"OGRe`Private`christWith0ID", ",", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"Components\"", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    "OGRe`Private`useCoords"}], "}"}], "\[Rule]", 
                    "OGRe`Private`christWith0Components"}], "]"}]}], ",", 
                    
                    RowBox[{"\"DefaultCoords\"", "\[Rule]", 
                    "OGRe`Private`useCoords"}], ",", 
                    RowBox[{"\"DefaultIndices\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], ",", 
                    
                    RowBox[{"\"Metric\"", "\[Rule]", 
                    "OGRe`Private`tempMetricID"}], ",", 
                    RowBox[{"\"Role\"", "\[Rule]", "\"Temporary\""}], ",", 
                    
                    RowBox[{"\"Symbol\"", "\[Rule]", 
                    "\"\[CapitalGamma]\""}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{"OGRe`Private`newID", ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`accelID", "[", "\"\[Sigma]\"", 
                    "]"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`christID", "[", 
                    "\"\[Sigma]\[Mu]\[Nu]\"", "]"}], "-", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`christWith0ID", "[", 
                    "\"\[Mu]\[Nu]\"", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Sigma]\"", 
                    "]"}]}]}], ")"}], ".", 
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Mu]\"", "]"}],
                     ".", 
                    
                    RowBox[{"OGRe`Private`tangentID", "[", "\"\[Nu]\"", 
                    "]"}]}]}], ",", "\"0\""}], "]"}], ";", 
                    
                    RowBox[{"OGRe`Private`RemoveTensorID", "[", 
                    "OGRe`Private`christID", "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`newID", ",", "\"Metric\"", ",", 
                    "OGRe`Private`metricID"}], "]"}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`newID", ",", "\"Role\"", ",", 
                    "\"GeodesicWithTimeParameter\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "OGRe`Private`newID", "]"}], 
                    ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcGeodesicWithTimeParameter\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcGeodesicWithTimeParameter[\\\", StyleBox[\\\"metricID\\\", Bold, \
Rule[StripOnInput, False]], \\\", \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\"] calculates the geodesic equations obtained \
for each of the coordinates in \\\", StyleBox[\\\"coordinatesID\\\", Bold, \
Rule[StripOnInput, False]], \\\" using the Christoffel symbols of the metric \
\\\", StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \\\" and \
stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"metricID\\\", Bold, Rule[StripOnInput, False]], \
\\\"GeodesicFromChristoffel\\\\\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\\\nThe result will be given in \
terms of the spatial coordinate symbols as functions of the time coordinate \
and their derivatives with respect to time. The first coordinate of \\\", \
StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" will \
be assumed to be the time coordinate, even if its symbol is not t.\\\\nIf \
\\\", StyleBox[\\\"coordinatesID\\\", Bold, Rule[StripOnInput, False]], \\\" \
is not specified, the default coordinate system of the metric will be used.\\\
\"}]], TextCell[Row[List[\\\"TCalcGeodesicWithTimeParameter[\\\", \
Style[\\\"metricID\\\", Bold], \\\", \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\"] calculates the geodesic equations obtained for each of the \
coordinates in \\\", Style[\\\"coordinatesID\\\", Bold], \\\" using the \
Christoffel symbols of the metric \\\", Style[\\\"metricID\\\", Bold], \\\" \
and stores the result in a new rank-1 tensor object with ID \\\\\\\"\\\", \
Style[\\\"metricID\\\", Bold], \\\"GeodesicFromChristoffel\\\\\\\". Equating \
the components to zero will yield the full system of geodesic \
equations.\\\\nThe result will be given in terms of the spatial coordinate \
symbols as functions of the time coordinate and their derivatives with \
respect to time. The first coordinate of \\\", Style[\\\"coordinatesID\\\", \
Bold], \\\" will be assumed to be the time coordinate, even if its symbol is \
not t.\\\\nIf \\\", Style[\\\"coordinatesID\\\", Bold], \\\" is not \
specified, the default coordinate system of the metric will be \
used.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcGeodesicWithTimeParameter[\
\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, False]], \", \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \"] calculates \
the geodesic equations obtained for each of the coordinates in \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" using the \
Christoffel symbols of the metric \", StyleBox[\"metricID\", Bold, \
Rule[StripOnInput, False]], \" and stores the result in a new rank-1 tensor \
object with ID \\\"\", StyleBox[\"metricID\", Bold, Rule[StripOnInput, \
False]], \"GeodesicFromChristoffel\\\". Equating the components to zero will \
yield the full system of geodesic equations.\\nThe result will be given in \
terms of the spatial coordinate symbols as functions of the time coordinate \
and their derivatives with respect to time. The first coordinate of \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" will be \
assumed to be the time coordinate, even if its symbol is not t.\\nIf \", \
StyleBox[\"coordinatesID\", Bold, Rule[StripOnInput, False]], \" is not \
specified, the default coordinate system of the metric will be used.\"}]], \
TextCell[Row[List[\"TCalcGeodesicWithTimeParameter[\", Style[\"metricID\", \
Bold], \", \", Style[\"coordinatesID\", Bold], \"] calculates the geodesic \
equations obtained for each of the coordinates in \", \
Style[\"coordinatesID\", Bold], \" using the Christoffel symbols of the \
metric \", Style[\"metricID\", Bold], \" and stores the result in a new \
rank-1 tensor object with ID \\\"\", Style[\"metricID\", Bold], \
\"GeodesicFromChristoffel\\\". Equating the components to zero will yield the \
full system of geodesic equations.\\nThe result will be given in terms of the \
spatial coordinate symbols as functions of the time coordinate and their \
derivatives with respect to time. The first coordinate of \", \
Style[\"coordinatesID\", Bold], \" will be assumed to be the time coordinate, \
even if its symbol is not t.\\nIf \", Style[\"coordinatesID\", Bold], \" is \
not specified, the default coordinate system of the metric will be \
used.\"]]]]\)", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcGeodesicWithTimeParameter, {
      OGRe`TCalcGeodesicWithTimeParameter[
         Pattern[OGRe`Private`metricID, 
          Blank[String]], 
         Optional[
          Pattern[OGRe`Private`coordinatesID, 
           Blank[String]], "_UseDefault_"]] :> 
       Module[{OGRe`Private`accelComponents, OGRe`Private`accelID, 
          OGRe`Private`christComponents, OGRe`Private`christID, 
          OGRe`Private`christWith0Components, OGRe`Private`christWith0ID, 
          OGRe`Private`coordSymbols, OGRe`Private`coordSymbolsWithoutTime, 
          OGRe`Private`newID = 
          OGRe`Private`metricID <> "GeodesicWithTimeParameter", 
          OGRe`Private`parameter, OGRe`Private`tangentComponents, 
          OGRe`Private`tangentID, OGRe`Private`tempMetricComponents, 
          OGRe`Private`tempMetricID, OGRe`Private`useCoords}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`metricID]; 
         If[OGRe`Private`TensorData[OGRe`Private`metricID]["Role"] =!= 
           "Metric", Message[
             MessageName[
             OGRe`TCalcGeodesicWithTimeParameter, "ErrorNotMetric"]]; Abort[]; 
           Null]; If[
          OGRe`Private`coordinatesID === "_UseDefault_", 
           OGRe`Private`useCoords = 
           OGRe`Private`TensorData[OGRe`Private`metricID]["DefaultCoords"], 
           OGRe`Private`CheckIfTensorExists[OGRe`Private`coordinatesID]; 
           OGRe`Private`CheckIfCoordinates[OGRe`Private`coordinatesID]; 
           OGRe`Private`useCoords = OGRe`Private`coordinatesID; Null]; If[
           Not[
            KeyExistsQ[
            OGRe`Private`TensorData, OGRe`Private`metricID <> "Christoffel"]],
            OGRe`TCalcChristoffel[OGRe`Private`metricID]; Null]; 
         OGRe`Private`AddRepresentation[
          OGRe`Private`metricID <> "Christoffel", {1, -1, -1}, 
           OGRe`Private`useCoords]; 
         OGRe`Private`coordSymbols = 
          OGRe`Private`TensorData[OGRe`Private`useCoords][
           "Components"][{{1}, OGRe`Private`useCoords}]; 
         OGRe`Private`parameter = Part[OGRe`Private`coordSymbols, 1]; 
         OGRe`Private`coordSymbolsWithoutTime = 
          Part[OGRe`Private`coordSymbols, 
            Span[2, All]]; 
         OGRe`Private`tempMetricID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tempMetricComponents = ReplaceAll[
            OGRe`Private`TensorData[OGRe`Private`metricID][
            "Components"][{{-1, -1}, OGRe`Private`useCoords}], 
            
            Map[# -> #[OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbolsWithoutTime]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tempMetricID, <|
           "Components" -> <|{{-1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tempMetricComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {-1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OGRe`Private`TensorData[OGRe`Private`metricID]["Symbol"]|>]; 
         OGRe`Private`tangentID = OGRe`Private`NewTempID[]; 
         OGRe`Private`tangentComponents = 
          ReplaceAll[OGRe`Private`coordSymbols, 
            
            Map[# -> Derivative[1][#][OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbolsWithoutTime]]; 
         Part[OGRe`Private`tangentComponents, 1] = 1; 
         OGRe`Private`SetTensorID[
          OGRe`Private`tangentID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`tangentComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            OverDot[
              OGRe`Private`TensorData[OGRe`Private`useCoords]["Symbol"]]|>]; 
         OGRe`Private`accelID = OGRe`Private`NewTempID[]; 
         OGRe`Private`accelComponents = ReplaceAll[OGRe`Private`coordSymbols, 
            
            Map[# -> Derivative[2][#][OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbolsWithoutTime]]; 
         Part[OGRe`Private`accelComponents, 1] = 0; 
         OGRe`Private`SetTensorID[
          OGRe`Private`accelID, <|
           "Components" -> <|{{1}, OGRe`Private`useCoords} -> 
              OGRe`Private`accelComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            Overscript[
              OGRe`Private`TensorData[OGRe`Private`useCoords]["Symbol"], 
              "\[DoubleDot]"]|>]; 
         OGRe`Private`christID = OGRe`Private`NewTempID[]; 
         OGRe`Private`christComponents = ReplaceAll[
            OGRe`Private`TensorData[OGRe`Private`metricID <> "Christoffel"][
            "Components"][{{1, -1, -1}, OGRe`Private`useCoords}], 
            
            Map[# -> #[OGRe`Private`parameter]& , 
             OGRe`Private`coordSymbolsWithoutTime]]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`christID, <|
           "Components" -> <|{{1, -1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`christComponents|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {1, -1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Christoffel", "Symbol" -> 
            "\[CapitalGamma]"|>]; 
         OGRe`Private`christWith0ID = OGRe`Private`NewTempID[]; 
         OGRe`Private`christWith0Components = 
          Part[OGRe`Private`christComponents, 1, All, All]; 
         OGRe`Private`SetTensorID[
          OGRe`Private`christWith0ID, <|
           "Components" -> <|{{-1, -1}, OGRe`Private`useCoords} -> 
              OGRe`Private`christWith0Components|>, "DefaultCoords" -> 
            OGRe`Private`useCoords, "DefaultIndices" -> {-1, -1}, "Metric" -> 
            OGRe`Private`tempMetricID, "Role" -> "Temporary", "Symbol" -> 
            "\[CapitalGamma]"|>]; 
         OGRe`TCalc[
          OGRe`Private`newID, OGRe`Private`accelID["\[Sigma]"] + 
           Dot[OGRe`Private`christID["\[Sigma]\[Mu]\[Nu]"] - Dot[
              OGRe`Private`christWith0ID["\[Mu]\[Nu]"], 
              OGRe`Private`tangentID["\[Sigma]"]], 
             OGRe`Private`tangentID["\[Mu]"], 
             OGRe`Private`tangentID["\[Nu]"]], "0"]; 
         OGRe`Private`RemoveTensorID[OGRe`Private`christID]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Metric", OGRe`Private`metricID]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`newID, "Role", "GeodesicWithTimeParameter"]; 
         Return[OGRe`Private`newID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcGeodesicWithTimeParameter"|>, False]]], "Output",
 CellLabel->"Out[197]=",ExpressionUUID->"8d6bb927-85de-4636-8f2c-5591e9bb05e5"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 StyleBox["TCalcGeodesicWithTimeParameter", "Input"],
 " assumes time is the first coordinate, but the coordinate does not need to \
have the symbol t. As an example, the equations for the FLRW metric in terms \
of a curve parameter are"
}], "Text",ExpressionUUID->"c5ece053-e809-471d-b6ee-c80b99e0d57e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcGeodesicFromChristoffel", "[", 
   RowBox[{"\"\<FLRW\>\"", ",", "\"\<Cartesian\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[198]:=",ExpressionUUID->"46de475a-5fc2-4e8e-adcc-0507fb500e02"],

Cell[BoxData[
 TemplateBox[{
  "TMessage", "WarningOverwrite", 
   "\"Overwriting the tensor \
\\\"\\!\\(\\*RowBox[{\\\"\\\\\\\"FLRWGeodesicFromChristoffel\\\\\\\"\\\"}]\\)\
\\\".\"", 2, 198, 21, 27069071951462284006, "Local", "OGRe`TMessage"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[198]:=",ExpressionUUID->"cfe77a2b-e78f-4e9e-acfc-88d8f625d9e0"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWGeodesicFromChristoffel\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"t\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"t\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["t", "\[DoubleDot]"], "+", 
           RowBox[{"a", " ", 
            RowBox[{"(", 
             RowBox[{
              SuperscriptBox[
               OverscriptBox["x", "."], "2"], "+", 
              SuperscriptBox[
               OverscriptBox["y", "."], "2"], "+", 
              SuperscriptBox[
               OverscriptBox["z", "."], "2"]}], ")"}], " ", 
            TemplateBox[{"Inactive", "a", "t"},
             "InactiveD"]}]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["x", "\[DoubleDot]"], "+", 
           FractionBox[
            RowBox[{"2", " ", 
             OverscriptBox["t", "."], " ", 
             OverscriptBox["x", "."], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["y", "\[DoubleDot]"], "+", 
           FractionBox[
            RowBox[{"2", " ", 
             OverscriptBox["t", "."], " ", 
             OverscriptBox["y", "."], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["z", "\[DoubleDot]"], "+", 
           FractionBox[
            RowBox[{"2", " ", 
             OverscriptBox["t", "."], " ", 
             OverscriptBox["z", "."], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"f2a5e120-80e0-4fe5-b424-e47ecd0b6fa8"]
}, Open  ]],

Cell["but in terms of t, we only need 3 equations:", \
"Text",ExpressionUUID->"8634a466-fb20-4271-8cec-c1f337ecb237"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcGeodesicWithTimeParameter", "[", 
   RowBox[{"\"\<FLRW\>\"", ",", "\"\<Cartesian\>\""}], "]"}]}]], "Input",
 CellLabel->
  "In[199]:=",ExpressionUUID->"890370fb-e030-4979-ab99-2c4cf0fbc881"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"FLRWGeodesicWithTimeParameter\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"x\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"x\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["x", "\[DoubleDot]"], "-", 
           FractionBox[
            RowBox[{
             OverscriptBox["x", "."], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "2"}], "+", 
               RowBox[{
                SuperscriptBox["a", "2"], " ", 
                RowBox[{"(", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["x", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["y", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["z", "."], "2"]}], ")"}]}]}], ")"}], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"y\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"y\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["y", "\[DoubleDot]"], "-", 
           FractionBox[
            RowBox[{
             OverscriptBox["y", "."], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "2"}], "+", 
               RowBox[{
                SuperscriptBox["a", "2"], " ", 
                RowBox[{"(", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["x", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["y", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["z", "."], "2"]}], ")"}]}]}], ")"}], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]},
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"0\"", 
              TemplateBox[{
                StyleBox[
                "\"z\"", ShowContents -> False, StripOnInput -> False]}, 
               "RowDefault"], 
              TemplateBox[{"\"z\""}, "RowDefault"]}, "Subsuperscript", 
             SyntaxForm -> SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{
           OverscriptBox["z", "\[DoubleDot]"], "-", 
           FractionBox[
            RowBox[{
             OverscriptBox["z", "."], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "2"}], "+", 
               RowBox[{
                SuperscriptBox["a", "2"], " ", 
                RowBox[{"(", 
                 RowBox[{
                  SuperscriptBox[
                   OverscriptBox["x", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["y", "."], "2"], "+", 
                  SuperscriptBox[
                   OverscriptBox["z", "."], "2"]}], ")"}]}]}], ")"}], " ", 
             TemplateBox[{"Inactive", "a", "t"},
              "InactiveD"]}], "a"]}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"d74a6a58-958d-403a-a918-f2973feed1b3"]
}, Open  ]],

Cell["\<\
These equations are easier to solve. For simplicity, assume that we are only \
moving along the x coordinate. Then we only have one equation to solve:\
\>", "Text",ExpressionUUID->"aca4d2b4-1ba5-4bd1-8dd6-184390096df9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FLRWEq", "=", 
  RowBox[{
   RowBox[{"TGetComponents", "[", 
    RowBox[{"\"\<FLRWGeodesicWithTimeParameter\>\"", ",", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{
          SuperscriptBox["z", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], "2"]}], "->", "0"}], 
      "]"}]}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[200]:=",ExpressionUUID->"625c868b-7b70-4db3-9dfd-04998aedac02"],

Cell[BoxData[
 TemplateBox[{
  "TGetComponents", "UsingDefault", 
   "\"Using \\!\\(\\*RowBox[{\\\"\\\\\\\"the default index configuration {1} \
and the default coordinate system \\\\\\\\\\\\\\\"Cartesian\\\\\\\\\\\\\\\"\\\
\\\\\"\\\"}]\\).\"", 2, 200, 22, 27069071951462284006, "Local", 
   "OGRe`TGetComponents"},
  "MessageTemplate2"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[200]:=",ExpressionUUID->"d5e0d89a-919f-4042-a28d-4c0fb95671c1"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["a", "\[Prime]",
      MultilineFunction->None], "[", "t", "]"}], " ", 
    RowBox[{
     SuperscriptBox["x", "\[Prime]",
      MultilineFunction->None], "[", "t", "]"}], " ", 
    RowBox[{"(", 
     RowBox[{"2", "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"a", "[", "t", "]"}], "2"], " ", 
       SuperscriptBox[
        RowBox[{
         SuperscriptBox["x", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}], "2"]}]}], ")"}]}], 
   RowBox[{"a", "[", "t", "]"}]], "+", 
  RowBox[{
   SuperscriptBox["x", "\[Prime]\[Prime]",
    MultilineFunction->None], "[", "t", "]"}]}]], "Output",
 CellLabel->"Out[200]=",ExpressionUUID->"e74a6522-487a-4823-bda5-3985291ce3f2"]
}, Open  ]],

Cell["\<\
The solution can be obtained in terms of an integral over a(t):\
\>", "Text",ExpressionUUID->"9b5c1f1c-2168-46e3-a8ef-caab832f4a03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FLRWSol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{"FLRWEq", "==", "0"}], ",", "x", ",", "t"}], "]"}]}]], "Input",
 CellLabel->
  "In[201]:=",ExpressionUUID->"317084e6-42c1-4612-bfd0-dddfc89f5ab2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", 
       RowBox[{
        TemplateBox[{"2"},
         "C"], "+", 
        TemplateBox[{
          RowBox[{"-", 
            FractionBox["1", 
             SqrtBox[
              RowBox[{
                SuperscriptBox[
                 RowBox[{"a", "[", 
                   RowBox[{"K", "[", "1", "]"}], "]"}], "2"], "+", 
                RowBox[{
                  SuperscriptBox[
                   RowBox[{"a", "[", 
                    RowBox[{"K", "[", "1", "]"}], "]"}], "4"], " ", 
                  TemplateBox[{"1"}, "C"]}]}]]]}], 
          RowBox[{"K", "[", "1", "]"}], "1", "t"},
         "InactiveIntegrate",
         DisplayFunction->(RowBox[{
            SubsuperscriptBox[
             StyleBox["\[Integral]", "Inactive"], #3, #4], 
            RowBox[{#, 
              RowBox[{
                StyleBox["\[DifferentialD]", "Inactive"], #2}]}]}]& ),
         InterpretationFunction->(RowBox[{
            RowBox[{"Inactive", "[", "Integrate", "]"}], "[", 
            RowBox[{#, ",", 
              RowBox[{"{", 
                RowBox[{#2, ",", #3, ",", #4}], "}"}]}], "]"}]& )]}]}], 
      "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", 
       RowBox[{
        TemplateBox[{"2"},
         "C"], "+", 
        TemplateBox[{
          FractionBox["1", 
           SqrtBox[
            RowBox[{
              SuperscriptBox[
               RowBox[{"a", "[", 
                 RowBox[{"K", "[", "2", "]"}], "]"}], "2"], "+", 
              RowBox[{
                SuperscriptBox[
                 RowBox[{"a", "[", 
                   RowBox[{"K", "[", "2", "]"}], "]"}], "4"], " ", 
                TemplateBox[{"1"}, "C"]}]}]]], 
          RowBox[{"K", "[", "2", "]"}], "1", "t"},
         "InactiveIntegrate",
         DisplayFunction->(RowBox[{
            SubsuperscriptBox[
             StyleBox["\[Integral]", "Inactive"], #3, #4], 
            RowBox[{#, 
              RowBox[{
                StyleBox["\[DifferentialD]", "Inactive"], #2}]}]}]& ),
         InterpretationFunction->(RowBox[{
            RowBox[{"Inactive", "[", "Integrate", "]"}], "[", 
            RowBox[{#, ",", 
              RowBox[{"{", 
                RowBox[{#2, ",", #3, ",", #4}], "}"}]}], "]"}]& )]}]}], 
      "]"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[201]=",ExpressionUUID->"2c7018bb-f70d-4f82-84bb-7d4395d78390"]
}, Open  ]],

Cell[TextData[{
 "From this we can get the coordinate velocity ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["x", "."], TraditionalForm]],ExpressionUUID->
  "aca2388b-4d2f-4e3c-ac24-53eb0023fa84"],
 " along x:"
}], "Text",ExpressionUUID->"4baf50e5-9a67-4552-b2e1-4f24674a682e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "'"}], "[", "t", "]"}], "==", 
  RowBox[{
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", "t", "]"}], 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], "/.", 
         RowBox[{"FLRWSol", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", "t"}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"a", "[", "t", "]"}], ">", "0"}]}], "]"}], "/", 
   RowBox[{"a", "[", "t", "]"}]}]}]], "Input",
 CellLabel->
  "In[202]:=",ExpressionUUID->"6ae18902-5b83-4abf-b140-b39fba727ea0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["x", "\[Prime]",
    MultilineFunction->None], "[", "t", "]"}], "\[Equal]", 
  FractionBox["1", 
   RowBox[{
    RowBox[{"a", "[", "t", "]"}], " ", 
    SqrtBox[
     RowBox[{"1", "+", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"a", "[", "t", "]"}], "2"], " ", 
       TemplateBox[{"1"},
        "C"]}]}]]}]]}]], "Output",
 CellLabel->"Out[202]=",ExpressionUUID->"0dba743a-414f-43ae-8a17-c2e4d9550f60"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More about tensor calculations", \
"Section",ExpressionUUID->"8f20ff87-2b5c-4bdd-9cfd-84a9fc3ba2ca"],

Cell[CellGroupData[{

Cell["Calculating the norm squared", \
"Subsection",ExpressionUUID->"75848367-36fa-4156-9c10-d65f71fc8ed0"],

Cell[TextData[{
 "The norm squared of a tensor of any rank can be calculated with ",
 StyleBox["TCalcNormSquared", "Input"],
 ":"
}], "Text",ExpressionUUID->"bf9a1422-3d04-401f-a13a-f999ec73c3d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCalcNormSquared"}]], "Input",
 CellLabel->
  "In[203]:=",ExpressionUUID->"0e409ccb-2486-48a3-9e50-2adc18aa5e88"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcNormSquared[\\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, \
False]], \\\" calculates the norm-squared of the tensor \\\", \
StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \\\" with \
respect to its metric, that is, the tensor contracted with itself in all \
indices. For example, for a vector v^a the norm-squared will be v^a v_a and \
for a rank-2 tensor T^ab the result will be T^ab T_ab. The result is stored \
in a new rank-0 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \
\\\"NormSquared\\\\\\\".\\\"}]], TextCell[Row[List[\\\"TCalcNormSquared[\\\", \
Style[\\\"tensorID\\\", Bold], \\\" calculates the norm-squared of the tensor \
\\\", Style[\\\"tensorID\\\", Bold], \\\" with respect to its metric, that \
is, the tensor contracted with itself in all indices. For example, for a \
vector v^a the norm-squared will be v^a v_a and for a rank-2 tensor T^ab the \
result will be T^ab T_ab. The result is stored in a new rank-0 tensor object \
with ID \\\\\\\"\\\", Style[\\\"tensorID\\\", Bold], \\\"NormSquared\\\\\\\".\
\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "TCalcNormSquared", "[", "OGRe`Private`tensorID_String", 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"OGRe`Private`indices", ",", 
                    "OGRe`Private`NormSquaredID", ",", "OGRe`Private`rank"}], 
                    "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`CheckIfTensorExists", "[", 
                    "OGRe`Private`tensorID", "]"}], ";", 
                    RowBox[{"OGRe`Private`rank", "=", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`TensorData", "[", 
                    "OGRe`Private`tensorID", "]"}], "[", "\"DefaultIndices\"",
                     "]"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`indices", "=", 
                    RowBox[{"StringTake", "[", 
                    
                    RowBox[{"OGRe`Private`DefaultIndexLetters", ",", 
                    "OGRe`Private`rank"}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`NormSquaredID", "=", 
                    RowBox[{"TCalc", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    
                    RowBox[{"OGRe`Private`tensorID", "<>", 
                    "\"NormSquared\""}], ")"}], "[", "\"\"", "]"}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`tensorID", "[", 
                    "OGRe`Private`indices", "]"}], ".", 
                    
                    RowBox[{"OGRe`Private`tensorID", "[", 
                    "OGRe`Private`indices", "]"}]}]}], "]"}]}], ";", 
                    RowBox[{"OGRe`Private`ChangeTensorKey", "[", 
                    
                    RowBox[{"OGRe`Private`NormSquaredID", ",", "\"Role\"", 
                    ",", "\"NormSquared\""}], "]"}], ";", 
                    
                    RowBox[{"Return", "[", "OGRe`Private`NormSquaredID", 
                    "]"}], ";"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCalcNormSquared\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TCalcNormSquared[\\\", StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, \
False]], \\\" calculates the norm-squared of the tensor \\\", \
StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \\\" with \
respect to its metric, that is, the tensor contracted with itself in all \
indices. For example, for a vector v^a the norm-squared will be v^a v_a and \
for a rank-2 tensor T^ab the result will be T^ab T_ab. The result is stored \
in a new rank-0 tensor object with ID \\\\\\\"\\\", \
StyleBox[\\\"tensorID\\\", Bold, Rule[StripOnInput, False]], \
\\\"NormSquared\\\\\\\".\\\"}]], TextCell[Row[List[\\\"TCalcNormSquared[\\\", \
Style[\\\"tensorID\\\", Bold], \\\" calculates the norm-squared of the tensor \
\\\", Style[\\\"tensorID\\\", Bold], \\\" with respect to its metric, that \
is, the tensor contracted with itself in all indices. For example, for a \
vector v^a the norm-squared will be v^a v_a and for a rank-2 tensor T^ab the \
result will be T^ab T_ab. The result is stored in a new rank-0 tensor object \
with ID \\\\\\\"\\\", Style[\\\"tensorID\\\", Bold], \\\"NormSquared\\\\\\\".\
\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCalcNormSquared[\", \
StyleBox[\"tensorID\", Bold, Rule[StripOnInput, False]], \" calculates the \
norm-squared of the tensor \", StyleBox[\"tensorID\", Bold, \
Rule[StripOnInput, False]], \" with respect to its metric, that is, the \
tensor contracted with itself in all indices. For example, for a vector v^a \
the norm-squared will be v^a v_a and for a rank-2 tensor T^ab the result will \
be T^ab T_ab. The result is stored in a new rank-0 tensor object with ID \\\"\
\", StyleBox[\"tensorID\", Bold, Rule[StripOnInput, False]], \
\"NormSquared\\\".\"}]], TextCell[Row[List[\"TCalcNormSquared[\", \
Style[\"tensorID\", Bold], \" calculates the norm-squared of the tensor \", \
Style[\"tensorID\", Bold], \" with respect to its metric, that is, the tensor \
contracted with itself in all indices. For example, for a vector v^a the \
norm-squared will be v^a v_a and for a rank-2 tensor T^ab the result will be \
T^ab T_ab. The result is stored in a new rank-0 tensor object with ID \\\"\", \
Style[\"tensorID\", Bold], \"NormSquared\\\".\"]]]]\)", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCalcNormSquared, {OGRe`TCalcNormSquared[
         Pattern[OGRe`Private`tensorID, 
          Blank[String]]] :> 
       Module[{OGRe`Private`indices, OGRe`Private`NormSquaredID, 
          OGRe`Private`rank}, 
         OGRe`Private`CheckIfTensorExists[OGRe`Private`tensorID]; 
         OGRe`Private`rank = Length[
            OGRe`Private`TensorData[OGRe`Private`tensorID]["DefaultIndices"]]; 
         OGRe`Private`indices = 
          StringTake[OGRe`Private`DefaultIndexLetters, OGRe`Private`rank]; 
         OGRe`Private`NormSquaredID = OGRe`TCalc[
            (OGRe`Private`tensorID <> "NormSquared")[""], 
            Dot[
             OGRe`Private`tensorID[OGRe`Private`indices], 
             OGRe`Private`tensorID[OGRe`Private`indices]]]; 
         OGRe`Private`ChangeTensorKey[
          OGRe`Private`NormSquaredID, "Role", "NormSquared"]; 
         Return[OGRe`Private`NormSquaredID]; Null]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCalcNormSquared"|>, False]]], "Output",
 CellLabel->"Out[203]=",ExpressionUUID->"25d576d6-bcd7-49df-b69a-bca328657dd1"]
}, Open  ]],

Cell["\<\
For any tensor, the norm squared is defined as the tensor contracted with \
itself in all indices:\
\>", "Text",ExpressionUUID->"0de27e5b-b973-4fc3-b15a-880821c2106e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"|", "v", 
   SuperscriptBox["|", "2"], 
   RowBox[{"\[Congruent]", 
    RowBox[{
     SuperscriptBox["v", "\[Mu]"], 
     SubscriptBox["v", "\[Mu]"]}]}]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"4702154f-b26b-446e-8212-\
bf8d08cf9950"],

Cell[BoxData[
 RowBox[{
  RowBox[{"|", "T", 
   SuperscriptBox["|", "2"], 
   RowBox[{"\[Congruent]", 
    RowBox[{
     SuperscriptBox["T", "\[Mu]\[Nu]"], 
     SubscriptBox["T", "\[Mu]\[Nu]"]}]}]}], 
  ","}]], "DisplayFormula",ExpressionUUID->"a7b8f4d2-970f-4a68-aa9b-\
cffffb77a4c6"],

Cell[TextData[{
 "and so on. The result is always a scalar. For example, the norm of any \
4-velocity is ",
 StyleBox["-1", "InlineFormula"],
 ":"
}], "Text",ExpressionUUID->"b069d0f3-935b-489d-995d-e933d4dbe9ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcNormSquared", "[", "\"\<4-Velocity\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[204]:=",ExpressionUUID->"7dfd52b7-7ced-4a0e-a20b-01a165a4e208"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"4-VelocityNormSquared\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          RowBox[{"-", "1"}]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"ef43cbf1-dba9-48ec-93b2-b8a0e3e110e3"]
}, Open  ]],

Cell["\<\
The norm of any metric is the number of dimensions in that metric:\
\>", "Text",ExpressionUUID->"79715924-cdae-45de-aba9-bfc7a30c1655"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{"TCalcNormSquared", "[", "\"\<Minkowski\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[205]:=",ExpressionUUID->"8e198f0f-49ce-41ed-8006-e736c66ae293"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"MinkowskiNormSquared\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", "4"}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"74cb6ce8-33d0-4718-8ad3-798d64848a1c"]
}, Open  ]],

Cell["\<\
The Kretschmann scalar is the norm squared of the Riemann tensor:\
\>", "Text",ExpressionUUID->"8943219a-596e-4793-a45b-963596059c40"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TList", "@", 
  RowBox[{
  "TCalcNormSquared", "[", "\"\<SchwarzschildRiemann\>\"", "]"}]}]], "Input",
 CellLabel->
  "In[206]:=",ExpressionUUID->"97949db4-3e3d-49a6-bbf8-6c3ec67e4f44"],

Cell[BoxData[
 StyleBox[
  TagBox[GridBox[{
     {
      TemplateBox[{"\"SchwarzschildRiemannNormSquared\"", "\":\""},
       "RowDefault"]},
     {
      TagBox[GridBox[{
         {
          TemplateBox[{"=", "\"=\"", 
            TemplateBox[{"\"\[DottedSquare]\"", 
              TemplateBox[{}, "RowDefault"], 
              TemplateBox[{}, "RowDefault"]}, "Subsuperscript", SyntaxForm -> 
             SubsuperscriptBox]},
           "RowWithSeparators"], "\<\"=\"\>", 
          FractionBox[
           RowBox[{"48", " ", 
            SuperscriptBox["M", "2"]}], 
           SuperscriptBox["r", "6"]]}
        },
        AutoDelete->False,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"613a193f-0bd4-4a41-95e9-03dfb8af4e80"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallelization", \
"Section",ExpressionUUID->"82017fbb-8b07-4f17-bf4e-1fe883f2c339"],

Cell[CellGroupData[{

Cell["Improving performance with parallelization", \
"Subsection",ExpressionUUID->"69cfa8c7-091b-4673-8dce-ce984d52b847"],

Cell[TextData[{
 "The calculations we have demonstrated so far in this documentation have \
been quite simple, and should not take more than a second to perform on a \
decent computer. However, when doing research, calculations can be much more \
involved, and thus also take more time to complete. Typically, the most \
time-consuming part of any tensor calculation is not the tensor operations \
themselves, but rather the ",
 StyleBox["simplification",
  FontWeight->"Bold"],
 " of the final result using ",
 StyleBox["FullSimplify", "Input"],
 "."
}], "Text",ExpressionUUID->"b600e425-2bd2-4999-a5a9-6255ed600dc7"],

Cell[TextData[{
 "If simplification is taking more than a few seconds, it is highly \
recommended to turn on the ",
 StyleBox["parallelization",
  FontWeight->"Bold"],
 " feature, which simplifies the components of the tensors in parallel \
instead of one after the other. This can provide a significant performance \
boost, proportional to the number of parallel kernels that can be launched. \
Note that this number is determined by your Mathematica license, and it may \
be less than the number of cores in your CPU."
}], "Text",ExpressionUUID->"4871566f-2075-40ca-9f52-7ffd555585d2"],

Cell[TextData[{
 "Since we would like to measure execution time in this section, let us use \
the command ",
 StyleBox["ClearSystemCache", "Input"],
 " to clear Mathematica\[CloseCurlyQuote]s cache - since otherwise it will \
remember the results of previous simplifications, which may artificially \
speed up the calculation:"
}], "Text",ExpressionUUID->"24a7241f-b27a-4250-b1d9-f1c0f7d2d775"],

Cell[BoxData[
 RowBox[{"ClearSystemCache", "[", "]"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"58bc11db-0db7-4659-a728-8a61780f44c0"],

Cell[TextData[{
 "To demonstrate the benefits of parallelization, let us consider the \
following somewhat complicated non-diagonal metric, which depends on an \
abstract function ",
 StyleBox["f", "Input"],
 ":"
}], "Text",ExpressionUUID->"efc9d071-7212-4888-8ceb-a0ae7ff97f4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TShow", "[", 
  RowBox[{"TNewMetric", "[", 
   RowBox[{"\"\<ParallelizationTest\>\"", ",", "\"\<Cartesian\>\"", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{
        RowBox[{"a", " ", "b", " ", 
         SuperscriptBox["t", "2"]}], "+", 
        SuperscriptBox["x", "3"]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "1", ",", "4"}], "}"}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellLabel->
  "In[208]:=",ExpressionUUID->"f6939795-7022-436d-961d-7583b3ac1c92"],

Cell[BoxData[
 StyleBox[
  TemplateBox[{"\"ParallelizationTest\"", "\":   \"", 
    TemplateBox[{"\"g\"", 
      TemplateBox[{"\"\[Mu]\"", "\"\[Nu]\""}, "RowDefault"], 
      TemplateBox[{
        StyleBox["\"\[Mu]\"", ShowContents -> False, StripOnInput -> False], 
        StyleBox["\"\[Nu]\"", ShowContents -> False, StripOnInput -> False]}, 
       "RowDefault"]}, "Subsuperscript", SyntaxForm -> SubsuperscriptBox], 
    "\"(\"", 
    TemplateBox[{",", "\",\"", "t", "x", "y", "z"}, "RowWithSeparators"], 
    "\")\"", "\" = \"", 
    TagBox[
     RowBox[{"(", "\[NoBreak]", 
       GridBox[{{
          RowBox[{"f", "[", 
            RowBox[{
              SuperscriptBox["t", "2"], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"2", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"3", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"4", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}]}, {
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"2", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"4", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"6", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"8", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}]}, {
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"3", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"6", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"9", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"12", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}]}, {
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"4", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"8", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"12", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}], 
          RowBox[{"f", "[", 
            RowBox[{
              RowBox[{"16", " ", 
                SuperscriptBox["t", "2"]}], "+", 
              SuperscriptBox["x", "3"]}], "]"}]}}, RowSpacings -> 1, 
        ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
        Center], "\[NoBreak]", ")"}], 
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]]},
   "RowDefault"], "DisplayFormula",
  StripOnInput->False]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"d678326f-6ca2-4a9e-8456-b5a1753c25e0"]
}, Open  ]],

Cell[TextData[{
 "We first calculate the Christoffel symbols for this metric ",
 StyleBox["without",
  FontWeight->"Bold"],
 " parallelization, and use ",
 StyleBox["AbsoluteTiming", "Input"],
 " to measure how long it takes:"
}], "Text",ExpressionUUID->"40a5397a-3d2a-441c-9295-91751c1b621d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"notParallelChristoffel", "=", 
  RowBox[{"AbsoluteTiming", "[", 
   RowBox[{"TCalcChristoffel", "[", "\"\<ParallelizationTest\>\"", "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[209]:=",ExpressionUUID->"b0f09d28-5034-456d-ab16-ef5dd0a3e719"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"32.2501903`", ",", "\<\"ParallelizationTestChristoffel\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[209]=",ExpressionUUID->"bff836d4-8331-4c9f-8dcb-443739e75eb4"]
}, Open  ]],

Cell["\<\
The first item on the list is the number of seconds this calculation took on \
my computer. On your computer this duration may be shorter or longer, but the \
calculation will invariably take a considerable amount of time on any \
personal computer. The vast majority of that time is spent not on calculating \
the tensor, but on simplifying the result.\
\>", "Text",ExpressionUUID->"f79ddeae-1340-4cc6-baca-2d8afdfbf29a"],

Cell[TextData[{
 "To turn on parallelization, we use the module ",
 StyleBox["TSetParallelization", "Input"],
 ":"
}], "Text",ExpressionUUID->"23b6298f-315e-4107-89ff-c8f0fa907f50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TSetParallelization"}]], "Input",
 CellLabel->
  "In[210]:=",ExpressionUUID->"927ce82d-0c31-43ca-9273-62e283547f9f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetParallelization[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] enables the parallelization of tensor simplifications, and \
TSetParallelization[\\\", StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, \
False]], \\\"] disables it. The default value is \\\", \
StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, False]], \\\". \
TSetParallelization[] returns the current value. If simplifications take less \
than a few seconds, then you should leave parallelization off, as it has a \
small overhead and may actually impede performance. However, if \
simplifications are taking more than a few seconds, then it is highly \
recommended to enable parallelization for a significant performance \
boost.\\\"}]], TextCell[Row[List[\\\"TSetParallelization[\\\", Style[\\\"True\
\\\", Bold], \\\"] enables the parallelization of tensor simplifications, and \
TSetParallelization[\\\", Style[\\\"False\\\", Bold], \\\"] disables it. The \
default value is \\\", Style[\\\"False\\\", Bold], \\\". \
TSetParallelization[] returns the current value. If simplifications take less \
than a few seconds, then you should leave parallelization off, as it has a \
small overhead and may actually impede performance. However, if \
simplifications are taking more than a few seconds, then it is highly \
recommended to enable parallelization for a significant performance \
boost.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TSetParallelization", "[", "]"}], ":=", 
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"Parallelize\"", "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"TSetParallelization", "[", 
                    RowBox[{"OGRe`Private`par_", "?", "BooleanQ"}], "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    
                    RowBox[{
                    "Unprotect", "[", "OGRe`Private`TensorData", "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OGRe`Private`TensorData", "[", "Options", "]"}], 
                    "[", "\"Parallelize\"", "]"}], "=", "OGRe`Private`par"}], 
                    ";", 
                    RowBox[{"Protect", "[", "OGRe`Private`TensorData", "]"}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{"OGRe`Private`par", ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Parallelization enabled.\"", "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"$KernelCount", "<", "$MaxLicenseSubprocesses"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"LaunchKernels", "[", 
                    RowBox[{"$MaxLicenseSubprocesses", "-", "$KernelCount"}], 
                    "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    
                    RowBox[{"$KernelCount", ",", 
                    "\" parallel kernels launched. CPU has \"", ",", 
                    "$ProcessorCount", ",", "\" cores.\""}], "]"}], ";"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    "\"Parallelization disabled.\"", "]"}], ";", 
                    RowBox[{"OGRe`Private`OGRePrint", "[", 
                    
                    RowBox[{"\"Closing \"", ",", "$KernelCount", ",", 
                    "\" kernels.\""}], "]"}], ";", 
                    RowBox[{"CloseKernels", "[", "]"}], ";"}]}], "]"}], ";"}],
                     ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TSetParallelization\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"\
TSetParallelization[\\\", StyleBox[\\\"True\\\", Bold, Rule[StripOnInput, \
False]], \\\"] enables the parallelization of tensor simplifications, and \
TSetParallelization[\\\", StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, \
False]], \\\"] disables it. The default value is \\\", \
StyleBox[\\\"False\\\", Bold, Rule[StripOnInput, False]], \\\". \
TSetParallelization[] returns the current value. If simplifications take less \
than a few seconds, then you should leave parallelization off, as it has a \
small overhead and may actually impede performance. However, if \
simplifications are taking more than a few seconds, then it is highly \
recommended to enable parallelization for a significant performance \
boost.\\\"}]], TextCell[Row[List[\\\"TSetParallelization[\\\", Style[\\\"True\
\\\", Bold], \\\"] enables the parallelization of tensor simplifications, and \
TSetParallelization[\\\", Style[\\\"False\\\", Bold], \\\"] disables it. The \
default value is \\\", Style[\\\"False\\\", Bold], \\\". \
TSetParallelization[] returns the current value. If simplifications take less \
than a few seconds, then you should leave parallelization off, as it has a \
small overhead and may actually impede performance. However, if \
simplifications are taking more than a few seconds, then it is highly \
recommended to enable parallelization for a significant performance \
boost.\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TSetParallelization[\", \
StyleBox[\"True\", Bold, Rule[StripOnInput, False]], \"] enables the \
parallelization of tensor simplifications, and TSetParallelization[\", \
StyleBox[\"False\", Bold, Rule[StripOnInput, False]], \"] disables it. The \
default value is \", StyleBox[\"False\", Bold, Rule[StripOnInput, False]], \
\". TSetParallelization[] returns the current value. If simplifications take \
less than a few seconds, then you should leave parallelization off, as it has \
a small overhead and may actually impede performance. However, if \
simplifications are taking more than a few seconds, then it is highly \
recommended to enable parallelization for a significant performance \
boost.\"}]], TextCell[Row[List[\"TSetParallelization[\", Style[\"True\", \
Bold], \"] enables the parallelization of tensor simplifications, and \
TSetParallelization[\", Style[\"False\", Bold], \"] disables it. The default \
value is \", Style[\"False\", Bold], \". TSetParallelization[] returns the \
current value. If simplifications take less than a few seconds, then you \
should leave parallelization off, as it has a small overhead and may actually \
impede performance. However, if simplifications are taking more than a few \
seconds, then it is highly recommended to enable parallelization for a \
significant performance boost.\"]]]]\)", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TSetParallelization, {
      OGRe`TSetParallelization[] :> 
       OGRe`Private`TensorData[Options]["Parallelize"], 
       OGRe`TSetParallelization[
         PatternTest[
          Pattern[OGRe`Private`par, 
           Blank[]], BooleanQ]] :> (Unprotect[OGRe`Private`TensorData]; 
        OGRe`Private`TensorData[Options]["Parallelize"] = OGRe`Private`par; 
        Protect[OGRe`Private`TensorData]; 
        If[OGRe`Private`par, 
          OGRe`Private`OGRePrint["Parallelization enabled."]; 
          If[$KernelCount < $MaxLicenseSubprocesses, 
            LaunchKernels[$MaxLicenseSubprocesses - $KernelCount]; 
            OGRe`Private`OGRePrint[$KernelCount, 
              " parallel kernels launched. CPU has ", $ProcessorCount, 
              " cores."]; Null], 
          OGRe`Private`OGRePrint["Parallelization disabled."]; 
          OGRe`Private`OGRePrint["Closing ", $KernelCount, " kernels."]; 
          CloseKernels[]; Null]; Null)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TSetParallelization"|>, False]]], "Output",
 CellLabel->"Out[210]=",ExpressionUUID->"584d60db-f3f5-4283-b16a-b462a44dee5d"]
}, Open  ]],

Cell["Let us turn it on now:", \
"Text",ExpressionUUID->"d0a558eb-4afd-4cd5-85c6-1b6df5345a82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetParallelization", "[", "True", "]"}]], "Input",
 CellLabel->
  "In[211]:=",ExpressionUUID->"86f645c3-e325-441e-869f-f9a339452cdc"],

Cell[BoxData["\<\"Parallelization enabled.\"\>"], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"75a33083-106e-479b-a9e5-d108f18348fc"],

Cell[BoxData[
 TemplateBox[{
  "8", "\" parallel kernels launched. CPU has \"", "12", "\" cores.\""},
  "RowDefault"]], "Output",
 Editable->False,
 CellLabelStyle->Directive["CellLabel", Smaller, 
   RGBColor[0, 0, 1]],
 CellLabel->"OGRe:",ExpressionUUID->"1714a761-b656-4b96-8565-d4c6f5c794cb"]
}, Open  ]],

Cell["\<\
When parallelization is first turned on, all available parallel kernels are \
automatically launched. As you can see, my system has a 12-core CPU, but only \
8 parallel kernels can be launched, since that is what my Mathematica license \
allows.\
\>", "Text",ExpressionUUID->"c4fa619c-2c5c-46c3-a771-5f3e4bfce5da"],

Cell[TextData[{
 "We will now repeat the calculation of the Christoffel symbols, in order to \
see how its performance improves with parallelization. However, before we can \
do that, we must again use the command ",
 StyleBox["ClearSystemCache", "Input"],
 " to clear Mathematica\[CloseCurlyQuote]s cache:"
}], "Text",ExpressionUUID->"899a3092-79fd-461c-98b1-03cb67906ea6"],

Cell[BoxData[
 RowBox[{"ClearSystemCache", "[", "]"}]], "Input",
 CellLabel->
  "In[212]:=",ExpressionUUID->"b4ad26fc-3da9-42e5-8980-b65eafda5abb"],

Cell[TextData[{
 "(If you don\[CloseCurlyQuote]t trust that ",
 StyleBox["ClearSystemCache", "Input"],
 " is enough to make a reliable benchmark, you can exit the kernel using ",
 StyleBox["Quit", "Input"],
 ", and then reload the package and redefine the Cartesian coordinates and \
the test metric.)"
}], "Text",ExpressionUUID->"335e92a3-b573-4fc8-a4f2-eac3fc9580fb"],

Cell["\<\
We will also delete the tensor that we calculated previously, so that we can \
calculate it again (if overwriting is not turned on):\
\>", "Text",ExpressionUUID->"7dcf17bb-56da-414c-9990-e90b5fb2af0d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TDelete", "[", "\"\<ParallelizationTestChristoffel\>\"", "]"}], 
  ";"}]], "Input",
 CellLabel->
  "In[213]:=",ExpressionUUID->"01c9cbea-10c4-4e35-8ead-cdea25ec967a"],

Cell["\<\
Now we can accurately measure the execution time for TCalcChristoffel with \
parallelization:\
\>", "Text",ExpressionUUID->"4a6b7266-3504-4d03-9336-7ae20f6ada17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"parallelChristoffel", "=", 
  RowBox[{"AbsoluteTiming", "[", 
   RowBox[{"TCalcChristoffel", "[", "\"\<ParallelizationTest\>\"", "]"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[214]:=",ExpressionUUID->"62c3a717-6213-4fbe-b0bc-20031dc024a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.9139686`", ",", "\<\"ParallelizationTestChristoffel\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[214]=",ExpressionUUID->"26f18566-ef80-4455-9d89-c64c6d2fd1f8"]
}, Open  ]],

Cell["\<\
We see that the calculation now took less time, with an improvement by a \
factor of:\
\>", "Text",ExpressionUUID->"d2df71e4-c3d8-464a-8944-312b5880412f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"notParallelChristoffel", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "/", 
  RowBox[{"parallelChristoffel", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[215]:=",ExpressionUUID->"e952b444-7426-45f0-b9d0-c745606be019"],

Cell[BoxData["3.6179385128190824`"], "Output",
 CellLabel->"Out[215]=",ExpressionUUID->"1d07969a-6676-4eab-9122-af568f0547ea"]
}, Open  ]],

Cell["\<\
With longer calculations, the improvement will be even more significant. \
Increasing the number of kernels (if it was allowed by my license) would \
provide an additional speedup.\
\>", "Text",ExpressionUUID->"af9535d6-a0ea-444c-aaa4-d4e1bb4e2730"],

Cell["\<\
As a rule of thumb, if simplifications are taking less than a few seconds, \
then you should leave parallelization off, as it has a small overhead and may \
actually impede performance in that case. However, if simplifications are \
taking more than a few seconds, then it is highly recommended to enable \
parallelization for a significant performance boost.\
\>", "Text",ExpressionUUID->"ff90ba77-a986-405f-8572-98bf41d7e5f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Making use of OGRe\[CloseCurlyQuote]s parallelized simplifications for other \
Mathematica expressions\
\>", "Subsection",ExpressionUUID->"70d2458f-099a-4b69-91d3-57bef481c714"],

Cell[TextData[{
 "When ",
 StyleBox["TSimplify", "Input"],
 " is applied to any expression which is not a tensor object, the object is \
simplified based on the user-defined simplification assumptions set using ",
 StyleBox["TSetAssumptions", "Input"],
 ":"
}], "Text",ExpressionUUID->"846f235b-9aa1-4961-9723-3f7a0fa906c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSetAssumptions", "[", "]"}]], "Input",
 CellLabel->
  "In[216]:=",ExpressionUUID->"43279b4a-9a42-4530-913e-9a05bd688313"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"AssumeReal\"\>", "\[Rule]", "True"}], ",", 
   RowBox[{"\<\"User\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"r", "\[GreaterEqual]", "0"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[216]=",ExpressionUUID->"020a4b13-e2b3-4402-baea-e5b1df314fbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TSimplify", "[", 
  SqrtBox[
   SuperscriptBox["r", "2"]], "]"}]], "Input",
 CellLabel->
  "In[217]:=",ExpressionUUID->"6552b578-917c-4399-bb4c-e1be7fb16abd"],

Cell[BoxData["r"], "Output",
 CellLabel->"Out[217]=",ExpressionUUID->"d5301cab-a3ae-41a6-a336-7b7a05b9a5dc"]
}, Open  ]],

Cell[TextData[{
 "If the expression is a ",
 StyleBox["List", "Input"],
 ", the components will be simplified in parallel. The user can thus make use \
of OGRe\[CloseCurlyQuote]s optimized simplification process to simplify any \
Mathematica expression. For example, the following simplification will be \
slow and will not use our simplification assumptions:"
}], "Text",ExpressionUUID->"9a0b0b85-43c3-4c32-ba63-e240f26f90eb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testExpression", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"a", " ", "b", " ", 
       SqrtBox[
        SuperscriptBox["r", 
         RowBox[{"a", "+", "b"}]]]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "1", ",", "5"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\n", 
 RowBox[{"notParallelSimplify", "=", 
  RowBox[{"AbsoluteTiming", "[", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"testExpression", ".", "testExpression"}], "]"}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[218]:=",ExpressionUUID->"910e9d80-f2e9-4456-912c-512f35fa1acf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.4197616`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          SqrtBox[
           SuperscriptBox["r", "2"]], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"9", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"16", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            SqrtBox[
             SuperscriptBox["r", "2"]], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SqrtBox[
            SuperscriptBox["r", "3"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SqrtBox[
              SuperscriptBox["r", "4"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SqrtBox[
            SuperscriptBox["r", "4"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SqrtBox[
              SuperscriptBox["r", "6"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SqrtBox[
            SuperscriptBox["r", "5"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SqrtBox[
              SuperscriptBox["r", "8"]]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SqrtBox[
              SuperscriptBox["r", "10"]]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SqrtBox[
            SuperscriptBox["r", "6"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SqrtBox[
            SuperscriptBox["r", "7"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SqrtBox[
            SuperscriptBox["r", "8"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SqrtBox[
            SuperscriptBox["r", "9"]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"25", " ", 
           SqrtBox[
            SuperscriptBox["r", "10"]]}], "]"}], "2"]}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[220]=",ExpressionUUID->"1c09d684-9e89-496d-928d-276e8d9d5afa"]
}, Open  ]],

Cell[TextData[{
 "On the other hand, ",
 StyleBox["TSimplify", "Input"],
 " will get rid of the square roots and take much less time:"
}], "Text",ExpressionUUID->"3ff54f72-c713-4f46-85d9-1e4b688ac7b8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearSystemCache", "[", "]"}], "\n", 
 RowBox[{"parallelSimplify", "=", 
  RowBox[{"AbsoluteTiming", "[", 
   RowBox[{"TSimplify", "[", 
    RowBox[{"testExpression", ".", "testExpression"}], "]"}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[221]:=",ExpressionUUID->"c4eaf899-ee79-4a62-8294-07a9c5417ae7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.3173088`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", "r", "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", "2"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"9", " ", 
           SuperscriptBox["r", "3"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}]}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"16", " ", 
           SuperscriptBox["r", "4"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}], "2"]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "r", "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"2", " ", 
           SuperscriptBox["r", 
            RowBox[{"3", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"4", " ", 
             SuperscriptBox["r", "2"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"3", " ", 
           SuperscriptBox["r", "2"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"6", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"9", " ", 
             SuperscriptBox["r", "3"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"4", " ", 
           SuperscriptBox["r", 
            RowBox[{"5", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"8", " ", 
           SuperscriptBox["r", "3"]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"12", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}]}], "+", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"16", " ", 
             SuperscriptBox["r", "4"]}], "]"}], "+", 
           RowBox[{"f", "[", 
            RowBox[{"25", " ", 
             SuperscriptBox["r", "5"]}], "]"}]}], ")"}]}]}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"5", " ", 
           SuperscriptBox["r", "3"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"10", " ", 
           SuperscriptBox["r", 
            RowBox[{"7", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"15", " ", 
           SuperscriptBox["r", "4"]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"20", " ", 
           SuperscriptBox["r", 
            RowBox[{"9", "/", "2"}]]}], "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"f", "[", 
          RowBox[{"25", " ", 
           SuperscriptBox["r", "5"]}], "]"}], "2"]}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[222]=",ExpressionUUID->"f951f30f-69d1-4feb-8dac-93c71b7455ac"]
}, Open  ]],

Cell["\<\
On my computer, parallelization provided a speedup by a factor of:\
\>", "Text",ExpressionUUID->"328d242a-b409-44bd-b4b3-5a522e7d1bd2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"notParallelSimplify", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "/", 
  RowBox[{"parallelSimplify", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"ab2a1a19-21db-47c0-ab22-02a7066e266b"],

Cell[BoxData["4.474384574269607`"], "Output",
 CellLabel->"Out[223]=",ExpressionUUID->"7b76deb9-b8b8-43b0-af06-76eff5db5566"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional information", \
"Section",ExpressionUUID->"23ff11bb-d226-4517-b5c4-8f0a686ee8a2"],

Cell[CellGroupData[{

Cell["Version history", \
"Subsection",ExpressionUUID->"900dae2a-c217-42f9-901d-9ad83691f7c0"],

Cell[TextData[{
 "For the full version history, please see the file ",
 StyleBox["CHANGELOG.md", "Input"],
 " in the ",
 ButtonBox["GitHub repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 "."
}], "Text",ExpressionUUID->"bf616a40-580c-4278-95f9-820b7204c7cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature requests and bug reports", \
"Subsection",ExpressionUUID->"bdc413ea-49f8-4552-8821-8d05ac695efd"],

Cell[TextData[{
 "This package is under continuous and active development. If you encounter \
any bugs, or if you would like to request any additional features, please \
feel free to ",
 ButtonBox["open a new issue on GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 " and I will look into it as soon as I can."
}], "Text",ExpressionUUID->"2d5265f6-18a6-4990-9111-22e5fd25cae1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Copyright and citing", \
"Subsection",ExpressionUUID->"c56d69a9-5559-4a30-aa5e-246da6eaeeb7"],

Cell[TextData[{
 "Copyright (c) 2021 Barak Shoshany (http://baraksh.com) (",
 ButtonBox["baraksh@gmail.com",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["mailto:baraksh@gmail.com"], None},
  ButtonNote->"mailto:baraksh@gmail.com"],
 "). Licensed under the MIT license; please see the file ",
 StyleBox["LICENSE.txt", "Input"],
 " in the ",
 ButtonBox["GitHub repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/bshoshany/OGRe"], None},
  ButtonNote->"https://github.com/bshoshany/OGRe"],
 " for more information."
}], "Text",ExpressionUUID->"5cd5de76-272e-49c5-a801-24b6e4a314de"],

Cell[TextData[{
 "Citing information can always be obtained by executing the command ",
 StyleBox["TCite[]", "Input"],
 ":"
}], "Text",ExpressionUUID->"4df539d9-c4a0-4326-8a35-b55dd0ab8138"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "TCite"}]], "Input",
 CellLabel->
  "In[224]:=",ExpressionUUID->"04a10bf1-8925-483a-aae3-f0592d7af6c4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TCite[\
] displays information on how to cite this package in published research. \
Thank you for citing my work! :)\\\"}]], TextCell[Row[List[\\\"TCite[] \
displays information on how to cite this package in published research. Thank \
you for citing my work! :)\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"TCite", "[", "]"}], ":=", 
                    RowBox[{"CellPrint", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cell", "[", 
                    
                    RowBox[{
                    "\"If you use this package in published research, please \
cite it as follows:\"", ",", "\"Text\""}], "]"}], ",", 
                    RowBox[{"Cell", "[", 
                    
                    RowBox[{
                    "\"Shoshany, B., (2021). OGRe: An Object-Oriented General \
Relativity Package for Mathematica. Journal of Open Source Software, 6(65), \
3416, https://doi.org/10.21105/joss.03416\"", ",", "\"Item\""}], "]"}], ",", 
                    RowBox[{"Cell", "[", 
                    
                    RowBox[{
                    "\"You can also use the following BibTeX entry:\"", ",", 
                    "\"Text\""}], "]"}], ",", 
                    RowBox[{"Cell", "[", 
                    
                    RowBox[{
                    "\"@article{Shoshany2021_OGRe,\\n    author    = {Barak \
Shoshany},\\n    doi       = {10.21105/joss.03416},\\n    journal   = \
{Journal of Open Source Software},\\n    number    = {65},\\n    pages     = \
{3416},\\n    publisher = {The Open Journal},\\n    title     = {OGRe: An \
Object-Oriented General Relativity Package for Mathematica},\\n    url       \
= {https://doi.org/10.21105/joss.03416},\\n    volume    = {6},\\n    year    \
  = {2021}\\n}\"", ",", "\"Program\""}], "]"}], ",", 
                    RowBox[{"Cell", "[", 
                    
                    RowBox[{"\"Thank you for citing my work! :)\"", ",", 
                    "\"Text\""}], "]"}]}], "}"}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"OGRe`TCite\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*InterpretationBox[Cell[TextData[{\\\"TCite[\
] displays information on how to cite this package in published research. \
Thank you for citing my work! :)\\\"}]], TextCell[Row[List[\\\"TCite[] \
displays information on how to cite this package in published research. Thank \
you for citing my work! :)\\\"]]]]\\)\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*InterpretationBox[Cell[TextData[{\"TCite[] displays information on \
how to cite this package in published research. Thank you for citing my work! \
:)\"}]], TextCell[Row[List[\"TCite[] displays information on how to cite this \
package in published research. Thank you for citing my work! :)\"]]]]\)", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, OGRe`TCite, {OGRe`TCite[] :> CellPrint[{
          Cell[
          "If you use this package in published research, please cite it as \
follows:", "Text"], 
          Cell[
          "Shoshany, B., (2021). OGRe: An Object-Oriented General Relativity \
Package for Mathematica. Journal of Open Source Software, 6(65), 3416, \
https://doi.org/10.21105/joss.03416", "Item"], 
          Cell["You can also use the following BibTeX entry:", "Text"], 
          Cell[
          "@article{Shoshany2021_OGRe,\n    author    = {Barak Shoshany},\n   \
 doi       = {10.21105/joss.03416},\n    journal   = {Journal of Open Source \
Software},\n    number    = {65},\n    pages     = {3416},\n    publisher = \
{The Open Journal},\n    title     = {OGRe: An Object-Oriented General \
Relativity Package for Mathematica},\n    url       = \
{https://doi.org/10.21105/joss.03416},\n    volume    = {6},\n    year      = \
{2021}\n}", "Program"], 
          Cell["Thank you for citing my work! :)", "Text"]}]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "OGRe`TCite"|>, False]]], "Output",
 CellLabel->"Out[224]=",ExpressionUUID->"2753b24f-f39f-40e2-ad69-90c3c450af20"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TCite", "[", "]"}]], "Input",
 CellLabel->
  "In[225]:=",ExpressionUUID->"648e54e8-b9f4-4fb5-9d7f-8049e644c96f"],

Cell["\<\
If you use this package in published research, please cite it as follows:\
\>", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"b09214b4-873d-42cd-be60-73f3acfb8070"],

Cell["\<\
Shoshany, B., (2021). OGRe: An Object-Oriented General Relativity Package for \
Mathematica. Journal of Open Source Software, 6(65), 3416, \
https://doi.org/10.21105/joss.03416\
\>", "Item",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"fc06dad9-7cd2-4224-8e84-61d4dd58a9ae"],

Cell["You can also use the following BibTeX entry:", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"3afd2e9c-07d5-44eb-a9f2-e3e433d4149b"],

Cell["\<\
@article{Shoshany2021_OGRe,
    author    = {Barak Shoshany},
    doi       = {10.21105/joss.03416},
    journal   = {Journal of Open Source Software},
    number    = {65},
    pages     = {3416},
    publisher = {The Open Journal},
    title     = {OGRe: An Object-Oriented General Relativity Package for \
Mathematica},
    url       = {https://doi.org/10.21105/joss.03416},
    volume    = {6},
    year      = {2021}
}\
\>", "Program",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"cdb8b4b8-845d-49c2-b073-623349349fc9"],

Cell["Thank you for citing my work! :)", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"38275de7-8bbb-45eb-a6c7-1a6630b60ce7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgements", \
"Subsection",ExpressionUUID->"e1ef0e67-bff2-4463-89b5-aa75d66da3d9"],

Cell["\<\
A major portion of the code for this package was written while I was a \
postdoctoral researcher in Niayesh Afshordi\[CloseCurlyQuote]s group at \
Perimeter Institute for Theoretical Physics in Waterloo, Ontario, Canada. I \
would like to thank Niayesh Afshordi and Perimeter Institute for their \
support during that time. Research at Perimeter Institute is supported in \
part by the Government of Canada through the Department of Innovation, \
Science, and Economic Development Canada and by the Province of Ontario \
through the Ministry of Colleges and Universities.\
\>", "Text",ExpressionUUID->"67113f0a-ba76-4372-9303-9f5133bfedf2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{949, 461},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
TaggingRules->{"TryRealOnly" -> False},
AutoIndent->True,
TrackCellChangeTimes->False,
SpellingDictionaries->{"CorrectWords"->{
 "covectors", "covector", "Kretschmann", "Barak", "Shoshany", "Friedmann", 
  "\[Alpha]\[Beta]\[Gamma]", "abc", "\[Mu]\[Nu]", "\[Nu]\[Mu]", "\[Nu]\[Rho]",
   "\[Rho]\[Sigma]", "esc", "txt", "\[Mu]\[Lambda]", "md", "its"}},
Magnification:>1. Inherited,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Report"}, "StandardReport.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["Input"], CellFrame -> {{1, 1}, {1, 1}}], 
   Cell[
    StyleData["DisplayFormula"], TextAlignment -> Center, FontSize -> 20], 
   Cell[
    StyleData[All]], 
   Cell[
    StyleData["Chapter"]], 
   Cell[
    StyleData["Text"]], 
   Cell[
    StyleData["Output"], CellMargins -> {{60, 10}, {0, 0}}], 
   Cell[
    StyleData["CodeText"]], 
   Cell[
    StyleData["Notebook"], MenuSortingValue -> 10000, Background -> None], 
   Cell[
    StyleData["DisplayFormula"]]}, Visible -> False, FrontEndVersion -> 
  "13.0 for Microsoft Windows (64-bit) (December 2, 2021)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"431c807f-329f-4849-840e-b6ef9d5a4478"
]

